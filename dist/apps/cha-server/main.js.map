{"version":3,"file":"main.js","mappings":"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uB,yECAA,uB,eCAA,IAAY4iB,E,4EAAAA,EAAA,EAAAA,mBAAA,EAAAA,iBAAgB,KAC1B,WACA,iCACA,6BACA,uBACA,6BACA,uBACA,0B,iFCPF,0BACA,yBACA,0BACA,0BACA,yB,eCJA,IAAYC,E,2EAAAA,EAAA,EAAAA,kBAAA,EAAAA,gBAAe,KACzB,uBACA,wB,eCFF,IAAYC,E,yEAAAA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KACvB,6BACA,+BACA,+BACA,8B,iFCJF,0BACA,yB,eCDA,IAAYC,E,uEAAAA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACrB,0BACA,wBACA,6BACA,0BACA,gCACA,wBACA,0BACA,8BACA,oBACA,oBACA,mCACA,6BACA,gCACA,+BACA,kCACA,+BACA,6BACA,0BACA,4BACA,wBACA,0BAEA,kBACA,wBACA,wBACA,sBACA,wBACA,2BACA,gCACA,sBACA,8BACA,gCACA,oBACA,kCACA,0BACA,4BACA,4BACA,sBACA,mCACA,6BACA,gCACA,wBACA,wBACA,wBACA,4BACA,kBACA,0BACA,sBACA,4BACA,wBACA,oBACA,gCACA,sBACA,sBACA,kCACA,0BAEA,uB,wEC1DF,uB,yECAA,uB,eCAA,IAAYC,E,qEAAAA,EAAA,EAAAA,YAAA,EAAAA,UAAS,KACnB,yBACA,qCACA,qCACA,2BACA,qBACA,qBACA,mCACA,yBACA,gCACA,kCACA,kCACA,8BACA,gCACA,4BACA,wCACA,8BACA,8BACA,kCACA,wBACA,4BACA,0BACA,8BACA,sBACA,sCACA,0BACA,0BACA,oBACA,sCACA,0BACA,wBACA,kCACA,gCACA,sBACA,4BACA,oCACA,kCACA,wBACA,gCACA,kCACA,8BACA,4BACA,wBACA,4BACA,8BACA,kCACA,wBACA,oCACA,kCACA,0BACA,wBACA,sCACA,oCACA,gCACA,0BACA,6B,iFCvDF,0BACA,yB,yECDA,uB,wICAA,uB,0ECAAC,EAAOtf,QAAUuf,QAAQ,gB,WCAzBD,EAAOtf,QAAUuf,QAAQ,iB,WCAzBD,EAAOtf,QAAUuf,QAAQ,iB,UCAzBD,EAAOtf,QAAUuf,QAAQ,e,WCAzBD,EAAOtf,QAAUuf,QAAQ,kB,WCAzBD,EAAOtf,QAAUuf,QAAQ,O,UCAzBD,EAAOtf,QAAUuf,QAAQ,Q,WCAzBD,EAAOtf,QAAUuf,QAAQ,U,WCAzBD,EAAOtf,QAAUuf,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAa3f,QAGrB,IAAIsf,EAASE,EAAyBE,GAAY,CAGjD1f,QAAS,CAAC,GAOX,OAHA6f,EAAoBH,GAAUJ,EAAQA,EAAOtf,QAASyf,GAG/CH,EAAOtf,OACf,C,wECjBA,gBACA,SAGA,UAEA,WAEAlH,iBACE,MAAMgnB,QAAY,EAAAC,YAAY5D,OAA+B,EAAA7mB,WAEvD0qB,EAAOhqB,QAAQC,IAAIgqB,MAAQ,KAEjCvlB,QAAQC,IAAI3E,QAAQC,IAAIC,cAExB4pB,EAAII,gBALiB,OAMrBJ,EAAIK,iBAAgB,IAAAC,MAAKC,UAAW,KAAM,WAC1CP,EAAIQ,iBAAgB,IAAAF,MAAKC,UAAW,iBACpCP,EAAIS,cAAc,OAClBT,EAAIU,aAEJV,EAAIxlB,KAAI,CAACC,EAAKC,EAAKC,KACjBA,GAAM,UAGFqlB,EAAIW,OAAOT,GACjB,EAAAU,OAAO/lB,IACL,kDAAkDqlB,QAEtD,CAEAW,E","sources":["webpack://cha-hockey/./apps/cha-server/src/app/app.controller.ts","webpack://cha-hockey/./apps/cha-server/src/app/app.module.ts","webpack://cha-hockey/./apps/cha-server/src/app/app.service.ts","webpack://cha-hockey/./libs/api/awards/src/index.ts","webpack://cha-hockey/./libs/api/awards/src/lib/api-awards.module.ts","webpack://cha-hockey/./libs/api/awards/src/lib/controllers/awards.controller.ts","webpack://cha-hockey/./libs/api/awards/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/awards/src/lib/middlewares/awards.middleware.ts","webpack://cha-hockey/./libs/api/awards/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/awards/src/lib/services/api-awards.service.ts","webpack://cha-hockey/./libs/api/awards/src/lib/services/api-user-awards.service.ts","webpack://cha-hockey/./libs/api/awards/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/core/src/index.ts","webpack://cha-hockey/./libs/api/core/src/lib/api-core.module.ts","webpack://cha-hockey/./libs/api/draft-table/src/index.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/api-draft-table.module.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/controllers/draft-table.controller.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/middlewares/draft-table.middleware.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/services/api-draft-table.service.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/entities/src/index.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/award-type.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/award.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/conference.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/current_season.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/division.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/draft-order.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/draft.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/goalie-rating.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/goalie-stats.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/index.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/player-rating.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/player-stats.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/player.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/salary.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/schedule.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/team-stats.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/team.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/transactions.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/user.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/waivers.entity.ts","webpack://cha-hockey/./libs/api/entry-draft/src/index.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/api-entry-draft.module.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/controllers/entry-draft.controller.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/middlewares/entry-draft.middleware.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/services/api-entry-draft.service.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/index.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/api-goalie-stats.module.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/controllers/goalie-stats.controller.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/middlewares/goalie-stats.middleware.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/services/api-goalie-all-time-stats.service.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/services/api-goalie-stats-leaders.service.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/services/api-goalie-stats.service.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/services/api-user-goalie-stats.service.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/league/src/index.ts","webpack://cha-hockey/./libs/api/league/src/lib/api-league.module.ts","webpack://cha-hockey/./libs/api/league/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/league/src/lib/controllers/league.controller.ts","webpack://cha-hockey/./libs/api/league/src/lib/middlewares/league.middleware.ts","webpack://cha-hockey/./libs/api/league/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/league/src/lib/services/league.service.ts","webpack://cha-hockey/./libs/api/nhl/src/index.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/api-nhl.module.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/controllers/nhl.controller.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/middlewares/nhl.middleware.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/services/api-nhl.service.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/player-info/src/index.ts","webpack://cha-hockey/./libs/api/player-info/src/lib/api-player-info.module.ts","webpack://cha-hockey/./libs/api/player-info/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/player-info/src/lib/controllers/player-info.controller.ts","webpack://cha-hockey/./libs/api/player-ratings/src/index.ts","webpack://cha-hockey/./libs/api/player-ratings/src/lib/api-player-ratings.module.ts","webpack://cha-hockey/./libs/api/player-ratings/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/player-ratings/src/lib/controllers/player-ratings.controller.ts","webpack://cha-hockey/./libs/api/player-stats/src/index.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/api-player-stats.module.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/controllers/player-stats.controller.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/middlewares/player-stats.middleware.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/services/api-player-all-time-stats.service.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/services/api-player-leaders-stats.service.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/services/api-player-stats.service.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/services/api-user-player-stats.service.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/salaries/src/index.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/api-salaries.module.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/controllers/salaries.controller.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/middlewares/salaries.middleware.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/services/api-salaries.service.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/schedule/src/index.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/api-schedule.module.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/controllers/schedule.controller.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/middlewares/schedule.middleware.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/services/api-schedule.service.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/team-stats/src/index.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/api-team-stats.module.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/controllers/team-stats.controller.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/middlewares/team-stats.middleware.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/services/api-all-time-team-stats.service.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/services/api-team-stats.service.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/services/api-user-team-stats.service.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/teams/src/index.ts","webpack://cha-hockey/./libs/api/teams/src/lib/api-teams.module.ts","webpack://cha-hockey/./libs/api/teams/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/teams/src/lib/controllers/teams.controller.ts","webpack://cha-hockey/./libs/api/teams/src/lib/middlewares/teams.middleware.ts","webpack://cha-hockey/./libs/api/teams/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/teams/src/lib/services/teams.service.ts","webpack://cha-hockey/./libs/api/transactions/src/index.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/api-transactions.module.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/controllers/transactions.controller.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/middlewares/transactions.middleware.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/services/api-transactions.service.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/users/src/index.ts","webpack://cha-hockey/./libs/api/users/src/lib/api-users.module.ts","webpack://cha-hockey/./libs/api/users/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/users/src/lib/controllers/users.controller.ts","webpack://cha-hockey/./libs/api/users/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/users/src/lib/middlewares/user.middleware.ts","webpack://cha-hockey/./libs/api/users/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/users/src/lib/services/users.service.ts","webpack://cha-hockey/./libs/api/waivers/src/index.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/api-waivers.module.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/controllers/waivers.controller.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/middlewares/waivers.middleware.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/services/api-waivers.service.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/services/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/awards/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/drafts/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/league/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/nhl/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/player/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/salaries/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/schedule/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/stats/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/teams/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/transactions/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/user/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/user/user.create.dto.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/user/user.dto.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/waivers/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/award/awardType.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/award/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/button/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/button/primeButtonClass.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/league/conferences.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/league/divisions.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/league/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/logo/cha-logo.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/logo/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/teams/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/teams/team.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/models/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/models/playoffs/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/models/salaries/index.ts","webpack://cha-hockey/external commonjs \"@nestjs/axios\"","webpack://cha-hockey/external commonjs \"@nestjs/common\"","webpack://cha-hockey/external commonjs \"@nestjs/config\"","webpack://cha-hockey/external commonjs \"@nestjs/core\"","webpack://cha-hockey/external commonjs \"@nestjs/typeorm\"","webpack://cha-hockey/external commonjs \"rxjs\"","webpack://cha-hockey/external commonjs \"tslib\"","webpack://cha-hockey/external commonjs \"typeorm\"","webpack://cha-hockey/external node-commonjs \"path\"","webpack://cha-hockey/webpack/bootstrap","webpack://cha-hockey/./apps/cha-server/src/main.ts"],"sourcesContent":["import { Controller, Get, Render } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get()\n  @Render('index')\n  root() {\n    return { message: 'Hello world!' };\n  }\n}\n","import { ApiCoreModule } from '@api/core';\nimport {\n  Users_V2,\n  Teams_V2,\n  Award_Type_V2,\n  Awards_V2,\n  Draft_Order_V2,\n  Drafts_V2,\n  Conferences_V2,\n  Current_Season_V2,\n  Divisions_V2,\n  Players_V2,\n  Goalie_Ratings_V2,\n  Player_Ratings_V2,\n  Salaries_V2,\n  Schedule_V2,\n  Goalies_Stats_V2,\n  Players_Stats_V2,\n  Team_Stats_V2,\n  Transactions_V2,\n  Waivers_V2,\n} from '@api/entities';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: `.env.${process.env.NODE_ENV}`,\n    }),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      url: process.env.DATABASE_URL,\n      // database: 'defaultdb',\n      // host: process.env.DATABASE_HOST,\n      // username: process.env.DATABASE_USER,\n      // password: process.env.DATABASE_PASSWORD,\n      // port: parseInt(process.env.DATABASE_PORT),\n      synchronize: false,\n      entities: [\n        Users_V2,\n        Teams_V2,\n        Award_Type_V2,\n        Awards_V2,\n        Draft_Order_V2,\n        Drafts_V2,\n        Conferences_V2,\n        Current_Season_V2,\n        Divisions_V2,\n        Players_V2,\n        Goalie_Ratings_V2,\n        Player_Ratings_V2,\n        Salaries_V2,\n        Schedule_V2,\n        Goalies_Stats_V2,\n        Players_Stats_V2,\n        Team_Stats_V2,\n        Transactions_V2,\n        Waivers_V2,\n      ],\n      ssl: {\n        rejectUnauthorized: false,\n      },\n    }),\n    ApiCoreModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Welcome to cha-server!' };\n  }\n\n  getViewName() {\n    return 'index.hbs';\n  }\n}\n","export * from './lib/api-awards.module';","import {\n  Awards_V2,\n  Players_Stats_V2,\n  Goalies_Stats_V2,\n  Team_Stats_V2,\n} from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AwardsController } from './controllers';\nimport { AwardsMiddleware } from './middlewares';\nimport { ApiAwardsService, ApiUserAwardsService } from './services';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Awards_V2,\n      Players_Stats_V2,\n      Goalies_Stats_V2,\n      Team_Stats_V2,\n    ]),\n  ],\n  controllers: [AwardsController],\n  providers: [ApiAwardsService, ApiUserAwardsService],\n})\nexport class ApiAwardsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(AwardsMiddleware).forRoutes('*');\n  }\n}\n","import { Awards_V2 } from '@api/entities';\nimport { UserAwardDto } from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { ApiUserAwardsService } from '../services';\nimport { ApiAwardsService } from '../services/api-awards.service';\n\n@Controller('awards')\nexport class AwardsController {\n  constructor(\n    private awardsService: ApiAwardsService,\n    private userAwardsService: ApiUserAwardsService\n  ) {}\n\n  @Get('/champions')\n  async getChampions(): Promise<Awards_V2[]> {\n    const champions = await this.awardsService.getChampions();\n\n    if (!champions || champions.length < 1) {\n      throw new NotFoundException('Champions Awards not found');\n    }\n    return champions;\n  }\n\n  @Get('/scorers')\n  async getScorerAwards() {\n    const scorers = await this.awardsService.getScorerAwards();\n\n    if (!scorers || scorers.length < 1) {\n      throw new NotFoundException('Scorers Awards not found');\n    }\n    return scorers;\n  }\n\n  @Get('/defense')\n  async getDefenseAwards(): Promise<Awards_V2[]> {\n    const defense = await this.awardsService.getDefenseAwards();\n\n    if (!defense || defense.length < 1) {\n      throw new NotFoundException('Defense Awards not found');\n    }\n    return defense;\n  }\n\n  @Get('/rookies')\n  async getRookieAwards(): Promise<Awards_V2[]> {\n    const rookies = await this.awardsService.getRookieAwards();\n\n    if (!rookies || rookies.length < 1) {\n      throw new NotFoundException('Rookie Awards not found');\n    }\n    return rookies;\n  }\n\n  @Get('/goalies')\n  async getGoalieAwards(): Promise<Awards_V2[]> {\n    const goalies = await this.awardsService.getGoalieAwards();\n\n    if (!goalies || goalies.length < 1) {\n      throw new NotFoundException('Goalie Awards not found');\n    }\n    return goalies;\n  }\n\n  @Get('/gm')\n  async getGmAwards(): Promise<Awards_V2[]> {\n    const gms = await this.awardsService.getGmAwards();\n\n    if (!gms || gms.length < 1) {\n      throw new NotFoundException('GM Awards not found');\n    }\n    return gms;\n  }\n\n  @Get('/season')\n  async getSeasonAwards(): Promise<Awards_V2[]> {\n    const season = await this.awardsService.getSeasonAwards();\n\n    if (!season || season.length < 1) {\n      throw new NotFoundException('Season Awards not found');\n    }\n    return season;\n  }\n\n  @Get('/user/:userId')\n  async getTeamAwardsByUserId(@Param() param): Promise<UserAwardDto[]> {\n    const awardsByUser = await this.userAwardsService.getAwardsByUserId(\n      param.userId\n    );\n\n    if (!awardsByUser || awardsByUser.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return awardsByUser;\n  }\n\n  // @Get('/player/:id')\n  // getPlayerAwardsByPlayerId() {}\n\n  // @Get('/goalie/:id')\n  // getGoalieAwardsByPlayerId() {}\n\n  // @Get('/award-types')\n  // getAwardTypes() {}\n\n  // @Post('/add')\n  // addAwardWinner() {}\n\n  // @Put('/winners/:id')\n  // editAwardWinnerById() {}\n\n  // @Delete('/winners/:id')\n  // deleteAwardWinnerById() {}\n}\n","export * from './awards.controller';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class AwardsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Awards...');\r\n    next();\r\n  }\r\n}\r\n","export * from './awards.middleware';\r\n","import {\r\n  Awards_V2,\r\n  Players_Stats_V2,\r\n  Goalies_Stats_V2,\r\n  Team_Stats_V2,\r\n} from '@api/entities';\r\nimport { AwardTypeEnum } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiAwardsService {\r\n  constructor(\r\n    @InjectRepository(Awards_V2) private repo: Repository<Awards_V2>,\r\n    @InjectRepository(Players_Stats_V2)\r\n    private playerStatsRepo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Goalies_Stats_V2)\r\n    private goalieStatsRepo: Repository<Goalies_Stats_V2>,\r\n    @InjectRepository(Team_Stats_V2)\r\n    private teamStatsRepo: Repository<Team_Stats_V2>\r\n  ) {}\r\n\r\n  selectUserOptions = {\r\n    id: true,\r\n    display_season: true,\r\n    cha_season: true,\r\n    award_type: {\r\n      display_name: true,\r\n      id: true,\r\n    },\r\n    team_id: {\r\n      id: true,\r\n      city: true,\r\n      nickname: true,\r\n      teamlogo: true,\r\n      teamcolor: true,\r\n    },\r\n    users_id: {\r\n      firstname: true,\r\n      lastname: true,\r\n    },\r\n  };\r\n\r\n  selectPlayerOptions = {\r\n    id: true,\r\n    display_season: true,\r\n    cha_season: true,\r\n    award_type: {\r\n      display_name: true,\r\n      id: true,\r\n    },\r\n    team_id: {\r\n      city: true,\r\n      nickname: true,\r\n      teamlogo: true,\r\n      teamcolor: true,\r\n    },\r\n    player_id: {\r\n      id: true,\r\n      nhl_id: true,\r\n      firstname: true,\r\n      lastname: true,\r\n    },\r\n    users_id: {\r\n      firstname: true,\r\n      lastname: true,\r\n    },\r\n  };\r\n\r\n  async getChampions(): Promise<Awards_V2[]> {\r\n    return await this.repo.find({\r\n      select: this.selectUserOptions,\r\n      relations: ['users_id', 'team_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.CHAMPION,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  async getScorerAwards() {\r\n    const scorers = await this.repo.find({\r\n      select: this.selectPlayerOptions,\r\n      relations: ['users_id', 'team_id', 'player_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.SCORER,\r\n        },\r\n      },\r\n    });\r\n\r\n    const scrorersWithStats = await this.setPlayerStats(scorers);\r\n\r\n    return scrorersWithStats;\r\n  }\r\n\r\n  async getDefenseAwards(): Promise<Awards_V2[]> {\r\n    const defense = await this.repo.find({\r\n      select: this.selectPlayerOptions,\r\n      relations: ['users_id', 'team_id', 'player_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.DEFENSE,\r\n        },\r\n      },\r\n    });\r\n\r\n    const defenseWithStats = await this.setPlayerStats(defense);\r\n\r\n    return defenseWithStats;\r\n  }\r\n\r\n  async getRookieAwards(): Promise<Awards_V2[]> {\r\n    const rookies = await this.repo.find({\r\n      select: this.selectPlayerOptions,\r\n      relations: ['users_id', 'team_id', 'player_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.ROOKIE,\r\n        },\r\n      },\r\n    });\r\n\r\n    const rookiesWithStats = await this.setPlayerStats(rookies);\r\n\r\n    return rookiesWithStats;\r\n  }\r\n\r\n  async getGoalieAwards(): Promise<Awards_V2[]> {\r\n    const goalies = await this.repo.find({\r\n      select: this.selectPlayerOptions,\r\n      relations: ['users_id', 'team_id', 'player_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.GOALIE,\r\n        },\r\n      },\r\n    });\r\n\r\n    const goaliesWithStats = await this.setGoalieStats(goalies);\r\n\r\n    return goaliesWithStats;\r\n  }\r\n\r\n  async getGmAwards(): Promise<Awards_V2[]> {\r\n    return await this.repo.find({\r\n      select: this.selectUserOptions,\r\n      relations: ['users_id', 'team_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.GM,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  async getSeasonAwards(): Promise<Awards_V2[]> {\r\n    const seasonAwards = await this.repo.find({\r\n      select: this.selectUserOptions,\r\n      relations: ['users_id', 'team_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.SEASON,\r\n        },\r\n      },\r\n    });\r\n\r\n    const seasonAwardsWithStats = await this.setSeasonStats(seasonAwards);\r\n\r\n    return seasonAwardsWithStats;\r\n  }\r\n\r\n  private async setPlayerStats(array: Awards_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        stats: await this.getPlayerStats(item.player_id.id, item.cha_season),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getPlayerStats(playerId: number, chaSeason: string) {\r\n    return await this.playerStatsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        playing_year: true,\r\n        games_played: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n      },\r\n      where: {\r\n        player_id: { id: playerId },\r\n        playing_year: chaSeason,\r\n        season_type: 'Regular',\r\n      },\r\n    });\r\n  }\r\n\r\n  private async setGoalieStats(array: Awards_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        stats: await this.getGoalieStats(item.player_id.id, item.cha_season),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getGoalieStats(playerId: number, chaSeason: string) {\r\n    return await this.goalieStatsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        player_id: {\r\n          id: true,\r\n          nhl_id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          isgoalie: true,\r\n          is_protected: true,\r\n          isactive: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n        playing_year: true,\r\n        games_played: true,\r\n        wins: true,\r\n        goals_against_avg: true,\r\n        save_pct: true,\r\n      },\r\n      where: {\r\n        player_id: {\r\n          id: playerId,\r\n        },\r\n        playing_year: chaSeason,\r\n        season_type: 'Regular',\r\n      },\r\n    });\r\n  }\r\n\r\n  private async setSeasonStats(array: Awards_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        stats: await this.getSeasonStats(item.team_id.id, item.cha_season),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getSeasonStats(teamId: number, chaSeason: string) {\r\n    return await this.teamStatsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        playing_year: true,\r\n        games_played: true,\r\n        wins: true,\r\n        goals_for: true,\r\n        goals_against: true,\r\n        points: true,\r\n      },\r\n      where: {\r\n        team_id: { id: teamId },\r\n        playing_year: chaSeason,\r\n        season_type: 'Regular',\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Awards_V2 } from '@api/entities';\r\nimport { UserAwardDto } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiUserAwardsService {\r\n  constructor(\r\n    @InjectRepository(Awards_V2) private repo: Repository<Awards_V2>\r\n  ) {}\r\n\r\n  async getAwardsByUserId(userId: number): Promise<UserAwardDto[]> {\r\n    return await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        display_season: true,\r\n        award_type: {\r\n          id: true,\r\n          display_name: true,\r\n        },\r\n        users_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n        },\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n        },\r\n        team_id: {\r\n          id: true,\r\n          teamlogo: true,\r\n          teamcolor: true,\r\n          teamtextcolor: true,\r\n        },\r\n      },\r\n      relations: ['users_id', 'player_id', 'award_type', 'team_id'],\r\n      where: {\r\n        users_id: {\r\n          id: userId,\r\n        },\r\n      },\r\n      order: {\r\n        display_season: 'DESC',\r\n      },\r\n    });\r\n  }\r\n}\r\n","export * from './api-awards.service';\r\nexport * from './api-user-awards.service';","export * from './lib/api-core.module';\n","import { Module } from '@nestjs/common';\n\nimport { ApiAwardsModule } from '@api/awards';\nimport { ApiUsersModule } from '@api/users';\nimport { ApiDraftTableModule } from '@api/draft-table';\nimport { ApiEntryDraftModule } from '@api/entry-draft';\nimport { ApiGoalieStatsModule } from '@api/goalie-stats';\nimport { ApiLeagueModule } from '@api/league';\nimport { ApiNhlModule } from '@api/nhl';\nimport { ApiPlayerInfoModule } from '@api/player-info';\nimport { ApiPlayerRatingsModule } from '@api/player-ratings';\nimport { ApiPlayerStatsModule } from '@api/player-stats';\nimport { ApiSalariesModule } from '@api/salaries';\nimport { ApiScheduleModule } from '@api/schedule';\nimport { ApiTeamStatsModule } from '@api/team-stats';\nimport { ApiTeamsModule } from '@api/teams';\nimport { ApiTransactionsModule } from '@api/transactions';\nimport { ApiWaiversModule } from '@api/waivers';\n\n@Module({\n  imports: [\n    ApiUsersModule,\n    ApiAwardsModule,\n    ApiDraftTableModule,\n    ApiEntryDraftModule,\n    ApiGoalieStatsModule,\n    ApiLeagueModule,\n    ApiNhlModule,\n    ApiPlayerInfoModule,\n    ApiPlayerRatingsModule,\n    ApiPlayerStatsModule,\n    ApiSalariesModule,\n    ApiScheduleModule,\n    ApiTeamStatsModule,\n    ApiTeamsModule,\n    ApiTransactionsModule,\n    ApiWaiversModule,\n  ],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\nexport class ApiCoreModule {}\n","export * from './lib/api-draft-table.module';\n","import { Draft_Order_V2, Team_Stats_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DraftTableController } from './controllers';\nimport { DraftTableMiddleware } from './middlewares';\nimport { ApiDraftTableService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Draft_Order_V2, Team_Stats_V2])],\n  controllers: [DraftTableController],\n  providers: [ApiDraftTableService],\n})\nexport class ApiDraftTableModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(DraftTableMiddleware).forRoutes('*');\n  }\n}\n","import { Draft_Order_V2 } from '@api/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { ApiDraftTableService } from '../services';\n\n@Controller('draft-table')\nexport class DraftTableController {\n  constructor(private draftTableService: ApiDraftTableService) {}\n\n  @Get('/:draft_year/:playing_year')\n  async getDraftTableByYearByStandings(\n    @Param() param: any\n  ): Promise<Draft_Order_V2[]> {\n    const draftTable =\n      await this.draftTableService.getDraftTableByYearByStandings(\n        param.draft_year,\n        param.playing_year\n      );\n\n    if (!draftTable || draftTable.length < 1) {\n      throw new NotFoundException('Draft Table not found');\n    }\n    return draftTable;\n  }\n}\n","export * from './draft-table.controller';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class DraftTableMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Draft Table...');\r\n    next();\r\n  }\r\n}\r\n","export * from './draft-table.middleware';\r\n","import { Draft_Order_V2, Team_Stats_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiDraftTableService {\r\n  constructor(\r\n    @InjectRepository(Draft_Order_V2) private repo: Repository<Draft_Order_V2>,\r\n    @InjectRepository(Team_Stats_V2)\r\n    private teamStatsRepo: Repository<Team_Stats_V2>\r\n  ) {}\r\n\r\n  async getDraftTableByYearByStandings(\r\n    draftYear: string,\r\n    playingYear: string\r\n  ): Promise<Draft_Order_V2[]> {\r\n    const draftTable = await this.repo.find({\r\n      relations: ['team_id'],\r\n      where: {\r\n        draft_year: draftYear,\r\n      },\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          shortname: true,\r\n          city: true,\r\n          nickname: true,\r\n          teamlogo: true,\r\n        },\r\n      },\r\n    });\r\n\r\n    const draftTableWithStandings = await this.setTableStandings(\r\n      draftTable,\r\n      playingYear\r\n    );\r\n\r\n    const draftTableByStandings = this.getDraftByStandings(\r\n      draftTableWithStandings\r\n    );\r\n\r\n    return draftTableByStandings;\r\n  }\r\n\r\n  private async setTableStandings(\r\n    array: Draft_Order_V2[],\r\n    playingYear: string\r\n  ) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        stats: await this.getTeamStats(item.team_id.id, playingYear),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamStats(teamId: number, playingYear: string) {\r\n    return await this.teamStatsRepo.findOne({\r\n      relations: ['team_id'],\r\n      select: {\r\n        id: true,\r\n        wins: true,\r\n        goals_for: true,\r\n        goals_against: true,\r\n        points: true,\r\n      },\r\n      where: {\r\n        team_id: { id: teamId },\r\n        playing_year: playingYear,\r\n        season_type: 'Regular',\r\n      },\r\n    });\r\n  }\r\n\r\n  private getDraftByStandings = (data) => {\r\n    return data\r\n      .sort((a: any, b: any) => {\r\n        if (b.stats.points === a.stats.points) {\r\n          if (b.stats.wins === a.stats.wins) {\r\n            if (\r\n              b.stats.goals_for - b.stats.goals_against ===\r\n              a.stats.goals_for - a.stats.goals_against\r\n            ) {\r\n              return b.stats.goals_for - a.stats.goals_for;\r\n            } else {\r\n              return (\r\n                b.stats.goals_for -\r\n                b.stats.goals_against -\r\n                (a.stats.goals_for - a.stats.goals_against)\r\n              );\r\n            }\r\n          } else {\r\n            return b.stats.wins - a.stats.wins;\r\n          }\r\n        } else {\r\n          return b.stats.points - a.stats.points;\r\n        }\r\n      })\r\n      .reverse();\r\n  };\r\n}\r\n","export * from './api-draft-table.service';\r\n","export * from './lib/entities';\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Award_Type_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  award_type!: string;\r\n\r\n  @Column()\r\n  display_name!: string;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  ManyToOne,\r\n  JoinColumn,\r\n  OneToOne,\r\n} from 'typeorm';\r\nimport { Award_Type_V2 } from './award-type.entity';\r\nimport { Players_Stats_V2 } from './player-stats.entity';\r\nimport { Players_V2 } from './player.entity';\r\nimport { Teams_V2 } from './team.entity';\r\nimport { Users_V2 } from './user.entity';\r\n\r\n@Entity({\r\n  orderBy: {\r\n    display_season: 'DESC',\r\n  },\r\n})\r\nexport class Awards_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  display_season!: string;\r\n\r\n  @OneToOne(() => Players_Stats_V2, (playerStats) => playerStats.playing_year)\r\n  @Column()\r\n  cha_season!: string;\r\n\r\n  @OneToOne(() => Award_Type_V2, (award) => award.id)\r\n  @JoinColumn({ name: 'award_type' })\r\n  award_type!: Award_Type_V2;\r\n\r\n  @ManyToOne(() => Users_V2, (user) => user.id)\r\n  @JoinColumn({ name: 'users_id' })\r\n  users_id!: Users_V2;\r\n\r\n  @ManyToOne(() => Teams_V2, (team) => team.id)\r\n  @JoinColumn({ name: 'team_id' })\r\n  team_id!: Teams_V2;\r\n\r\n  @ManyToOne(() => Players_V2, (player) => player.id)\r\n  @JoinColumn({ name: 'player_id' })\r\n  player_id!: Players_V2;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Conferences_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  conferencename!: string;\r\n\r\n  @Column()\r\n  isactive!: boolean;\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Current_Season_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  current_year!: string;\r\n\r\n  @Column()\r\n  next_year!: string;\r\n\r\n  @Column()\r\n  prev_year!: string;\r\n\r\n  @Column()\r\n  nhl_year!: string;\r\n\r\n  @Column()\r\n  current_season_type!: string;\r\n\r\n  @Column()\r\n  current_day!: number;\r\n\r\n  @Column()\r\n  current_draft_year!: number;\r\n\r\n  @Column()\r\n  next_draft_year!: number;\r\n\r\n  @Column()\r\n  current_cap!: number;\r\n\r\n  @Column()\r\n  next_cap!: number;\r\n\r\n  @Column()\r\n  min_games!: number;\r\n\r\n  @Column()\r\n  offseason!: boolean;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Divisions_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  divisionname!: string;\r\n\r\n  @Column()\r\n  conference_id!: number;\r\n\r\n  @Column()\r\n  isactive!: boolean;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  ManyToOne,\r\n  JoinColumn,\r\n} from 'typeorm';\r\nimport { Teams_V2 } from './team.entity';\r\n\r\n@Entity()\r\nexport class Draft_Order_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @ManyToOne(() => Teams_V2, (team) => team.id)\r\n  @JoinColumn({ name: 'team_id' })\r\n  team_id!: Teams_V2;\r\n\r\n  @Column()\r\n  round_one!: number;\r\n\r\n  @Column()\r\n  round_two!: number;\r\n\r\n  @Column()\r\n  round_three!: number;\r\n\r\n  @Column()\r\n  round_four!: number;\r\n\r\n  @Column()\r\n  round_five!: number;\r\n\r\n  @Column()\r\n  draft_year!: string;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  ManyToOne,\r\n  JoinColumn,\r\n  Relation,\r\n} from 'typeorm';\r\nimport { Players_V2 } from './player.entity';\r\nimport { Teams_V2 } from './team.entity';\r\n\r\n@Entity()\r\nexport class Drafts_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @ManyToOne(() => Players_V2, (player) => player.id)\r\n  @JoinColumn({ name: 'player_id' })\r\n  player_id!: Relation<Players_V2>;\r\n\r\n  @Column()\r\n  draft_year!: string;\r\n\r\n  @Column()\r\n  draft_round!: number;\r\n\r\n  @Column()\r\n  draft_overall!: number;\r\n\r\n  @ManyToOne(() => Teams_V2, (team) => team.id)\r\n  @JoinColumn({ name: 'team_id' })\r\n  team_id!: Teams_V2;\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Goalie_Ratings_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  player_id!: number;\r\n\r\n  @Column()\r\n  games_played!: number;\r\n\r\n  @Column()\r\n  minutes_played!: number;\r\n\r\n  @Column()\r\n  goals_against_avg!: string;\r\n\r\n  @Column()\r\n  wins!: number;\r\n\r\n  @Column()\r\n  loss!: number;\r\n\r\n  @Column()\r\n  ties!: number;\r\n\r\n  @Column()\r\n  en_goals!: number;\r\n\r\n  @Column()\r\n  shutouts!: number;\r\n\r\n  @Column()\r\n  goals_against!: number;\r\n\r\n  @Column()\r\n  saves!: number;\r\n\r\n  @Column()\r\n  shots_for!: number;\r\n\r\n  @Column()\r\n  save_pct!: string;\r\n\r\n  @Column()\r\n  goals!: number;\r\n\r\n  @Column()\r\n  assists!: number;\r\n\r\n  @Column()\r\n  points!: number;\r\n\r\n  @Column()\r\n  penalty_minutes!: number;\r\n\r\n  @Column()\r\n  skating!: string;\r\n\r\n  @Column()\r\n  speed!: string;\r\n\r\n  @Column()\r\n  passing!: string;\r\n\r\n  @Column()\r\n  playing_year!: string;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  OneToOne,\r\n  JoinColumn,\r\n  ManyToOne,\r\n} from 'typeorm';\r\nimport { Players_V2 } from './player.entity';\r\nimport { Teams_V2 } from './team.entity';\r\n\r\n@Entity()\r\nexport class Goalies_Stats_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @ManyToOne(() => Players_V2, (player) => player.id, { eager: true })\r\n  @JoinColumn({ name: 'player_id' })\r\n  player_id!: Players_V2;\r\n\r\n  @Column()\r\n  team_name!: string;\r\n\r\n  @Column()\r\n  games_played!: number;\r\n\r\n  @Column()\r\n  minutes_played!: number;\r\n\r\n  @Column()\r\n  goals_against_avg!: string;\r\n\r\n  @Column()\r\n  wins!: number;\r\n\r\n  @Column()\r\n  loss!: number;\r\n\r\n  @Column()\r\n  ties!: number;\r\n\r\n  @Column()\r\n  en_goals!: number;\r\n\r\n  @Column()\r\n  shutouts!: number;\r\n\r\n  @Column()\r\n  goals_against!: number;\r\n\r\n  @Column()\r\n  saves!: number;\r\n\r\n  @Column()\r\n  shots_for!: number;\r\n\r\n  @Column()\r\n  save_pct!: string;\r\n\r\n  @Column()\r\n  goals!: number;\r\n\r\n  @Column()\r\n  assists!: number;\r\n\r\n  @Column()\r\n  points!: number;\r\n\r\n  @Column()\r\n  penalty_minutes!: number;\r\n\r\n  @Column()\r\n  pass_complete!: number;\r\n\r\n  @Column()\r\n  pass_incomplete!: number;\r\n\r\n  @Column()\r\n  pass_attempts!: number;\r\n\r\n  @Column()\r\n  pass_pct!: string;\r\n\r\n  @Column()\r\n  penalty_minor!: number;\r\n\r\n  @Column()\r\n  penalty_minor_coincidental!: number;\r\n\r\n  @Column()\r\n  penalty_major!: number;\r\n\r\n  @Column()\r\n  penalty_fighting_major!: number;\r\n\r\n  @Column()\r\n  penalty_match!: number;\r\n\r\n  @Column()\r\n  penalty_misconduct!: number;\r\n\r\n  @Column()\r\n  penalty_game_misconduct!: number;\r\n\r\n  @Column()\r\n  penalty_gross_misconduct!: number;\r\n\r\n  @Column()\r\n  playing_year!: string;\r\n\r\n  @Column()\r\n  season_type!: 'Regular' | 'Playoffs';\r\n\r\n  @Column()\r\n  player_status!: 'Veteran' | 'Rookie';\r\n\r\n  @OneToOne(() => Teams_V2, (team) => team.shortname)\r\n  team!: Teams_V2;\r\n}\r\n","export * from './award-type.entity';\r\nexport * from './award.entity';\r\nexport * from './conference.entity';\r\nexport * from './current_season.entity';\r\nexport * from './division.entity';\r\nexport * from './draft-order.entity';\r\nexport * from './draft.entity';\r\nexport * from './goalie-rating.entity';\r\nexport * from './goalie-stats.entity';\r\nexport * from './player-rating.entity';\r\nexport * from './player-stats.entity';\r\nexport * from './player.entity';\r\nexport * from './salary.entity';\r\nexport * from './schedule.entity';\r\nexport * from './team-stats.entity';\r\nexport * from './team.entity';\r\nexport * from './transactions.entity';\r\nexport * from './user.entity';\r\nexport * from './waivers.entity';\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Player_Ratings_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  player_id!: number;\r\n\r\n  @Column()\r\n  games_played!: number;\r\n\r\n  @Column()\r\n  goals!: number;\r\n\r\n  @Column()\r\n  assists!: number;\r\n\r\n  @Column()\r\n  points!: number;\r\n\r\n  @Column()\r\n  plus_minus!: number;\r\n\r\n  @Column()\r\n  penalty_minutes!: number;\r\n\r\n  @Column()\r\n  pp_goals!: number;\r\n\r\n  @Column()\r\n  sh_goals!: number;\r\n\r\n  @Column()\r\n  gw_goals!: number;\r\n\r\n  @Column()\r\n  gt_goals!: number;\r\n\r\n  @Column()\r\n  shots!: number;\r\n\r\n  @Column()\r\n  shooting_pct!: string;\r\n\r\n  @Column()\r\n  game_fatigue!: string;\r\n\r\n  @Column()\r\n  shift_fatigue!: string;\r\n\r\n  @Column()\r\n  c_rate!: string;\r\n\r\n  @Column()\r\n  l_rate!: string;\r\n\r\n  @Column()\r\n  r_rate!: string;\r\n\r\n  @Column()\r\n  ld_rate!: string;\r\n\r\n  @Column()\r\n  rd_rate!: string;\r\n\r\n  @Column()\r\n  shooting!: string;\r\n\r\n  @Column()\r\n  skating!: string;\r\n\r\n  @Column()\r\n  speed!: string;\r\n\r\n  @Column()\r\n  passing!: string;\r\n\r\n  @Column()\r\n  forecheck!: string;\r\n\r\n  @Column()\r\n  physical!: string;\r\n\r\n  @Column()\r\n  intimidation!: string;\r\n\r\n  @Column()\r\n  clear_crease!: string;\r\n\r\n  @Column()\r\n  rock!: string;\r\n\r\n  @Column()\r\n  pk!: string;\r\n\r\n  @Column()\r\n  shot_block!: string;\r\n\r\n  @Column()\r\n  face_off!: string;\r\n\r\n  @Column()\r\n  assist_rating!: string;\r\n\r\n  @Column()\r\n  playing_year!: string;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  OneToOne,\r\n  ManyToOne,\r\n  JoinColumn,\r\n} from 'typeorm';\r\nimport { Awards_V2 } from './award.entity';\r\nimport { Players_V2 } from './player.entity';\r\n\r\n@Entity()\r\nexport class Players_Stats_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @ManyToOne(() => Players_V2, (player) => player.id, { eager: true })\r\n  @JoinColumn({ name: 'player_id' })\r\n  player_id!: Players_V2;\r\n\r\n  @Column()\r\n  team_name!: string;\r\n\r\n  @Column()\r\n  position!: string;\r\n\r\n  @Column()\r\n  games_played!: number;\r\n\r\n  @Column()\r\n  goals!: number;\r\n\r\n  @Column()\r\n  assists!: number;\r\n\r\n  @Column()\r\n  points!: number;\r\n\r\n  @Column()\r\n  plus_minus!: number;\r\n\r\n  @Column()\r\n  penalty_minutes!: number;\r\n\r\n  @Column()\r\n  pp_goals!: number;\r\n\r\n  @Column()\r\n  sh_goals!: number;\r\n\r\n  @Column()\r\n  gw_goals!: number;\r\n\r\n  @Column()\r\n  gt_goals!: number;\r\n\r\n  @Column()\r\n  shots!: number;\r\n\r\n  @Column()\r\n  shooting_pct!: string;\r\n\r\n  @Column()\r\n  minutes_played!: number;\r\n\r\n  @Column()\r\n  minutes_per_game!: string;\r\n\r\n  @Column()\r\n  fo_won!: number;\r\n\r\n  @Column()\r\n  fo_lost!: number;\r\n\r\n  @Column()\r\n  fo_tied!: number;\r\n\r\n  @Column()\r\n  fo_pct!: string;\r\n\r\n  @Column()\r\n  pass_complete!: number;\r\n\r\n  @Column()\r\n  pass_incomplete!: number;\r\n\r\n  @Column()\r\n  pass_attempts!: number;\r\n\r\n  @Column()\r\n  pass_pct!: string;\r\n\r\n  @Column()\r\n  corner_won!: number;\r\n\r\n  @Column()\r\n  corner_lost!: number;\r\n\r\n  @Column()\r\n  corner_total!: number;\r\n\r\n  @Column()\r\n  corner_pct!: string;\r\n\r\n  @Column()\r\n  fights_won!: number;\r\n\r\n  @Column()\r\n  fights_lost!: number;\r\n\r\n  @Column()\r\n  fights_tied!: number;\r\n\r\n  @Column()\r\n  fights_pct!: string;\r\n\r\n  @Column()\r\n  hits!: number;\r\n\r\n  @Column()\r\n  hit_per_game!: string;\r\n\r\n  @Column()\r\n  blocked_shots!: number;\r\n\r\n  @Column()\r\n  blocked_shot_per_game!: string;\r\n\r\n  @Column()\r\n  current_points_streak!: number;\r\n\r\n  @Column()\r\n  longest_points_streak!: number;\r\n\r\n  @Column()\r\n  penalty_minor!: number;\r\n\r\n  @Column()\r\n  penalty_minor_coincidental!: number;\r\n\r\n  @Column()\r\n  penalty_major!: number;\r\n\r\n  @Column()\r\n  penalty_fighting_major!: number;\r\n\r\n  @Column()\r\n  penalty_match!: number;\r\n\r\n  @Column()\r\n  penalty_misconduct!: number;\r\n\r\n  @Column()\r\n  penalty_game_misconduct!: number;\r\n\r\n  @Column()\r\n  penalty_gross_misconduct!: number;\r\n\r\n  @OneToOne(() => Awards_V2, (award) => award.cha_season)\r\n  @Column()\r\n  playing_year!: string;\r\n\r\n  @Column()\r\n  season_type!: 'Regular' | 'Playoffs';\r\n\r\n  @Column()\r\n  player_status!: 'Veteran' | 'Rookie';\r\n\r\n  // @OneToOne(() => Teams_V2, (team) => team.shortname)\r\n  // team!: Teams_V2;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  OneToMany,\r\n  AfterInsert,\r\n  AfterUpdate,\r\n  AfterRemove,\r\n  OneToOne,\r\n} from 'typeorm';\r\nimport { Drafts_V2 } from './draft.entity';\r\nimport { Goalie_Ratings_V2 } from './goalie-rating.entity';\r\nimport { Goalies_Stats_V2 } from './goalie-stats.entity';\r\nimport { Player_Ratings_V2 } from './player-rating.entity';\r\nimport { Players_Stats_V2 } from './player-stats.entity';\r\nimport { Salaries_V2 } from './salary.entity';\r\n\r\n@Entity()\r\nexport class Players_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  firstname!: string;\r\n\r\n  @Column()\r\n  lastname!: string;\r\n\r\n  @Column()\r\n  nhl_id!: string;\r\n\r\n  @Column()\r\n  isactive!: boolean;\r\n\r\n  @Column()\r\n  isgoalie!: boolean;\r\n\r\n  @Column()\r\n  isdefense!: boolean;\r\n\r\n  @Column()\r\n  isforward!: boolean;\r\n\r\n  @Column()\r\n  is_protected!: boolean;\r\n\r\n  @Column()\r\n  primary_position!: string;\r\n\r\n  @Column()\r\n  alt_position!: string;\r\n\r\n  @OneToMany(() => Players_Stats_V2, (playerStats) => playerStats.player_id)\r\n  playerStats!: Players_Stats_V2;\r\n\r\n  @OneToMany(() => Goalies_Stats_V2, (goalieStats) => goalieStats.player_id)\r\n  goalieStats!: Goalies_Stats_V2;\r\n\r\n  @OneToOne(() => Salaries_V2, (salary) => salary.player_id)\r\n  salary!: Salaries_V2;\r\n\r\n  @OneToMany(() => Drafts_V2, (draft) => draft.player_id)\r\n  draft!: Drafts_V2;\r\n\r\n  @OneToMany(() => Goalie_Ratings_V2, (goalieRating) => goalieRating.player_id)\r\n  goalieRating!: Goalie_Ratings_V2;\r\n\r\n  @OneToMany(() => Player_Ratings_V2, (playerRating) => playerRating.player_id)\r\n  playerRating!: Player_Ratings_V2;\r\n\r\n  @AfterInsert()\r\n  logInsert() {\r\n    console.log('Inserted Player with id', this.id);\r\n  }\r\n\r\n  @AfterUpdate()\r\n  logUpdate() {\r\n    console.log('Updated Player with id', this.id);\r\n  }\r\n\r\n  @AfterRemove()\r\n  logRemove() {\r\n    console.log('Removed Player');\r\n  }\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Salaries_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  player_id!: string;\r\n\r\n  @Column()\r\n  season_2020!: string;\r\n\r\n  @Column()\r\n  season_2021!: string;\r\n\r\n  @Column()\r\n  season_2022!: string;\r\n\r\n  @Column()\r\n  season_2023!: string;\r\n\r\n  @Column()\r\n  season_2024!: string;\r\n\r\n  @Column()\r\n  season_2025!: string;\r\n\r\n  @Column()\r\n  season_2026!: string;\r\n\r\n  @Column()\r\n  season_2027!: string;\r\n\r\n  @Column()\r\n  season_2028!: string;\r\n\r\n  @Column()\r\n  season_2029!: string;\r\n\r\n  @Column()\r\n  season_2030!: string;\r\n\r\n  @Column()\r\n  season_2031!: string;\r\n\r\n  @Column()\r\n  season_2032!: string;\r\n\r\n  @Column()\r\n  season_2033!: string;\r\n\r\n  @Column()\r\n  season_2034!: string;\r\n\r\n  @Column()\r\n  season_2035!: string;\r\n\r\n  @Column()\r\n  season_2036!: string;\r\n\r\n  @Column()\r\n  season_2037!: string;\r\n\r\n  @Column()\r\n  season_2038!: string;\r\n\r\n  @Column()\r\n  season_2039!: string;\r\n\r\n  @Column()\r\n  season_2040!: string;\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Schedule_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  game_day!: number;\r\n\r\n  @Column()\r\n  vis_team_id!: number;\r\n\r\n  @Column()\r\n  vis_team_game_number!: number;\r\n\r\n  @Column()\r\n  vis_team_score!: number;\r\n\r\n  @Column()\r\n  home_team_id!: number;\r\n\r\n  @Column()\r\n  home_team_game_number!: number;\r\n\r\n  @Column()\r\n  home_team_score!: number;\r\n\r\n  @Column()\r\n  playing_year!: string;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  ManyToOne,\r\n  JoinColumn,\r\n} from 'typeorm';\r\nimport { Teams_V2 } from './team.entity';\r\n\r\n@Entity()\r\nexport class Team_Stats_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @ManyToOne(() => Teams_V2, (team) => team.id)\r\n  @JoinColumn({ name: 'team_id' })\r\n  team_id!: Teams_V2;\r\n\r\n  @Column()\r\n  games_played!: number;\r\n\r\n  @Column()\r\n  wins!: number;\r\n\r\n  @Column()\r\n  loss!: number;\r\n\r\n  @Column()\r\n  ties!: number;\r\n\r\n  @Column()\r\n  points!: number;\r\n\r\n  @Column()\r\n  goals_for!: number;\r\n\r\n  @Column()\r\n  goals_against!: number;\r\n\r\n  @Column()\r\n  pp_attempts!: number;\r\n\r\n  @Column()\r\n  pp_goals!: number;\r\n\r\n  @Column()\r\n  pp_min!: number;\r\n\r\n  @Column()\r\n  pk_attempts!: number;\r\n\r\n  @Column()\r\n  pk_goals!: number;\r\n\r\n  @Column()\r\n  pk_min!: number;\r\n\r\n  @Column()\r\n  penalty_minutes!: number;\r\n\r\n  @Column()\r\n  sh_goals!: number;\r\n\r\n  @Column()\r\n  home_wins!: number;\r\n\r\n  @Column()\r\n  home_loss!: number;\r\n\r\n  @Column()\r\n  home_ties!: number;\r\n\r\n  @Column()\r\n  road_wins!: number;\r\n\r\n  @Column()\r\n  road_loss!: number;\r\n\r\n  @Column()\r\n  road_ties!: number;\r\n\r\n  @Column()\r\n  div_win!: number;\r\n\r\n  @Column()\r\n  div_loss!: number;\r\n\r\n  @Column()\r\n  div_tie!: number;\r\n\r\n  @Column()\r\n  ot_win!: number;\r\n\r\n  @Column()\r\n  ot_loss!: number;\r\n\r\n  @Column()\r\n  lead_after_two_wins!: number;\r\n\r\n  @Column()\r\n  lead_after_two_loss!: number;\r\n\r\n  @Column()\r\n  lead_after_two_ties!: number;\r\n\r\n  @Column()\r\n  trail_after_two_wins!: number;\r\n\r\n  @Column()\r\n  trail_after_two_loss!: number;\r\n\r\n  @Column()\r\n  trail_after_two_ties!: number;\r\n\r\n  @Column()\r\n  even_after_two_wins!: number;\r\n\r\n  @Column()\r\n  even_after_two_loss!: number;\r\n\r\n  @Column()\r\n  even_after_two_ties!: number;\r\n\r\n  @Column()\r\n  long_win_streak!: number;\r\n\r\n  @Column()\r\n  shots_for!: number;\r\n\r\n  @Column()\r\n  shots_against!: number;\r\n\r\n  @Column()\r\n  face_off_won!: number;\r\n\r\n  @Column()\r\n  face_off_lost!: number;\r\n\r\n  @Column()\r\n  corner_won!: number;\r\n\r\n  @Column()\r\n  corner_lost!: number;\r\n\r\n  @Column()\r\n  pass_complete!: number;\r\n\r\n  @Column()\r\n  pass_incomplete!: number;\r\n\r\n  @Column()\r\n  empty_net!: number;\r\n\r\n  @Column()\r\n  shut_outs!: number;\r\n\r\n  @Column()\r\n  playing_year!: string;\r\n\r\n  @Column()\r\n  season_type!: 'Regular' | 'Playoffs';\r\n}\r\n","import {\r\n  Entity,\r\n  Column,\r\n  PrimaryGeneratedColumn,\r\n  AfterInsert,\r\n  AfterRemove,\r\n  AfterUpdate,\r\n  JoinColumn,\r\n  OneToOne,\r\n} from 'typeorm';\r\nimport { Divisions_V2 } from './division.entity';\r\n\r\n@Entity()\r\nexport class Teams_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  shortname!: string;\r\n\r\n  @Column()\r\n  city!: string;\r\n\r\n  @Column()\r\n  nickname!: string;\r\n\r\n  @Column()\r\n  isactive!: boolean;\r\n\r\n  @Column()\r\n  users_id!: number;\r\n\r\n  @Column()\r\n  teamlogo!: string;\r\n\r\n  @Column()\r\n  teamaltlogo!: string;\r\n\r\n  @Column()\r\n  teamcolor!: string;\r\n\r\n  @Column()\r\n  teamtextcolor!: string;\r\n\r\n  @OneToOne(() => Divisions_V2, (division) => division.id, { eager: true })\r\n  @JoinColumn({ name: 'divisions_id' })\r\n  divisions_id!: Divisions_V2;\r\n\r\n  @AfterInsert()\r\n  logInsert() {\r\n    console.log('Inserted Team with id', this.id);\r\n  }\r\n\r\n  @AfterUpdate()\r\n  logUpdate() {\r\n    console.log('Updated Team with id', this.id);\r\n  }\r\n\r\n  @AfterRemove()\r\n  logRemove() {\r\n    console.log('Removed Team');\r\n  }\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Transactions_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  transaction_date!: Date;\r\n\r\n  @Column()\r\n  team_one_id!: number;\r\n\r\n  @Column('text', { array: true })\r\n  team_one_picks!: string[];\r\n\r\n  @Column('int', { array: true })\r\n  team_one_players!: number[];\r\n\r\n  @Column()\r\n  team_two_id!: number;\r\n\r\n  @Column('text', { array: true })\r\n  team_two_picks!: string[];\r\n\r\n  @Column('int', { array: true })\r\n  team_two_players!: number[];\r\n}\r\n","import {\r\n  Entity,\r\n  Column,\r\n  PrimaryGeneratedColumn,\r\n  AfterInsert,\r\n  AfterRemove,\r\n  AfterUpdate,\r\n} from 'typeorm';\r\n\r\n@Entity()\r\nexport class Users_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  firstname!: string;\r\n\r\n  @Column()\r\n  lastname!: string;\r\n\r\n  @Column()\r\n  email!: string;\r\n\r\n  @Column()\r\n  isadmin!: boolean;\r\n\r\n  @Column()\r\n  isactive!: boolean;\r\n\r\n  @AfterInsert()\r\n  logInsert() {\r\n    console.log('Inserted User with id', this.id);\r\n  }\r\n\r\n  @AfterUpdate()\r\n  logUpdate() {\r\n    console.log('Updated User with id', this.id);\r\n  }\r\n\r\n  @AfterRemove()\r\n  logRemove() {\r\n    console.log('Removed User');\r\n  }\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column, OneToOne } from 'typeorm';\r\nimport { Teams_V2 } from './team.entity';\r\n\r\n@Entity()\r\nexport class Waivers_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  team_id!: number;\r\n\r\n  @Column()\r\n  priority_number!: number;\r\n\r\n  @OneToOne(() => Teams_V2, (team) => team.id)\r\n  team!: Teams_V2;\r\n}\r\n","export * from './lib/api-entry-draft.module';\n","import { Drafts_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EntryDraftController } from './controllers';\nimport { EntryDraftMiddleware } from './middlewares';\nimport { ApiEntryDraftService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Drafts_V2])],\n  controllers: [EntryDraftController],\n  providers: [ApiEntryDraftService],\n})\nexport class ApiEntryDraftModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(EntryDraftMiddleware).forRoutes('*');\n  }\n}\n","import { Drafts_V2 } from '@api/entities';\nimport { Controller, Get, NotFoundException } from '@nestjs/common';\nimport { ApiEntryDraftService } from '../services';\n\n@Controller('entry-draft')\nexport class EntryDraftController {\n  constructor(private draftService: ApiEntryDraftService) {}\n\n  @Get('/ordered')\n  async getAll(): Promise<Drafts_V2[]> {\n    const entries = await this.draftService.getAll();\n\n    if (!entries || entries.length < 1) {\n      throw new NotFoundException('Entry Draft Table not found');\n    }\n    return entries;\n  }\n}\n","export * from './entry-draft.controller';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class EntryDraftMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Entry Draft Table...');\r\n    next();\r\n  }\r\n}\r\n","export * from './entry-draft.middleware';\r\n","import { Drafts_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiEntryDraftService {\r\n  constructor(\r\n    @InjectRepository(Drafts_V2) private repo: Repository<Drafts_V2>\r\n  ) {}\r\n\r\n  async getAll(): Promise<Drafts_V2[]> {\r\n    const draftTable = await this.repo.find({\r\n      relations: ['team_id', 'player_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          nickname: true,\r\n          teamlogo: true,\r\n        },\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n        },\r\n      },\r\n      order: {\r\n        draft_year: 'DESC',\r\n        draft_round: 'ASC',\r\n        draft_overall: 'ASC',\r\n      },\r\n    });\r\n\r\n    return draftTable;\r\n  }\r\n}\r\n","export * from './api-entry-draft.service';\r\n","export * from './lib/api-goalie-stats.module';","import { Goalies_Stats_V2, Teams_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { GoalieStatsController } from './controllers';\nimport { GoalieStatsMiddleware } from './middlewares';\nimport {\n  ApiGoalieStatsService,\n  ApiGoalieStatsLeadersService,\n  ApiGoalieAllTimeStatsService,\n  ApiUserGoalieStatsService,\n} from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Goalies_Stats_V2, Teams_V2])],\n  controllers: [GoalieStatsController],\n  providers: [\n    ApiGoalieStatsService,\n    ApiGoalieStatsLeadersService,\n    ApiGoalieAllTimeStatsService,\n    ApiUserGoalieStatsService,\n  ],\n})\nexport class ApiGoalieStatsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(GoalieStatsMiddleware).forRoutes('*');\n  }\n}\n","import {\n  StatGoalieLeadersDto,\n  StatGoaliesHistoryDto,\n  StatUserGoaliesHistoryDto,\n} from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport {\n  ApiGoalieAllTimeStatsService,\n  ApiGoalieStatsLeadersService,\n  ApiGoalieStatsService,\n  ApiUserGoalieStatsService,\n} from '../services';\n\n@Controller('goalie-stats')\nexport class GoalieStatsController {\n  constructor(\n    private goalieStatsLeadersService: ApiGoalieStatsLeadersService,\n    private goalieStatsService: ApiGoalieStatsService,\n    private goalieAllTimeStatsService: ApiGoalieAllTimeStatsService,\n    private userGoalieStatsService: ApiUserGoalieStatsService\n  ) {}\n\n  @Get('/leaders/:season/:seasonType/:minGames')\n  async getGoalieStatsLeaders(@Param() param): Promise<StatGoalieLeadersDto> {\n    const stats = await this.goalieStatsLeadersService.getGoalieStatsLeaders(\n      param.season,\n      param.seasonType,\n      param.minGames\n    );\n\n    if (!stats) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/all/:season/:seasonType')\n  async getAllGoalieStats(@Param() param): Promise<any[]> {\n    const stats = await this.goalieStatsService.getAllGoalieStats(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/current/:season/:seasonType/:playerId')\n  async getGoalieStatsByPlayerId(@Param() param): Promise<any[]> {\n    const stats = await this.goalieStatsService.getGoalieStatsByPlayerId(\n      param.season,\n      param.seasonType,\n      param.playerId\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/season/:seasonType')\n  async getAllTimePlayerStatsBySeasonByType(\n    @Param() param\n  ): Promise<StatGoaliesHistoryDto[]> {\n    const stats =\n      await this.goalieAllTimeStatsService.getAllTimeGoalieStatsBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Goalie Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/all-time/:seasonType')\n  async getAllTimeGoalieStatsSummedBySeasonByType(\n    @Param() param\n  ): Promise<StatGoaliesHistoryDto[]> {\n    const stats =\n      await this.goalieAllTimeStatsService.getAllTimeGoalieStatsSummedBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Goalie Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/user/:userId/history/:seasonType')\n  async getTeamGaoliesStatsBySeasonType(\n    @Param() param\n  ): Promise<StatUserGoaliesHistoryDto[]> {\n    const record =\n      await this.userGoalieStatsService.getUserGoaliesStatsBySeasonType(\n        param.userId,\n        param.seasonType\n      );\n\n    if (!record) {\n      throw new NotFoundException('Team Goalies Stats not found');\n    }\n    return record;\n  }\n\n  @Get('/user/:userId/history/all/:seasonType')\n  async getTeamGoaliesStatsAllTimeBySeasonType(\n    @Param() param\n  ): Promise<StatUserGoaliesHistoryDto[]> {\n    const record =\n      await this.userGoalieStatsService.getUserGoaliesStatsAllTimeBySeasonType(\n        param.userId,\n        param.seasonType\n      );\n\n    if (!record) {\n      throw new NotFoundException('Team Goalies Stats not found');\n    }\n    return record;\n  }\n}\n","export * from './goalie-stats.controller';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class GoalieStatsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Goalie Stats...');\r\n    next();\r\n  }\r\n}\r\n","export * from './goalie-stats.middleware';\r\n","import { Goalies_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport { StatGoaliesHistoryDto } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { DataSource, MoreThan, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiGoalieAllTimeStatsService {\r\n  constructor(\r\n    @InjectRepository(Goalies_Stats_V2)\r\n    private repo: Repository<Goalies_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>,\r\n    @InjectDataSource() private dataSource: DataSource\r\n  ) {}\r\n\r\n  async getAllTimeGoalieStatsBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatGoaliesHistoryDto[]> {\r\n    const allStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        playing_year: true,\r\n        season_type: true,\r\n        games_played: true,\r\n        minutes_played: true,\r\n        goals_against_avg: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        shutouts: true,\r\n        goals_against: true,\r\n        saves: true,\r\n        shots_for: true,\r\n        save_pct: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        penalty_minutes: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        season_type: seasonType,\r\n        games_played: MoreThan(0),\r\n      },\r\n      order: {\r\n        wins: 'DESC',\r\n      },\r\n    });\r\n\r\n    const allStatsWithTeamInfo = await this.setTeamInfo(allStats);\r\n\r\n    const allStatsWithTeamInfoConverted = await this.convertStats(\r\n      allStatsWithTeamInfo,\r\n      false\r\n    );\r\n\r\n    return allStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  async getAllTimeGoalieStatsSummedBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatGoaliesHistoryDto[]> {\r\n    const result = await this.dataSource.query(\r\n      `select\r\n      b.firstname as firstname,\r\n      b.lastname as lastname,\r\n      b.isgoalie as isgoalie,\r\n      b.nhl_id as nhl_id,\r\n      a.player_id as player_id,\r\n      a.season_type as season_type, \r\n      sum(games_played) as games_played, \r\n      sum(wins) as wins, \r\n      sum(loss) as loss, \r\n      sum(ties) as ties, \r\n      sum(minutes_played) as minutes_played, \r\n      sum(en_goals) as en_goals, \r\n      sum(shutouts) as shutouts, \r\n      sum(goals_against) as goals_against, \r\n      sum(saves) as saves, \r\n      sum(shots_for) as shots_for, \r\n      sum(goals) as goals, \r\n      sum(assists) as assists, \r\n      sum(points) as points, \r\n      sum(penalty_minutes) as penalty_minutes\r\n      from\r\n      goalies_stats_v2 as a\r\n      left join players_v2 as b\r\n      on b.id = a.player_id\r\n      where (a.player_id = b.id\r\n      and\r\n      a.games_played > '0'\r\n      and\r\n      a.season_type = '${seasonType}')\r\n      group by b.firstname, b.lastname, b.isgoalie, b.nhl_id, a.player_id, a.season_type\r\n      order by wins DESC`\r\n    );\r\n\r\n    const allTimeStatsConverted = await this.convertStats(result, true);\r\n\r\n    return allTimeStatsConverted;\r\n  }\r\n\r\n  private async setTeamInfo(array: Goalies_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async convertStats(array: any[], raw: boolean) {\r\n    return await Promise.all(\r\n      array.map((stat: any) => ({\r\n        playing_year: stat.playing_year,\r\n        season_type: stat.season_type,\r\n        teamInfo: !raw ? stat['teamInfo'] : null,\r\n        player_id: !raw\r\n          ? stat.player_id\r\n          : {\r\n              id: stat['player_id'],\r\n              firstname: stat['firstname'],\r\n              lastname: stat['lastname'],\r\n              nhl_id: stat['nhl_id'],\r\n              isactive: null,\r\n              isgoalie: stat['isgoalie'],\r\n              isdefense: null,\r\n              isforward: null,\r\n              is_protected: null,\r\n            },\r\n        games_played: Number(stat.games_played),\r\n        minutes_played: Number(stat.minutes_played),\r\n        goals_against_avg: !raw\r\n          ? Number(Number(stat.goals_against_avg).toFixed(2))\r\n          : Number(\r\n              (\r\n                (Number(stat.goals_against) * 60) /\r\n                Number(stat.minutes_played)\r\n              ).toFixed(2)\r\n            ),\r\n        wins: Number(stat.wins),\r\n        loss: Number(stat.loss),\r\n        ties: Number(stat.ties),\r\n        shutouts: Number(stat.shutouts),\r\n        goals_against: Number(stat.goals_against),\r\n        saves: Number(stat.saves),\r\n        shots_for: Number(stat.shots_for),\r\n        save_pct: !raw\r\n          ? Number(Number(stat.save_pct).toFixed(3))\r\n          : Number((Number(stat.saves) / Number(stat.shots_for)).toFixed(3)),\r\n        goals: Number(stat.goals),\r\n        assists: Number(stat.assists),\r\n        points: Number(stat.points),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { Goalies_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport {\r\n  StatGoalieLeaderDto,\r\n  StatGoalieLeadersDto,\r\n} from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, MoreThan } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiGoalieStatsLeadersService {\r\n  constructor(\r\n    @InjectRepository(Goalies_Stats_V2)\r\n    private repo: Repository<Goalies_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getGoalieStatsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    minGames: string\r\n  ): Promise<StatGoalieLeadersDto> {\r\n    const shotsFacedLeaders = await this.getShotsFacedLeaders(\r\n      season,\r\n      seasonType,\r\n      minGames\r\n    );\r\n    const gaaLeaders = await this.getGaaLeaders(season, seasonType, minGames);\r\n    const savePctLeaders = await this.getSavePctLeaders(\r\n      season,\r\n      seasonType,\r\n      minGames\r\n    );\r\n    const shutoutsLeaders = await this.getShutoutLeaders(season, seasonType);\r\n    const winsLeaders = await this.getWinsLeaders(season, seasonType);\r\n\r\n    return {\r\n      shotsFaced: shotsFacedLeaders as unknown as StatGoalieLeaderDto[],\r\n      gaa: gaaLeaders as unknown as StatGoalieLeaderDto[],\r\n      savePct: savePctLeaders as unknown as StatGoalieLeaderDto[],\r\n      shutouts: shutoutsLeaders as unknown as StatGoalieLeaderDto[],\r\n      wins: winsLeaders as unknown as StatGoalieLeaderDto[],\r\n    };\r\n  }\r\n\r\n  private async getShotsFacedLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    minGames: string\r\n  ) {\r\n    const shotsFacedLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        shots_for: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        games_played: MoreThan(Number(minGames)),\r\n      },\r\n      order: {\r\n        shots_for: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const shotsFacedLeadersWithTeamInfo = await this.setTeamInfo(\r\n      shotsFacedLeaders\r\n    );\r\n\r\n    return shotsFacedLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getGaaLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    minGames: string\r\n  ) {\r\n    const gaaLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        goals_against_avg: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        games_played: MoreThan(Number(minGames)),\r\n      },\r\n      order: {\r\n        goals_against_avg: 'ASC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const gaaLeadersWithTeamInfo = await this.setTeamInfo(gaaLeaders);\r\n\r\n    return gaaLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getSavePctLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    minGames: string\r\n  ) {\r\n    const savePctLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        save_pct: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        games_played: MoreThan(Number(minGames)),\r\n      },\r\n      order: {\r\n        save_pct: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const savePctLeadersWithTeamInfo = await this.setTeamInfo(savePctLeaders);\r\n\r\n    return savePctLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getShutoutLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const shutoutLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        shutouts: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        shutouts: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const shutoutLeadersWithTeamInfo = await this.setTeamInfo(shutoutLeaders);\r\n\r\n    return shutoutLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getWinsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const winLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        wins: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        wins: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const winLeadersWithTeamInfo = await this.setTeamInfo(winLeaders);\r\n\r\n    return winLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async setTeamInfo(array: Goalies_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Goalies_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiGoalieStatsService {\r\n  constructor(\r\n    @InjectRepository(Goalies_Stats_V2)\r\n    private repo: Repository<Goalies_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getAllGoalieStats(season: string, seasonType: 'Regular' | 'Playoffs') {\r\n    const allGoalieStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        games_played: true,\r\n        minutes_played: true,\r\n        goals_against_avg: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        en_goals: true,\r\n        shutouts: true,\r\n        goals_against: true,\r\n        saves: true,\r\n        shots_for: true,\r\n        save_pct: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        penalty_minutes: true,\r\n        pass_pct: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        wins: 'DESC',\r\n      },\r\n    });\r\n\r\n    const goalieStatsWithTeamInfo = await this.setTeamInfo(allGoalieStats);\r\n\r\n    const goalieStatsWithTeamInfoConverted = await this.convertStats(\r\n      goalieStatsWithTeamInfo\r\n    );\r\n\r\n    return goalieStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  async getGoalieStatsByPlayerId(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    playerId: number\r\n  ) {\r\n    const allGoalieStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        games_played: true,\r\n        minutes_played: true,\r\n        goals_against_avg: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        en_goals: true,\r\n        shutouts: true,\r\n        goals_against: true,\r\n        saves: true,\r\n        shots_for: true,\r\n        save_pct: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        penalty_minutes: true,\r\n        pass_pct: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        player_id: {\r\n          id: playerId,\r\n        },\r\n      },\r\n      order: {\r\n        wins: 'DESC',\r\n      },\r\n    });\r\n\r\n    const goalieStatsWithTeamInfo = await this.setTeamInfo(allGoalieStats);\r\n\r\n    const goalieStatsWithTeamInfoConverted = await this.convertStats(\r\n      goalieStatsWithTeamInfo\r\n    );\r\n\r\n    return goalieStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  private async setTeamInfo(array: Goalies_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async convertStats(array: Goalies_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map((stat: Goalies_Stats_V2) => ({\r\n        ...stat,\r\n        games_played: Number(stat.games_played),\r\n        minutes_played: Number(stat.minutes_played),\r\n        goals_against_avg: Number(Number(stat.goals_against_avg).toFixed(2)),\r\n        wins: Number(stat.wins),\r\n        loss: Number(stat.loss),\r\n        ties: Number(stat.ties),\r\n        en_goals: Number(stat.en_goals),\r\n        shutouts: Number(stat.shutouts),\r\n        goals_against: Number(stat.goals_against),\r\n        saves: Number(stat.saves),\r\n        shots_for: Number(stat.shots_for),\r\n        save_pct: Number(Number(stat.save_pct).toFixed(3)),\r\n        goals: Number(stat.goals),\r\n        assists: Number(stat.assists),\r\n        points: Number(stat.points),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        pass_pct: Number(stat.pass_pct),\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { Goalies_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { DataSource, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiUserGoalieStatsService {\r\n  constructor(\r\n    @InjectRepository(Goalies_Stats_V2)\r\n    private repo: Repository<Goalies_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>,\r\n    @InjectDataSource() private dataSource: DataSource\r\n  ) {}\r\n\r\n  async getUserGoaliesStatsBySeasonType(\r\n    userId: number,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const userTeams = await this.teamInfoRepo.findBy({ users_id: userId });\r\n\r\n    const userTeamsWithGoalieStats = await this.setGoalieStats(\r\n      userTeams,\r\n      seasonType\r\n    );\r\n\r\n    const userTeamsWithGoaliesStatsConverted =\r\n      await this.setConvertedGoaliesStats(userTeamsWithGoalieStats, false);\r\n\r\n    return userTeamsWithGoaliesStatsConverted;\r\n  }\r\n\r\n  async getUserGoaliesStatsAllTimeBySeasonType(\r\n    userId: number,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const userTeams = await this.teamInfoRepo.findBy({ users_id: userId });\r\n\r\n    const userTeamsWithGoalieStats = await this.setGoalieAllTimeStats(\r\n      userTeams,\r\n      seasonType\r\n    );\r\n\r\n    const userTeamsWithGoaliesStatsConverted =\r\n      await this.setConvertedGoaliesStats(userTeamsWithGoalieStats, true);\r\n\r\n    return userTeamsWithGoaliesStatsConverted;\r\n  }\r\n\r\n  private async setGoalieStats(\r\n    array: Teams_V2[],\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        goalieStats: await this.getGoalieStats(item.shortname, seasonType),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async setGoalieAllTimeStats(\r\n    array: Teams_V2[],\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        goalieStats: await this.getGoalieAllTimeStats(\r\n          item.shortname,\r\n          seasonType\r\n        ),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getGoalieAllTimeStats(\r\n    teamShortName: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await this.dataSource.query(\r\n      `select\r\n      b.firstname as firstname,\r\n      b.lastname as lastname,\r\n      b.isgoalie as isgoalie,\r\n      b.nhl_id as nhl_id,\r\n      a.player_id as player_id,\r\n      a.season_type as season_type, \r\n      sum(games_played) as games_played, \r\n      sum(wins) as wins, \r\n      sum(loss) as loss, \r\n      sum(ties) as ties, \r\n      sum(minutes_played) as minutes_played, \r\n      sum(en_goals) as en_goals, \r\n      sum(shutouts) as shutouts, \r\n      sum(goals_against) as goals_against, \r\n      sum(saves) as saves, \r\n      sum(shots_for) as shots_for, \r\n      sum(goals) as goals, \r\n      sum(assists) as assists, \r\n      sum(points) as points, \r\n      sum(penalty_minutes) as penalty_minutes\r\n      from\r\n      goalies_stats_v2 as a\r\n      left join players_v2 as b\r\n      on b.id = a.player_id\r\n      where (a.player_id = b.id\r\n      and\r\n      a.games_played > '0'\r\n      and\r\n      a.season_type = '${seasonType}'\r\n      and a.team_name = '${teamShortName}')\r\n      group by b.firstname, b.lastname, b.isgoalie, b.nhl_id, a.player_id, a.season_type\r\n      order by wins DESC`\r\n    );\r\n  }\r\n\r\n  private async getGoalieStats(\r\n    teamShortName: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        games_played: true,\r\n        minutes_played: true,\r\n        goals_against_avg: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        en_goals: true,\r\n        shutouts: true,\r\n        goals_against: true,\r\n        saves: true,\r\n        shots_for: true,\r\n        save_pct: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        penalty_minutes: true,\r\n        pass_pct: true,\r\n        team_name: true,\r\n        playing_year: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        team_name: teamShortName,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        wins: 'DESC',\r\n      },\r\n    });\r\n  }\r\n\r\n  private async setConvertedGoaliesStats(array: any[], raw: boolean) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        goalieStats: await this.convertStats(item.goalieStats, raw, item),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async convertStats(\r\n    array: Goalies_Stats_V2[],\r\n    raw: boolean,\r\n    teamInfo: any\r\n  ) {\r\n    return await Promise.all(\r\n      array.map((stat: Goalies_Stats_V2) => ({\r\n        playing_year: stat.playing_year,\r\n        season_type: stat.season_type,\r\n        teamInfo: !raw\r\n          ? {\r\n              id: teamInfo.id,\r\n              city: teamInfo.city,\r\n              nickname: teamInfo.nickname,\r\n              teamlogo: teamInfo.teamlogo,\r\n            }\r\n          : null,\r\n        player_id: !raw\r\n          ? stat.player_id\r\n          : {\r\n              id: stat['player_id'],\r\n              firstname: stat['firstname'],\r\n              lastname: stat['lastname'],\r\n              nhl_id: stat['nhl_id'],\r\n              isactive: null,\r\n              isgoalie: stat['isgoalie'],\r\n              isdefense: null,\r\n              isforward: null,\r\n              is_protected: null,\r\n            },\r\n        games_played: Number(stat.games_played),\r\n        minutes_played: Number(stat.minutes_played),\r\n        goals_against_avg: !raw\r\n          ? Number(Number(stat.goals_against_avg).toFixed(2))\r\n          : Number(\r\n              (\r\n                (Number(stat.goals_against) * 60) /\r\n                Number(stat.minutes_played)\r\n              ).toFixed(2)\r\n            ),\r\n        wins: Number(stat.wins),\r\n        loss: Number(stat.loss),\r\n        ties: Number(stat.ties),\r\n        shutouts: Number(stat.shutouts),\r\n        goals_against: Number(stat.goals_against),\r\n        saves: Number(stat.saves),\r\n        shots_for: Number(stat.shots_for),\r\n        save_pct: !raw\r\n          ? Number(Number(stat.save_pct).toFixed(3))\r\n          : Number((Number(stat.saves) / Number(stat.shots_for)).toFixed(3)),\r\n        goals: Number(stat.goals),\r\n        assists: Number(stat.assists),\r\n        points: Number(stat.points),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n      }))\r\n    );\r\n  }\r\n}\r\n","export * from './api-goalie-stats-leaders.service';\r\nexport * from './api-goalie-stats.service';\r\nexport * from './api-goalie-all-time-stats.service';\r\nexport * from './api-user-goalie-stats.service';\r\n","export * from './lib/api-league.module';\n","import { Current_Season_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LeagueController } from './controllers';\nimport { LeagueMiddleware } from './middlewares/league.middleware';\nimport { LeagueService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Current_Season_V2])],\n  controllers: [LeagueController],\n  providers: [LeagueService],\n})\nexport class ApiLeagueModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LeagueMiddleware).forRoutes('*');\n  }\n}\n","export * from './league.controller';\r\n","import { LeagueDataDto } from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException } from '@nestjs/common';\nimport { LeagueService } from '../services';\n\n@Controller('league')\nexport class LeagueController {\n  constructor(private leagueService: LeagueService) {}\n\n  @Get('/current-data')\n  async getCurrentData(): Promise<LeagueDataDto> {\n    const data = await this.leagueService.getCurrentLeagueData();\n\n    if (!data) {\n      throw new NotFoundException('League Data not found');\n    }\n    return data;\n  }\n}\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class LeagueMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request League...');\r\n    next();\r\n  }\r\n}","export * from './league.service';\r\n","import { Current_Season_V2 } from '@api/entities';\r\nimport { LeagueDataDto } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class LeagueService {\r\n  constructor(\r\n    @InjectRepository(Current_Season_V2)\r\n    private repo: Repository<Current_Season_V2>\r\n  ) {}\r\n\r\n  async getCurrentLeagueData(): Promise<LeagueDataDto> {\r\n    return (await this.repo.find()) as unknown as LeagueDataDto;\r\n  }\r\n}\r\n","export * from './lib/api-nhl.module';\n","import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { HttpModule } from '@nestjs/axios';\nimport { NhlController } from './controllers';\nimport { NhlMiddleware } from './middlewares';\nimport { ApiNhlService } from './services';\n\n@Module({\n  imports: [HttpModule],\n  controllers: [NhlController],\n  providers: [ApiNhlService],\n})\nexport class ApiNhlModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(NhlMiddleware).forRoutes('*');\n  }\n}\n","export * from './nhl.controller';\r\n","import { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { ApiNhlService } from '../services';\n\n@Controller('nhl')\nexport class NhlController {\n  constructor(private nhlService: ApiNhlService) {}\n\n  @Get('/nhl-leaders/:season/:playerType/:statType')\n  async getNhlLeaders(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlLeaders(\n      param.playerType,\n      param.statType,\n      param.season\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Leaders not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/nhl-leaders/:season/:playerType/:statType/:minGames')\n  async getNhlGoalieLeaders(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlGoalieLeaders(\n      param.playerType,\n      param.statType,\n      param.season,\n      param.minGames\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Leaders not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/nhl-rookie-leaders/:season/:playerType/:statType')\n  async getNhlRookieLeaders(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlRookieLeaders(\n      param.playerType,\n      param.statType,\n      param.season\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Leaders not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/nhl-defense-leaders/:season/:playerType/:statType')\n  async getNhlDefenseLeaders(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlDefenseLeaders(\n      param.playerType,\n      param.statType,\n      param.season\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Leaders not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/nhl-summary/sportsnet/:season/:seasonType')\n  async getNhlSummaryFromSportsnet(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlSummaryFromSportsnet(\n      param.season,\n      param.seasonType\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Summary not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/nhl-summary/rookies/:season/:player/:statsType/:sort/:start/:pageSize')\n  async getNhlRookieSummary(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlRookieSummary(\n      param.season,\n      param.player,\n      param.statsType,\n      param.sort,\n      param.start,\n      param.pageSize\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Rookie Summary not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/player/stats/:playerId/:season')\n  async getNhlPlayerStatsByPlayerId(@Param() param) {\n    const stats = await this.nhlService.getNhlPlayerStatsByPlayerId(\n      param.playerId,\n      param.season\n    );\n\n    if (!stats) {\n      throw new NotFoundException('Nhl Player Stat not found');\n    }\n    return stats;\n  }\n}\n","export * from './nhl.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class NhlMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Nhl...');\r\n    next();\r\n  }\r\n}\r\n","import { HttpService } from '@nestjs/axios';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { AxiosResponse } from 'axios';\r\nimport { map, Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ApiNhlService {\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  nhlCOM = 'https://api.nhle.com/stats/rest/en/leaders';\r\n  nhlAPI = 'https://statsapi.web.nhl.com/api/v1/people';\r\n  nhlComSummary = 'https://api.nhle.com/stats/rest/en';\r\n  sportsNet = 'https://mobile-statsv2.sportsnet.ca/web_player_table';\r\n\r\n  getNhlLeaders(\r\n    playerType: string,\r\n    statType: string,\r\n    season: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.nhlCOM}/${playerType}s/${statType}?cayenneExp=season=${season}%20and%20gameType=2`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlGoalieLeaders(\r\n    playerType: string,\r\n    statType: string,\r\n    season: string,\r\n    minGames: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.nhlCOM}/${playerType}s/${statType}?cayenneExp=season=${season}%20and%20gameType=2%20and%20gamesPlayed%20%3E=%20${minGames}`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlRookieLeaders(\r\n    playerType: string,\r\n    statType: string,\r\n    season: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.nhlCOM}/${playerType}s/${statType}?cayenneExp=season=${season}%20and%20gameType=2%20and%20isRookie%20=%20%27Y%27`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlDefenseLeaders(\r\n    playerType: string,\r\n    statType: string,\r\n    season: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.nhlCOM}/${playerType}s/${statType}?cayenneExp=season=${season}%20and%20gameType=2%20and%20player.positionCode%20=%20%27D%27`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlSummaryFromSportsnet(\r\n    season: string,\r\n    seasonType: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.sportsNet}?league=nhl&season=${season}&season_type=${seasonType}`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlRookieSummary(\r\n    season: string,\r\n    player: string,\r\n    statsType: string,\r\n    sort: string,\r\n    start: string,\r\n    pageSize: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.nhlComSummary}/${player}/summary?isAggregate=false&isGame=false&sort=%5B%7B%22property%22:%22${statsType}%22,%22direction%22:%22${sort}%22%7D%5D&start=${start}&limit=${pageSize}&cayenneExp=gameTypeId=2%20and%20isRookie=%221%22%20and%20seasonId%3C=${season}%20and%20seasonId%3E=${season}`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlPlayerStatsByPlayerId(\r\n    playerId: number,\r\n    season: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const stats = this.httpService\r\n      .get(\r\n        `${this.nhlAPI}/${playerId}/stats?stats=statsSingleSeason&season=${season}`\r\n      )\r\n      .pipe(map((response) => response.data.stats[0].splits));\r\n\r\n    return stats;\r\n  }\r\n}\r\n","export * from './api-nhl.service';\r\n","export * from './lib/api-player-info.module';","import { Module } from '@nestjs/common';\nimport { PlayerInfoController } from './controllers';\n\n@Module({\n  controllers: [PlayerInfoController],\n  providers: [],\n  exports: [],\n})\nexport class ApiPlayerInfoModule {}\n","export * from './player-info.controller';\r\n","import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\n\n@Controller('player-info')\nexport class PlayerInfoController {\n  @Get()\n  getAllPlayers() {}\n\n  @Get('/players/:id')\n  getPlayerInfoById(@Param('id') id: string) {}\n\n  @Get('/goalies/:id')\n  getGoalieInfoById(@Param('id') id: string) {}\n\n  @Get('/players/nhl/logo/:id')\n  getPlayerLogoByNhlId(@Param('id') id: string) {}\n\n  @Get('/goalies/nhl/logo/:id')\n  getGoalieLogoByNhlId(@Param('id') id: string) {}\n\n  @Get('/players/active')\n  getActivePlayers() {}\n\n  @Get('/player/:id')\n  getPlayerForEditById(@Param('id') id: string) {}\n\n  @Put('/player/:id')\n  updatePlayerById(@Body() body: any, @Param('id') id: string) {}\n\n  @Post('/players/add')\n  addPlayer(@Body() body: any) {}\n\n  @Delete('/delete/:id')\n  deletePlayer(@Body() body: any, @Param('id') id: string) {}\n}\n","export * from './lib/api-player-ratings.module';\n","import { Module } from '@nestjs/common';\nimport { PlayerRatingsController } from './controllers';\n\n@Module({\n  controllers: [PlayerRatingsController],\n  providers: [],\n  exports: [],\n})\nexport class ApiPlayerRatingsModule {}\n","export * from './player-ratings.controller';\r\n","import { Controller } from '@nestjs/common';\n\n@Controller('player-ratings')\nexport class PlayerRatingsController {}\n","export * from './lib/api-player-stats.module';\n","import { Players_Stats_V2, Teams_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PlayerStatsController } from './controllers';\nimport { PlayerStatsMiddleware } from './middlewares';\nimport {\n  ApiPlayerAllTimeStatsService,\n  ApiPlayerLeadersStatsService,\n  ApiPlayerStatsService,\n  ApiUserPlayerStatsService,\n} from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Players_Stats_V2, Teams_V2])],\n  controllers: [PlayerStatsController],\n  providers: [\n    ApiPlayerStatsService,\n    ApiPlayerLeadersStatsService,\n    ApiPlayerAllTimeStatsService,\n    ApiUserPlayerStatsService,\n  ],\n})\nexport class ApiPlayerStatsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(PlayerStatsMiddleware).forRoutes('*');\n  }\n}\n","export * from './player-stats.controller';\r\n","import {\n  StatPlayerLeadersDto,\n  StatPlayersHistoryDto,\n  StatUserPlayersHistoryDto,\n} from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport {\n  ApiPlayerAllTimeStatsService,\n  ApiPlayerLeadersStatsService,\n  ApiPlayerStatsService,\n  ApiUserPlayerStatsService,\n} from '../services';\n\n@Controller('player-stats')\nexport class PlayerStatsController {\n  constructor(\n    private playerLeaderStatsService: ApiPlayerLeadersStatsService,\n    private playerStatsService: ApiPlayerStatsService,\n    private playerAllTimeStatsService: ApiPlayerAllTimeStatsService,\n    private userPlayersStatsService: ApiUserPlayerStatsService\n  ) {}\n\n  @Get('/leaders/:season/:seasonType')\n  async getPlayerStatsLeaders(@Param() param): Promise<StatPlayerLeadersDto> {\n    const stats = await this.playerLeaderStatsService.getPlayerStatsLeaders(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats) {\n      throw new NotFoundException('Player Leader Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/all/:season/:seasonType')\n  async getPlayerStatsAll(@Param() param): Promise<any[]> {\n    const stats = await this.playerStatsService.getAllStats(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/current/:season/:seasonType/:playerId')\n  async getPlayerStatsByPlayerId(@Param() param): Promise<any[]> {\n    const stats = await this.playerStatsService.getPlayerStatsByPlayerId(\n      param.season,\n      param.seasonType,\n      param.playerId\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/season/:seasonType')\n  async getAllTimePlayerStatsBySeasonByType(\n    @Param() param\n  ): Promise<StatPlayersHistoryDto[]> {\n    const stats =\n      await this.playerAllTimeStatsService.getAllTimePlayerStatsBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/all-time/:seasonType')\n  async getAllTimePlayerStatsSummedBySeasonByType(\n    @Param() param\n  ): Promise<StatPlayersHistoryDto[]> {\n    const stats =\n      await this.playerAllTimeStatsService.getAllTimePlayerStatsSummedBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/user/:userId/history/:seasonType')\n  async getTeamPlayerStatsBySeasonType(\n    @Param() param\n  ): Promise<StatUserPlayersHistoryDto[]> {\n    const record =\n      await this.userPlayersStatsService.getUserPlayerStatsBySeasonType(\n        param.userId,\n        param.seasonType\n      );\n\n    if (!record) {\n      throw new NotFoundException('Team Players Stats not found');\n    }\n    return record;\n  }\n\n  @Get('/user/:userId/history/all/:seasonType')\n  async getTeamPlayerStatsAllTimeBySeasonType(\n    @Param() param\n  ): Promise<StatUserPlayersHistoryDto[]> {\n    const record =\n      await this.userPlayersStatsService.getUserPlayerStatsAllTimeBySeasonType(\n        param.userId,\n        param.seasonType\n      );\n\n    if (!record) {\n      throw new NotFoundException('Team Players Stats not found');\n    }\n    return record;\n  }\n}\n","export * from './player-stats.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class PlayerStatsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Player Stats...');\r\n    next();\r\n  }\r\n}\r\n","import { Players_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport { StatPlayersHistoryDto } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { DataSource, MoreThan, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiPlayerAllTimeStatsService {\r\n  constructor(\r\n    @InjectRepository(Players_Stats_V2)\r\n    private repo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>,\r\n    @InjectDataSource() private dataSource: DataSource\r\n  ) {}\r\n\r\n  async getAllTimePlayerStatsBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatPlayersHistoryDto[]> {\r\n    const allStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        position: true,\r\n        games_played: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        plus_minus: true,\r\n        penalty_minutes: true,\r\n        pp_goals: true,\r\n        sh_goals: true,\r\n        gw_goals: true,\r\n        shots: true,\r\n        shooting_pct: true,\r\n        minutes_played: true,\r\n        minutes_per_game: true,\r\n        fo_pct: true,\r\n        pass_pct: true,\r\n        corner_pct: true,\r\n        hit_per_game: true,\r\n        blocked_shots: true,\r\n        playing_year: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        season_type: seasonType,\r\n      },\r\n      take: 1500,\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n    });\r\n\r\n    const allStatsWithTeamInfo = await this.setTeamInfo(allStats);\r\n\r\n    const allStatsWithTeamInfoConverted = await this.convertStats(\r\n      allStatsWithTeamInfo,\r\n      false\r\n    );\r\n\r\n    return allStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  async getAllTimePlayerStatsSummedBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatPlayersHistoryDto[]> {\r\n    const result = await this.dataSource.query(\r\n      `select\r\n      b.firstname as firstname,\r\n      b.lastname as lastname,\r\n      b.isdefense as isdefense,\r\n      b.isforward as isforward,\r\n      b.isgoalie as isgoalie,\r\n      b.nhl_id as nhl_id,\r\n      a.player_id as player_id,\r\n      a.season_type as season_type, \r\n      a.position as position,\r\n      sum(a.games_played) as games_played, \r\n      sum(a.goals) as goals, \r\n      sum(a.assists) as assists, \r\n      sum(a.points) as points, \r\n      sum(a.plus_minus) as plus_minus, \r\n      sum(a.penalty_minutes) as penalty_minutes, \r\n      sum(a.sh_goals) as sh_goals, \r\n      sum(a.pp_goals) as pp_goals, \r\n      sum(a.gw_goals) as gw_goals, \r\n      sum(a.shots) as shots, \r\n      sum(a.minutes_played) as minutes_played, \r\n      sum(a.hits) as hits, \r\n      sum(a.blocked_shots) as blocked_shots\r\n      from\r\n      players_stats_v2 as a\r\n      left join players_v2 as b\r\n      on b.id = a.player_id\r\n      where (a.player_id = b.id\r\n      and\r\n      a.points > '0'\r\n      and\r\n      a.season_type = '${seasonType}')\r\n      group by b.firstname, b.lastname, b.isgoalie, b.isdefense, b.isforward, b.nhl_id, a.player_id, a.season_type, a.position\r\n      order by points DESC`\r\n    );\r\n\r\n    const allTimeStatsConverted = await this.convertStats(result, true);\r\n\r\n    return allTimeStatsConverted;\r\n  }\r\n\r\n  private async setTeamInfo(array: Players_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async convertStats(array: any[], raw: boolean) {\r\n    return await Promise.all(\r\n      array.map((stat: any) => ({\r\n        playing_year: stat.playing_year,\r\n        season_type: stat.season_type,\r\n        teamInfo: !raw ? stat['teamInfo'] : null,\r\n        player_id: !raw\r\n          ? stat.player_id\r\n          : {\r\n              id: stat['player_id'],\r\n              firstname: stat['firstname'],\r\n              lastname: stat['lastname'],\r\n              nhl_id: stat['nhl_id'],\r\n              isactive: null,\r\n              isgoalie: null,\r\n              isdefense: stat['isdefense'],\r\n              isforward: stat['isforward'],\r\n              is_protected: null,\r\n            },\r\n        position: stat.position,\r\n        games_played: Number(stat.games_played),\r\n        goals: Number(stat.goals),\r\n        assists: Number(stat.assists),\r\n        points: Number(stat.points),\r\n        pointsPerSixty: Number(\r\n          ((Number(stat.points) / Number(stat.minutes_played)) * 60).toFixed(2)\r\n        ),\r\n        plus_minus: Number(stat.plus_minus),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        pp_goals: Number(stat.pp_goals),\r\n        sh_goals: Number(stat.sh_goals),\r\n        gw_goals: Number(stat.gw_goals),\r\n        shots: Number(stat.shots),\r\n        shooting_pct: !raw\r\n          ? Number(stat.shooting_pct)\r\n          : Number(\r\n              ((Number(stat.goals) / Number(stat.shots)) * 100).toFixed(1)\r\n            ),\r\n        minutes_per_game: !raw\r\n          ? Number(stat.minutes_per_game)\r\n          : Number(\r\n              (Number(stat.minutes_played) / Number(stat.games_played)).toFixed(\r\n                1\r\n              )\r\n            ),\r\n        fo_pct: !raw ? Number(stat.fo_pct) : null,\r\n        pass_pct: !raw ? Number(stat.pass_pct) : null,\r\n        corner_pct: !raw ? Number(stat.corner_pct) : null,\r\n        hit_per_game: !raw\r\n          ? Number(stat.hit_per_game)\r\n          : Number((Number(stat.hits) / Number(stat.games_played)).toFixed(1)),\r\n        blocked_shots: Number(stat.blocked_shots),\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { Players_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport {\r\n  StatPlayerLeaderDto,\r\n  StatPlayerLeadersDto,\r\n} from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiPlayerLeadersStatsService {\r\n  constructor(\r\n    @InjectRepository(Players_Stats_V2)\r\n    private repo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getPlayerStatsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatPlayerLeadersDto> {\r\n    const hitsLeaders = await this.getHitsLeaders(season, seasonType);\r\n    const pointsLeaders = await this.getPointsLeaders(season, seasonType);\r\n    const assistLeaders = await this.getAssistLeaders(season, seasonType);\r\n    const bestPlusMinusLeaders = await this.getBestPlusMinusLeaders(\r\n      season,\r\n      seasonType\r\n    );\r\n    const blockedShotLeaders = await this.getblockedShotLeaders(\r\n      season,\r\n      seasonType\r\n    );\r\n    const currSteakLeaders = await this.getCurrSteakLeaders(season, seasonType);\r\n    const defenseLeaders = await this.getDefenseLeaders(season, seasonType);\r\n    const goalLeaders = await this.getGoalLeaders(season, seasonType);\r\n    const longStreakLeaders = await this.getLongStreakLeaders(\r\n      season,\r\n      seasonType\r\n    );\r\n    const minutesLeaders = await this.getMinutesLeaders(season, seasonType);\r\n    const penaltyLeaders = await this.getPenaltyLeaders(season, seasonType);\r\n    const ppGoalsLeaders = await this.getPpgoalsLeaders(season, seasonType);\r\n    const rookieLeaders = await this.getRookieLeaders(season, seasonType);\r\n    const shGoalsLeaders = await this.getShGoalsLeaders(season, seasonType);\r\n    const shotsLeaders = await this.getShotsLeaders(season, seasonType);\r\n\r\n    return {\r\n      hits: hitsLeaders as unknown as StatPlayerLeaderDto[],\r\n      points: pointsLeaders as unknown as StatPlayerLeaderDto[],\r\n      assists: assistLeaders as unknown as StatPlayerLeaderDto[],\r\n      bestPlusMinus: bestPlusMinusLeaders as unknown as StatPlayerLeaderDto[],\r\n      blockedShots: blockedShotLeaders as unknown as StatPlayerLeaderDto[],\r\n      currStreak: currSteakLeaders as unknown as StatPlayerLeaderDto[],\r\n      defense: defenseLeaders as unknown as StatPlayerLeaderDto[],\r\n      goals: goalLeaders as unknown as StatPlayerLeaderDto[],\r\n      longStreak: longStreakLeaders as unknown as StatPlayerLeaderDto[],\r\n      minutes: minutesLeaders as unknown as StatPlayerLeaderDto[],\r\n      penalties: penaltyLeaders as unknown as StatPlayerLeaderDto[],\r\n      ppGoals: ppGoalsLeaders as unknown as StatPlayerLeaderDto[],\r\n      rookies: rookieLeaders as unknown as StatPlayerLeaderDto[],\r\n      shGoals: shGoalsLeaders as unknown as StatPlayerLeaderDto[],\r\n      shots: shotsLeaders as unknown as StatPlayerLeaderDto[],\r\n    };\r\n  }\r\n\r\n  private async getHitsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const hitsLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        hits: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        hits: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const hitsLeadersWithTeamInfo = await this.setTeamInfo(hitsLeaders);\r\n\r\n    return hitsLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getPointsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const pointsLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        points: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const pointsLeadersWithTeamInfo = await this.setTeamInfo(pointsLeaders);\r\n\r\n    return pointsLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getAssistLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const assistLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        assists: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        assists: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const assistLeadersWithTeamInfo = await this.setTeamInfo(assistLeaders);\r\n\r\n    return assistLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getBestPlusMinusLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const bestPlusMinusLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        plus_minus: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        plus_minus: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const bestPlusMinusLeadersWithTeamInfo = await this.setTeamInfo(\r\n      bestPlusMinusLeaders\r\n    );\r\n\r\n    return bestPlusMinusLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getblockedShotLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const blockedShotLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        blocked_shots: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        blocked_shots: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const blockedShotLeadersWithTeamInfo = await this.setTeamInfo(\r\n      blockedShotLeaders\r\n    );\r\n\r\n    return blockedShotLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getCurrSteakLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const currStreakLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        current_points_streak: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        current_points_streak: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const currStreakLeadersWithTeamInfo = await this.setTeamInfo(\r\n      currStreakLeaders\r\n    );\r\n\r\n    return currStreakLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getDefenseLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const defenseLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        points: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n          isdefense: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        player_id: {\r\n          isdefense: true,\r\n        },\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const defenseLeadersWithTeamInfo = await this.setTeamInfo(defenseLeaders);\r\n\r\n    return defenseLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getGoalLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const goalLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        goals: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        goals: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const goalLeadersWithTeamInfo = await this.setTeamInfo(goalLeaders);\r\n\r\n    return goalLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getLongStreakLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const longStreakLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        longest_points_streak: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        longest_points_streak: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const longStreakLeadersWithTeamInfo = await this.setTeamInfo(\r\n      longStreakLeaders\r\n    );\r\n\r\n    return longStreakLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getMinutesLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const minutesLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        minutes_played: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        minutes_played: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const minutesLeadersWithTeamInfo = await this.setTeamInfo(minutesLeaders);\r\n\r\n    return minutesLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getPenaltyLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const penaltyLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        penalty_minutes: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        penalty_minutes: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const penaltyLeadersWithTeamInfo = await this.setTeamInfo(penaltyLeaders);\r\n\r\n    return penaltyLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getPpgoalsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const ppGoalsLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        pp_goals: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        pp_goals: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const ppGoalsLeadersWithTeamInfo = await this.setTeamInfo(ppGoalsLeaders);\r\n\r\n    return ppGoalsLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getRookieLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const rookieLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        points: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        player_status: 'Rookie',\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const rookieLeadersWithTeamInfo = await this.setTeamInfo(rookieLeaders);\r\n\r\n    return rookieLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getShGoalsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const shGoalsLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        sh_goals: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        sh_goals: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const shGoalsLeadersWithTeamInfo = await this.setTeamInfo(shGoalsLeaders);\r\n\r\n    return shGoalsLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getShotsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const shotsLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        shots: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        shots: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const shotsLeadersWithTeamInfo = await this.setTeamInfo(shotsLeaders);\r\n\r\n    return shotsLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async setTeamInfo(array: Players_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Players_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiPlayerStatsService {\r\n  constructor(\r\n    @InjectRepository(Players_Stats_V2)\r\n    private repo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getAllStats(season: string, seasonType: 'Regular' | 'Playoffs') {\r\n    const allStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        position: true,\r\n        games_played: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        plus_minus: true,\r\n        penalty_minutes: true,\r\n        pp_goals: true,\r\n        sh_goals: true,\r\n        gw_goals: true,\r\n        gt_goals: true,\r\n        shots: true,\r\n        shooting_pct: true,\r\n        minutes_played: true,\r\n        minutes_per_game: true,\r\n        fo_pct: true,\r\n        pass_pct: true,\r\n        corner_pct: true,\r\n        hits: true,\r\n        blocked_shots: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n    });\r\n\r\n    const allStatsWithTeamInfo = await this.setTeamInfo(allStats);\r\n\r\n    const allStatsWithTeamInfoConverted = await this.convertStats(\r\n      allStatsWithTeamInfo\r\n    );\r\n\r\n    return allStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  async getPlayerStatsByPlayerId(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    playerId: number\r\n  ) {\r\n    const allStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        position: true,\r\n        games_played: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        plus_minus: true,\r\n        penalty_minutes: true,\r\n        pp_goals: true,\r\n        sh_goals: true,\r\n        gw_goals: true,\r\n        gt_goals: true,\r\n        shots: true,\r\n        shooting_pct: true,\r\n        minutes_played: true,\r\n        minutes_per_game: true,\r\n        fo_pct: true,\r\n        pass_pct: true,\r\n        corner_pct: true,\r\n        hits: true,\r\n        blocked_shots: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        player_id: {\r\n          id: playerId,\r\n        },\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n    });\r\n\r\n    const allStatsWithTeamInfo = await this.setTeamInfo(allStats);\r\n\r\n    const allStatsWithTeamInfoConverted = await this.convertStats(\r\n      allStatsWithTeamInfo\r\n    );\r\n\r\n    return allStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  private async setTeamInfo(array: Players_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async convertStats(array: Players_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map((stat: Players_Stats_V2) => ({\r\n        ...stat,\r\n        games_played: Number(stat.games_played),\r\n        goals: Number(stat.goals),\r\n        assists: Number(stat.assists),\r\n        points: Number(stat.points),\r\n        plus_minus: Number(stat.plus_minus),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        pp_goals: Number(stat.pp_goals),\r\n        sh_goals: Number(stat.sh_goals),\r\n        gw_goals: Number(stat.gw_goals),\r\n        gt_goals: Number(stat.gt_goals),\r\n        shots: Number(stat.shots),\r\n        shooting_pct: Number(stat.shooting_pct),\r\n        minutes_played: Number(stat.minutes_played),\r\n        minutes_per_game: Number(stat.minutes_per_game),\r\n        fo_pct: Number(stat.fo_pct),\r\n        pass_pct: Number(stat.pass_pct),\r\n        corner_pct: Number(stat.corner_pct),\r\n        hits: Number(stat.hits),\r\n        blocked_shots: Number(stat.blocked_shots),\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { Players_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { DataSource, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiUserPlayerStatsService {\r\n  constructor(\r\n    @InjectRepository(Players_Stats_V2)\r\n    private repo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>,\r\n    @InjectDataSource() private dataSource: DataSource\r\n  ) {}\r\n\r\n  async getUserPlayerStatsBySeasonType(\r\n    userId: number,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const userTeams = await this.teamInfoRepo.findBy({ users_id: userId });\r\n\r\n    const userTeamsWithPlayerStats = await this.setPlayerStats(\r\n      userTeams,\r\n      seasonType\r\n    );\r\n\r\n    const userTeamsWithPlayersStatsConverted =\r\n      await this.setConvertedPlayersStats(userTeamsWithPlayerStats, false);\r\n\r\n    return userTeamsWithPlayersStatsConverted;\r\n  }\r\n\r\n  async getUserPlayerStatsAllTimeBySeasonType(\r\n    userId: number,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const userTeams = await this.teamInfoRepo.findBy({ users_id: userId });\r\n\r\n    const userTeamsWithPlayerStats = await this.setPlayerAllTimeStats(\r\n      userTeams,\r\n      seasonType\r\n    );\r\n\r\n    const userTeamsWithPlayersStatsConverted =\r\n      await this.setConvertedPlayersStats(userTeamsWithPlayerStats, true);\r\n\r\n    return userTeamsWithPlayersStatsConverted;\r\n  }\r\n\r\n  private async setPlayerStats(\r\n    array: Teams_V2[],\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        playerStats: await this.getPlayerStats(item.shortname, seasonType),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async setPlayerAllTimeStats(\r\n    array: Teams_V2[],\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        playerStats: await this.getPlayerAllTimeStats(\r\n          item.shortname,\r\n          seasonType\r\n        ),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getPlayerAllTimeStats(\r\n    teamShortName: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await this.dataSource.query(\r\n      `select\r\n      b.firstname as firstname,\r\n      b.lastname as lastname,\r\n      b.isdefense as isdefense,\r\n      b.isforward as isforward,\r\n      b.isgoalie as isgoalie,\r\n      b.nhl_id as nhl_id,\r\n      a.player_id as player_id,\r\n      a.season_type as season_type, \r\n      a.position as position,\r\n      sum(a.games_played) as games_played, \r\n      sum(a.goals) as goals, \r\n      sum(a.assists) as assists, \r\n      sum(a.points) as points, \r\n      sum(a.plus_minus) as plus_minus, \r\n      sum(a.penalty_minutes) as penalty_minutes, \r\n      sum(a.sh_goals) as sh_goals, \r\n      sum(a.pp_goals) as pp_goals, \r\n      sum(a.gw_goals) as gw_goals, \r\n      sum(a.gt_goals) as gt_goals, \r\n      sum(a.shots) as shots, \r\n      sum(a.minutes_played) as minutes_played, \r\n      sum(a.hits) as hits, \r\n      sum(a.blocked_shots) as blocked_shots\r\n      from\r\n      players_stats_v2 as a\r\n      left join players_v2 as b\r\n      on b.id = a.player_id\r\n      where (a.player_id = b.id\r\n      and\r\n      a.points > '0'\r\n      and\r\n      a.season_type = '${seasonType}'\r\n      and a.team_name = '${teamShortName}')\r\n      group by b.firstname, b.lastname, b.isgoalie, b.isdefense, b.isforward, b.nhl_id, a.player_id, a.season_type, a.position\r\n      order by points DESC`\r\n    );\r\n  }\r\n\r\n  private async getPlayerStats(\r\n    teamShortName: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        position: true,\r\n        games_played: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        plus_minus: true,\r\n        penalty_minutes: true,\r\n        pp_goals: true,\r\n        sh_goals: true,\r\n        gw_goals: true,\r\n        gt_goals: true,\r\n        shots: true,\r\n        shooting_pct: true,\r\n        minutes_played: true,\r\n        minutes_per_game: true,\r\n        fo_pct: true,\r\n        pass_pct: true,\r\n        corner_pct: true,\r\n        hits: true,\r\n        blocked_shots: true,\r\n        playing_year: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        team_name: teamShortName,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n    });\r\n  }\r\n\r\n  private async setConvertedPlayersStats(array: any[], raw: boolean) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        playerStats: await this.convertStats(item.playerStats, raw, item),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async convertStats(\r\n    array: Players_Stats_V2[],\r\n    raw: boolean,\r\n    teamInfo: any\r\n  ) {\r\n    return await Promise.all(\r\n      array.map((stat: Players_Stats_V2) => ({\r\n        playing_year: stat.playing_year,\r\n        season_type: stat.season_type,\r\n        teamInfo: !raw\r\n          ? {\r\n              id: teamInfo.id,\r\n              city: teamInfo.city,\r\n              nickname: teamInfo.nickname,\r\n              teamlogo: teamInfo.teamlogo,\r\n            }\r\n          : null,\r\n        games_played: Number(stat.games_played),\r\n        goals: Number(stat.goals),\r\n        assists: Number(stat.assists),\r\n        points: Number(stat.points),\r\n        plus_minus: Number(stat.plus_minus),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        pp_goals: Number(stat.pp_goals),\r\n        sh_goals: Number(stat.sh_goals),\r\n        gw_goals: Number(stat.gw_goals),\r\n        gt_goals: Number(stat.gt_goals),\r\n        shots: Number(stat.shots),\r\n        shooting_pct: !raw\r\n          ? Number(stat.shooting_pct)\r\n          : Number(\r\n              ((Number(stat.goals) / Number(stat.shots)) * 100).toFixed(1)\r\n            ),\r\n        minutes_per_game: !raw\r\n          ? Number(stat.minutes_per_game)\r\n          : Number(\r\n              (Number(stat.minutes_played) / Number(stat.games_played)).toFixed(\r\n                1\r\n              )\r\n            ),\r\n        fo_pct: !raw ? Number(stat.fo_pct) : null,\r\n        pass_pct: !raw ? Number(stat.pass_pct) : null,\r\n        corner_pct: !raw ? Number(stat.corner_pct) : null,\r\n        minutes_played: Number(stat.minutes_played),\r\n        hits: Number(stat.hits),\r\n        blocked_shots: Number(stat.blocked_shots),\r\n        pointsPerSixty: Number(\r\n          ((Number(stat.points) / Number(stat.minutes_played)) * 60).toFixed(2)\r\n        ),\r\n        hit_per_game: Number((Number(stat.hits) / Number(stat.games_played)).toFixed(1)),\r\n        player_id: !raw\r\n          ? stat.player_id\r\n          : {\r\n              id: stat['player_id'],\r\n              firstname: stat['firstname'],\r\n              lastname: stat['lastname'],\r\n              nhl_id: stat['nhl_id'],\r\n              isactive: null,\r\n              isgoalie: null,\r\n              isdefense: stat['isdefense'],\r\n              isforward: stat['isforward'],\r\n              is_protected: null,\r\n            },\r\n      }))\r\n    );\r\n  }\r\n}\r\n","export * from './api-player-leaders-stats.service';\r\nexport * from './api-player-stats.service';\r\nexport * from './api-player-all-time-stats.service';\r\nexport * from './api-user-player-stats.service';","export * from './lib/api-salaries.module';","import {\n  Goalies_Stats_V2,\n  Goalie_Ratings_V2,\n  Players_Stats_V2,\n  Players_V2,\n  Player_Ratings_V2,\n  Salaries_V2,\n  Teams_V2,\n} from '@api/entities';\nimport { HttpModule } from '@nestjs/axios';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SalariesController } from './controllers';\nimport { SalariesMiddleware } from './middlewares';\nimport { ApiSalariesService } from './services';\n\n@Module({\n  imports: [\n    HttpModule,\n    TypeOrmModule.forFeature([\n      Players_Stats_V2,\n      Teams_V2,\n      Salaries_V2,\n      Player_Ratings_V2,\n      Goalie_Ratings_V2,\n      Goalies_Stats_V2,\n      Players_V2,\n    ]),\n  ],\n  controllers: [SalariesController],\n  providers: [ApiSalariesService],\n})\nexport class ApiSalariesModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(SalariesMiddleware).forRoutes('*');\n  }\n}\n","export * from './salaries.controller';\r\n","import { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { ApiSalariesService } from '../services';\n\n@Controller('salaries')\nexport class SalariesController {\n  constructor(private salariesService: ApiSalariesService) {}\n\n  @Get('/all/players/:season')\n  async getAllPlayerSalaries(@Param() param): Promise<any[]> {\n    const salaries = await this.salariesService.getAllPlayerSalaries(\n      param.season\n    );\n\n    if (!salaries) {\n      throw new NotFoundException('Player Salaries not found');\n    }\n    return salaries;\n  }\n\n  @Get('/all/goalies/:season')\n  async getAllGoaliesSalaries(@Param() param): Promise<any[]> {\n    const salaries = await this.salariesService.getAllGoaliesSalaries(\n      param.season\n    );\n\n    if (!salaries) {\n      throw new NotFoundException('Goalie Salaries not found');\n    }\n    return salaries;\n  }\n\n  @Get('/user/:teamName/players/:season/:ratingsSeason')\n  async getUserTeamPlayerSalaries(@Param() param): Promise<any[]> {\n    const salaries = await this.salariesService.getUserTeamPlayerSalaries(\n      param.teamName,\n      param.season,\n      param.ratingsSeason\n    );\n\n    if (!salaries) {\n      throw new NotFoundException('User Player Salaries not found');\n    }\n    return salaries;\n  }\n\n  @Get('/user/:teamName/goalies/:season/:ratingsSeason')\n  async getUserTeamGoaliesSalaries(@Param() param): Promise<any[]> {\n    const salaries = await this.salariesService.getUserTeamGoaliesSalaries(\n      param.teamName,\n      param.season,\n      param.ratingsSeason\n    );\n\n    if (!salaries) {\n      throw new NotFoundException('User Goalie Salaries not found');\n    }\n    return salaries;\n  }\n}\n","export * from './salaries.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class SalariesMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Salaries...');\r\n    next();\r\n  }\r\n}\r\n","import {\r\n  Goalies_Stats_V2,\r\n  Goalie_Ratings_V2,\r\n  Players_Stats_V2,\r\n  Players_V2,\r\n  Player_Ratings_V2,\r\n  Salaries_V2,\r\n  Teams_V2,\r\n} from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\nimport { HttpService } from '@nestjs/axios';\r\nimport { firstValueFrom, Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ApiSalariesService {\r\n  nhlAPI = 'https://statsapi.web.nhl.com/api/v1/people';\r\n\r\n  constructor(\r\n    @InjectRepository(Salaries_V2)\r\n    private repo: Repository<Salaries_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamsRepo: Repository<Teams_V2>,\r\n    @InjectRepository(Players_V2)\r\n    private playersRepo: Repository<Players_V2>,\r\n    @InjectRepository(Players_Stats_V2)\r\n    private playersStatsRepo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Player_Ratings_V2)\r\n    private playerRatingsRepo: Repository<Player_Ratings_V2>,\r\n    @InjectRepository(Goalies_Stats_V2)\r\n    private goaliesStatsRepo: Repository<Goalies_Stats_V2>,\r\n    @InjectRepository(Goalie_Ratings_V2)\r\n    private goalieRatingsRepo: Repository<Goalie_Ratings_V2>,\r\n    private httpService: HttpService\r\n  ) {}\r\n\r\n  async getAllPlayerSalaries(season: string) {\r\n    const allPlayersInSeason = await this.playersStatsRepo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n        },\r\n      },\r\n      where: {\r\n        player_id: {\r\n          isgoalie: false,\r\n        },\r\n        season_type: 'Regular',\r\n        playing_year: season,\r\n      },\r\n    });\r\n\r\n    const allSalariesForPlayersInSeason = await this.setPlayersSalaries(\r\n      allPlayersInSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForPlayersInSeason = await this.setPlayerRating(\r\n      allSalariesForPlayersInSeason,\r\n      season\r\n    );\r\n\r\n    const allSalariesAndRatingsForPlayersInSeasonWithTeamInfo =\r\n      await this.setTeamInfo(allSalariesAndRatingsForPlayersInSeason);\r\n\r\n    return allSalariesAndRatingsForPlayersInSeasonWithTeamInfo;\r\n  }\r\n\r\n  async getAllGoaliesSalaries(season: string) {\r\n    const allGoaliesInSeason = await this.goaliesStatsRepo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n        },\r\n      },\r\n      where: {\r\n        player_id: {\r\n          isgoalie: true,\r\n        },\r\n        season_type: 'Regular',\r\n        playing_year: season,\r\n      },\r\n    });\r\n\r\n    const allSalariesForGoaliesInSeason = await this.setPlayersSalaries(\r\n      allGoaliesInSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForGoaliesInSeason = await this.setGoalieRating(\r\n      allSalariesForGoaliesInSeason,\r\n      season\r\n    );\r\n\r\n    const allSalariesAndRatingsForGoaliesInSeasonWithTeamInfo =\r\n      await this.setTeamInfo(allSalariesAndRatingsForGoaliesInSeason);\r\n\r\n    return allSalariesAndRatingsForGoaliesInSeasonWithTeamInfo;\r\n  }\r\n\r\n  async getUserTeamPlayerSalaries(\r\n    teamName: string,\r\n    season: string,\r\n    ratingsSeason: string\r\n  ) {\r\n    const allPlayersInSeason = await this.playersStatsRepo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n        },\r\n      },\r\n      where: {\r\n        player_id: {\r\n          isgoalie: false,\r\n        },\r\n        team_name: teamName,\r\n        season_type: 'Regular',\r\n        playing_year: season,\r\n      },\r\n    });\r\n\r\n    const allSalariesForPlayersInSeason = await this.setPlayersSalaries(\r\n      allPlayersInSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForPlayersInSeason = await this.setPlayerRating(\r\n      allSalariesForPlayersInSeason,\r\n      ratingsSeason\r\n    );\r\n\r\n    const allSalariesRatingsNHLStatsForPlayersInSeason = await this.setNHLStats(\r\n      allSalariesAndRatingsForPlayersInSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForPlayersInSeasonWithTeamInfo =\r\n      await this.setTeamInfo(allSalariesRatingsNHLStatsForPlayersInSeason);\r\n\r\n    return allSalariesAndRatingsForPlayersInSeasonWithTeamInfo;\r\n  }\r\n\r\n  async getUserTeamGoaliesSalaries(\r\n    teamName: string,\r\n    season: string,\r\n    ratingsSeason: string\r\n  ) {\r\n    const allGoaliesInSeason = await this.goaliesStatsRepo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n        },\r\n      },\r\n      where: {\r\n        player_id: {\r\n          isgoalie: true,\r\n        },\r\n        team_name: teamName,\r\n        season_type: 'Regular',\r\n        playing_year: season,\r\n      },\r\n    });\r\n\r\n    const allSalariesForGoaliesInSeason = await this.setPlayersSalaries(\r\n      allGoaliesInSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForGoaliesInSeason = await this.setGoalieRating(\r\n      allSalariesForGoaliesInSeason,\r\n      ratingsSeason\r\n    );\r\n\r\n    const allSalariesRatingsNHLStatsForPlayersInSeason = await this.setNHLStats(\r\n      allSalariesAndRatingsForGoaliesInSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForGoaliesInSeasonWithTeamInfo =\r\n      await this.setTeamInfo(allSalariesRatingsNHLStatsForPlayersInSeason);\r\n\r\n    return allSalariesAndRatingsForGoaliesInSeasonWithTeamInfo;\r\n  }\r\n\r\n  private async setPlayersSalaries(array: any[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        salaries: await this.getSalary(item.player_id.id),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getSalary(playerId: number) {\r\n    return await this.repo.findOne({\r\n      select: {\r\n        id: true,\r\n        player_id: true,\r\n        season_2022: true,\r\n        season_2023: true,\r\n        season_2024: true,\r\n        season_2025: true,\r\n      },\r\n      where: {\r\n        player_id: playerId.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  private async setPlayerRating(array: any[], season: string) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        ratings: await this.getPlayerRating(item.player_id.id, season),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async setGoalieRating(array: any[], season: string) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        ratings: await this.getGoalieRating(item.player_id.id, season),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getGoalieRating(playerId: number, season: string) {\r\n    return await this.goalieRatingsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        passing: true,\r\n        speed: true,\r\n        skating: true,\r\n        wins: true,\r\n        goals_against_avg: true,\r\n        save_pct: true,\r\n        games_played: true,\r\n      },\r\n      where: {\r\n        player_id: playerId,\r\n        playing_year: season,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async getPlayerRating(playerId: number, season: string) {\r\n    return await this.playerRatingsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        c_rate: true,\r\n        l_rate: true,\r\n        r_rate: true,\r\n        ld_rate: true,\r\n        rd_rate: true,\r\n        skating: true,\r\n        speed: true,\r\n        passing: true,\r\n        shooting: true,\r\n        face_off: true,\r\n        forecheck: true,\r\n        assist_rating: true,\r\n        clear_crease: true,\r\n        shot_block: true,\r\n        pk: true,\r\n        physical: true,\r\n        rock: true,\r\n        intimidation: true,\r\n        game_fatigue: true,\r\n        shift_fatigue: true,\r\n        points: true,\r\n        goals: true,\r\n        assists: true,\r\n        shots: true,\r\n        shooting_pct: true,\r\n        games_played: true,\r\n      },\r\n      where: {\r\n        player_id: playerId,\r\n        playing_year: season,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async setTeamInfo(array: any[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    if (teamName) {\r\n      return await this.teamsRepo.findOne({\r\n        select: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          nickname: true,\r\n        },\r\n        where: {\r\n          shortname: teamName,\r\n        },\r\n      });\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  private async setNHLStats(array: any[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        nhlStats: await this.getNhlPlayerStatsByPlayerId(item.player_id.nhl_id),\r\n      }))\r\n    );\r\n  }\r\n\r\n  async getNhlPlayerStatsByPlayerId(\r\n    playerId: number\r\n  ): Promise<Observable<any>> {\r\n    const stats = this.httpService.get(\r\n      `${this.nhlAPI}/${playerId}/stats?stats=statsSingleSeason&season=20212022`\r\n    );\r\n\r\n    const response = await firstValueFrom(stats);\r\n\r\n    return response.data.stats[0].splits[0]?.stat;\r\n  }\r\n}\r\n","export * from './api-salaries.service';\r\n","export * from './lib/api-schedule.module';\n","import { Schedule_V2, Teams_V2, Team_Stats_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleController } from './controllers';\nimport { ScheduleMiddleware } from './middlewares';\nimport { ApiScheduleService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Schedule_V2, Teams_V2, Team_Stats_V2])],\n  controllers: [ScheduleController],\n  providers: [ApiScheduleService],\n})\nexport class ApiScheduleModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(ScheduleMiddleware).forRoutes('*');\n  }\n}\n","export * from './schedule.controller';\r\n","import { ScheduleAllDto } from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { ApiScheduleService } from '../services';\n\n@Controller('schedule')\nexport class ScheduleController {\n  constructor(private scheduleService: ApiScheduleService) {}\n\n  @Get('/:season')\n  async getCompleteScheduleBySeason(@Param() param): Promise<ScheduleAllDto[]> {\n    const stats = await this.scheduleService.getCompleteScheduleBySeason(\n      param.season\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Leader Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/next/:season/:currentDay')\n  async getNextDays(@Param() param): Promise<any[]> {\n    const stats = await this.scheduleService.getNextDays(\n      param.season,\n      Number(param.currentDay)\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Leader Stats not found');\n    }\n    return stats;\n  }\n}\n","export * from './schedule.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class ScheduleMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Schedule...');\r\n    next();\r\n  }\r\n}\r\n","import { Schedule_V2, Teams_V2, Team_Stats_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Between, Brackets, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiScheduleService {\r\n  constructor(\r\n    @InjectRepository(Schedule_V2)\r\n    private repo: Repository<Schedule_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>,\r\n    @InjectRepository(Team_Stats_V2)\r\n    private teamStatsRepo: Repository<Team_Stats_V2>\r\n  ) {}\r\n\r\n  async getCompleteScheduleBySeason(season: string) {\r\n    const schedule = await this.repo.find({\r\n      where: {\r\n        playing_year: season,\r\n      },\r\n      order: {\r\n        game_day: 'ASC',\r\n      },\r\n    });\r\n\r\n    const scheduleTeamInfo = await this.setTeamInfo(schedule);\r\n\r\n    return scheduleTeamInfo;\r\n  }\r\n\r\n  async getNextDays(season: string, currentDay: number) {\r\n    const schedule = await this.repo.find({\r\n      where: {\r\n        playing_year: season,\r\n        game_day: Between(currentDay, currentDay + 4),\r\n      },\r\n      order: {\r\n        game_day: 'ASC',\r\n      },\r\n    });\r\n\r\n    const scheduleTeamInfo = await this.setTeamNextInfo(schedule);\r\n\r\n    return scheduleTeamInfo;\r\n  }\r\n\r\n  private async getTeamLastFive(teamId: number, season: string) {\r\n    const lastFive = await this.repo\r\n      .createQueryBuilder('schedule')\r\n      .where('schedule.playing_year = :year', { year: season })\r\n      .andWhere(\r\n        new Brackets((qb) => {\r\n          qb.where('schedule.home_team_id = :teamId', { teamId }).orWhere(\r\n            'schedule.vis_team_id = :teamId',\r\n            { teamId }\r\n          );\r\n        })\r\n      )\r\n      .orderBy('schedule.game_day', 'DESC')\r\n      .limit(5)\r\n      .getMany();\r\n\r\n    return await this.getLastFiveRecord(lastFive, teamId);\r\n  }\r\n\r\n  private async getLastFiveRecord(lastFive: Schedule_V2[], teamId: number) {\r\n    const lastFiveRecord = [];\r\n\r\n    await lastFive.forEach((record: Schedule_V2) => {\r\n      if (record.home_team_id === teamId) {\r\n        if (record.home_team_score > record.vis_team_score) {\r\n          lastFiveRecord.push('W');\r\n        } else if (record.home_team_score < record.vis_team_score) {\r\n          lastFiveRecord.push('L');\r\n        } else {\r\n          lastFiveRecord.push('T');\r\n        }\r\n      } else {\r\n        if (record.vis_team_score > record.home_team_score) {\r\n          lastFiveRecord.push('W');\r\n        } else if (record.vis_team_score < record.home_team_score) {\r\n          lastFiveRecord.push('L');\r\n        } else {\r\n          lastFiveRecord.push('T');\r\n        }\r\n      }\r\n    });\r\n\r\n    return lastFiveRecord;\r\n  }\r\n\r\n  private async getVersusRecord(data: Schedule_V2[], teamId: number) {\r\n    let wins = 0;\r\n    let loss = 0;\r\n    let ties = 0;\r\n\r\n    await data.forEach((game: Schedule_V2) => {\r\n      if (game.vis_team_id === teamId) {\r\n        game.vis_team_score > game.home_team_score\r\n          ? wins++\r\n          : game.vis_team_score === game.home_team_score\r\n          ? ties++\r\n          : loss++;\r\n      } else if (game.home_team_id === teamId) {\r\n        game.home_team_score > game.vis_team_score\r\n          ? wins++\r\n          : game.home_team_score === game.vis_team_score\r\n          ? ties++\r\n          : loss++;\r\n      }\r\n    });\r\n\r\n    return {\r\n      wins,\r\n      loss,\r\n      ties,\r\n    };\r\n  }\r\n\r\n  private async setTeamNextInfo(array: Schedule_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        id: item.id,\r\n        gameDay: item.game_day,\r\n        visTeamScore: item.vis_team_score,\r\n        visTeamInfo: await this.getTeamInfo(item.vis_team_id),\r\n        visTeamLastFive: await this.getTeamLastFive(\r\n          item.vis_team_id,\r\n          item.playing_year\r\n        ),\r\n        visTeamRecord: await this.getTeamSeasonRecord(\r\n          item.vis_team_id,\r\n          item.playing_year\r\n        ),\r\n        visTeamVersus: await this.getTeamRecordVersus(\r\n          item.vis_team_id,\r\n          item.home_team_id,\r\n          item.playing_year\r\n        ),\r\n        homeTeamScore: item.home_team_score,\r\n        homeTeamInfo: await this.getTeamInfo(item.home_team_id),\r\n        homeTeamLastFive: await this.getTeamLastFive(\r\n          item.home_team_id,\r\n          item.playing_year\r\n        ),\r\n        homeTeamRecord: await this.getTeamSeasonRecord(\r\n          item.home_team_id,\r\n          item.playing_year\r\n        ),\r\n        homeTeamVersus: await this.getTeamRecordVersus(\r\n          item.home_team_id,\r\n          item.vis_team_id,\r\n          item.playing_year\r\n        ),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async setTeamInfo(array: Schedule_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        visTeamInfo: await this.getTeamInfo(item.vis_team_id),\r\n        homeTeamInfo: await this.getTeamInfo(item.home_team_id),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamRecordVersus(\r\n    teamOneId: number,\r\n    teamTwoId: number,\r\n    season: string\r\n  ) {\r\n    const versus = await this.repo\r\n      .createQueryBuilder('schedule')\r\n      .where('schedule.playing_year = :year', { year: season })\r\n      .where(\r\n        new Brackets((qb) => {\r\n          qb.where('schedule.vis_team_id = :teamOneId', { teamOneId })\r\n            .andWhere('schedule.home_team_id = :teamTwoId', { teamTwoId })\r\n            .andWhere('schedule.playing_year = :year', { year: season })\r\n            .andWhere('schedule.vis_team_score >= :empty', { empty: 0 });\r\n        })\r\n      )\r\n      .orWhere(\r\n        new Brackets((qb) => {\r\n          qb.where('schedule.vis_team_id = :teamTwoId', { teamTwoId })\r\n            .andWhere('schedule.home_team_id = :teamOneId', { teamOneId })\r\n            .andWhere('schedule.playing_year = :year', { year: season })\r\n            .andWhere('schedule.vis_team_score >= :empty', { empty: 0 });\r\n        })\r\n      )\r\n      .getMany();\r\n\r\n    return await this.getVersusRecord(versus, teamOneId);\r\n  }\r\n\r\n  private async getTeamSeasonRecord(teamId: number, season: string) {\r\n    return await this.teamStatsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n      },\r\n      where: {\r\n        team_id: {\r\n          id: teamId,\r\n        },\r\n        playing_year: season,\r\n        season_type: 'Regular',\r\n      },\r\n    });\r\n  }\r\n\r\n  private async getTeamInfo(teamId: number) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n        teamcolor: true,\r\n      },\r\n      where: {\r\n        id: teamId,\r\n      },\r\n    });\r\n  }\r\n}\r\n","export * from './api-schedule.service';","export * from './lib/api-team-stats.module';","import { Team_Stats_V2, Teams_V2, Conferences_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TeamStatsController } from './controllers';\nimport { TeamStatsMiddleware } from './middlewares';\nimport {\n  ApiAllTimeTeamStatsService,\n  ApiTeamStatsService,\n  ApiUserTeamStatsService,\n} from './services';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Team_Stats_V2, Teams_V2, Conferences_V2]),\n  ],\n  controllers: [TeamStatsController],\n  providers: [\n    ApiTeamStatsService,\n    ApiAllTimeTeamStatsService,\n    ApiUserTeamStatsService,\n  ],\n})\nexport class ApiTeamStatsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(TeamStatsMiddleware).forRoutes('*');\n  }\n}\n","export * from './team-stats.controller';\r\n","import { Team_Stats_V2 } from '@api/entities';\nimport {\n  StatTeamsHistoryDto,\n  StatUserTeamRecordDto,\n} from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport {\n  ApiAllTimeTeamStatsService,\n  ApiTeamStatsService,\n  ApiUserTeamStatsService,\n} from '../services';\n\n@Controller('team-stats')\nexport class TeamStatsController {\n  constructor(\n    private teamsStatsService: ApiTeamStatsService,\n    private allTimeTeamsStatsService: ApiAllTimeTeamStatsService,\n    private userTeamStatsService: ApiUserTeamStatsService\n  ) {}\n\n  @Get('/:season/:seasonType')\n  async getTeamStatsBySeasonByType(@Param() param): Promise<Team_Stats_V2[]> {\n    const stats = await this.teamsStatsService.getTeamStatsBySeasonByType(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Team Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/all/:season/:seasonType')\n  async getAllTeamStatsBySeasonByType(\n    @Param() param\n  ): Promise<Team_Stats_V2[]> {\n    const stats = await this.teamsStatsService.getAllTeamStatsBySeasonByType(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Team Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/playoffs/:season/:seasonType')\n  async getTeamStandingsForPlayoffs(@Param() param): Promise<Team_Stats_V2[]> {\n    const stats = await this.teamsStatsService.getTeamStandingsForPlayoffs(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Team Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/season/:seasonType')\n  async getAllTimeTeamStatsBySeasonByType(\n    @Param() param\n  ): Promise<StatTeamsHistoryDto[]> {\n    const stats =\n      await this.allTimeTeamsStatsService.getAllTimeTeamStatsBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Team Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/all-time/:seasonType')\n  async getAllTimeTeamStatsSummedBySeasonByType(\n    @Param() param\n  ): Promise<StatTeamsHistoryDto[]> {\n    const stats =\n      await this.allTimeTeamsStatsService.getAllTimeTeamStatsSummedBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Team Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/user/:teamId/record/:season/:seasonType/')\n  async getUserTeamRecordBySeasonBySeasonType(\n    @Param() param\n  ): Promise<StatUserTeamRecordDto> {\n    const record =\n      await this.userTeamStatsService.getUserTeamRecordBySeasonBySeasonType(\n        param.teamId,\n        param.season,\n        param.seasonType\n      );\n\n    if (!record) {\n      throw new NotFoundException('User Team Stats not found');\n    }\n    return record;\n  }\n\n  @Get('/user/:userId/history/:seasonType')\n  async getUserTeamStatsBySeasonType(\n    @Param() param\n  ): Promise<StatUserTeamRecordDto> {\n    const record =\n      await this.userTeamStatsService.getUserTeamStatsBySeasonType(\n        param.userId,\n        param.seasonType\n      );\n\n    if (!record) {\n      throw new NotFoundException('User Team Stats not found');\n    }\n    return record;\n  }\n}\n","export * from './team-stats.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class TeamStatsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Team Stats...');\r\n    next();\r\n  }\r\n}\r\n","import { Team_Stats_V2 } from '@api/entities';\r\nimport { StatTeamsHistoryDto } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, MoreThan, DataSource } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiAllTimeTeamStatsService {\r\n  constructor(\r\n    @InjectRepository(Team_Stats_V2)\r\n    private repo: Repository<Team_Stats_V2>,\r\n    @InjectDataSource() private dataSource: DataSource\r\n  ) {}\r\n\r\n  async getAllTimeTeamStatsBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatTeamsHistoryDto[]> {\r\n    const allTimeStats = await this.repo.find({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          shortname: true,\r\n          nickname: true,\r\n        },\r\n        games_played: true,\r\n        points: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        penalty_minutes: true,\r\n        goals_for: true,\r\n        goals_against: true,\r\n        pk_goals: true,\r\n        pk_attempts: true,\r\n        pp_goals: true,\r\n        pp_attempts: true,\r\n        sh_goals: true,\r\n        playing_year: true,\r\n        season_type: true,\r\n        shut_outs: true,\r\n        face_off_won: true,\r\n        face_off_lost: true,\r\n        corner_won: true,\r\n        corner_lost: true,\r\n        pass_complete: true,\r\n        pass_incomplete: true,\r\n      },\r\n      where: {\r\n        season_type: seasonType,\r\n        games_played: MoreThan(0),\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n    });\r\n\r\n    const allTimeStatsConverted = await this.convertStats(allTimeStats, false);\r\n\r\n    return allTimeStatsConverted;\r\n  }\r\n\r\n  async getAllTimeTeamStatsSummedBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatTeamsHistoryDto[]> {\r\n    const result = await this.dataSource.query(\r\n      ` select\r\n      a.team_id as team_id,\r\n      a.season_type as season_type, \r\n      c.city as city, \r\n      c.nickname as nickname,\r\n      c.shortname,\r\n      c.teamlogo,\r\n      c.isactive,\r\n      sum(games_played) as games_played, \r\n      sum(wins) as wins, \r\n      sum(loss) as loss, \r\n      sum(ties) as ties, \r\n      sum(points) as points, \r\n      sum(goals_for) as goals_for, \r\n      sum(goals_against) as goals_against, \r\n      sum(pp_attempts) as pp_attempts, \r\n      sum(pp_goals) as pp_goals, \r\n      sum(pk_attempts) as pk_attempts, \r\n      sum(pk_goals) as pk_goals, \r\n      sum(sh_goals) as sh_goals, \r\n      sum(penalty_minutes) as penalty_minutes, \r\n      sum(shots_for) as shots_for, \r\n      sum(shots_against) as shots_against, \r\n      sum(shut_outs) as shut_outs,\r\n      sum(face_off_won) as face_off_won,\r\n      sum(face_off_lost) as face_off_lost,\r\n      sum(corner_won) as corner_won,\r\n      sum(corner_lost) as corner_lost,\r\n      sum(pass_complete) as pass_complete,\r\n      sum(pass_incomplete) as pass_incomplete\r\n      from\r\n      team_stats_v2 as a\r\n      left join teams_v2 as c\r\n      on c.id = a.team_id\r\n      where a.season_type = '${seasonType}'\r\n      group by a.team_id, a.season_type, c.city, c.nickname, c.shortname, c.teamlogo, c.isactive\r\n      order by points DESC`\r\n    );\r\n\r\n    const allTimeStatsConverted = await this.convertStats(result, true);\r\n\r\n    return allTimeStatsConverted;\r\n  }\r\n\r\n  private async convertStats(array: any[], raw: boolean) {\r\n    return await Promise.all(\r\n      array.map((stat: any) => ({\r\n        goalsForPerGame: Number(\r\n          (stat.goals_for / stat.games_played).toFixed(2)\r\n        ),\r\n        goalsAgainstPerGame: Number(\r\n          (stat.goals_against / stat.games_played).toFixed(2)\r\n        ),\r\n        goalDiff: stat.goals_for - stat.goals_against,\r\n        winPct: Number(((stat.wins / stat.games_played) * 100).toFixed(1)),\r\n        ppPct: Number(((stat.pp_goals / stat.pp_attempts) * 100).toFixed(1)),\r\n        pkPct: Number(\r\n          (\r\n            ((stat.pk_attempts - stat.pk_goals) / stat.pk_attempts) *\r\n            100\r\n          ).toFixed(1)\r\n        ),\r\n        foPct: Number(\r\n          this.getPct(Number(stat.face_off_won), Number(stat.face_off_lost)).toFixed(1)\r\n        ),\r\n        passPct: Number(\r\n          this.getPct(Number(stat.pass_complete), Number(stat.pass_incomplete)).toFixed(1)\r\n        ),\r\n        cornerPct: Number(\r\n          this.getPct(Number(stat.corner_won), Number(stat.corner_lost)).toFixed(1)\r\n        ),\r\n        pimPerGame: Number(\r\n          (stat.penalty_minutes / stat.games_played).toFixed(1)\r\n        ),\r\n        team_name: raw\r\n          ? `${stat.city} ${stat.nickname}`\r\n          : `${stat.team_id.city} ${stat.team_id.nickname}`,\r\n        team_id: !raw\r\n          ? stat.team_id\r\n          : {\r\n              id: stat.team_id,\r\n              city: stat.city,\r\n              teamlogo: stat.teamlogo,\r\n              shortname: stat.shortname,\r\n              nickname: stat.nickname,\r\n            },\r\n        games_played: Number(stat.games_played),\r\n        wins: Number(stat.wins),\r\n        loss: Number(stat.loss),\r\n        ties: Number(stat.ties),\r\n        points: Number(stat.points),\r\n        goals_for: Number(stat.goals_for),\r\n        goals_against: Number(stat.goals_against),\r\n        shots_against: Number(stat.shots_against),\r\n        shots_for: Number(stat.shots_for),\r\n        pp_goals: Number(stat.pp_goals),\r\n        pp_attempts: Number(stat.pp_attempts),\r\n        pk_goals: Number(stat.pk_goals),\r\n        pk_attempts: Number(stat.pk_attempts),\r\n        sh_goals: Number(stat.sh_goals),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        face_off_won: Number(stat.face_off_won),\r\n        face_off_lost: Number(stat.face_off_lost),\r\n        corner_won: Number(stat.corner_won),\r\n        corner_lost: Number(stat.corner_lost),\r\n        pass_complete: Number(stat.pass_complete),\r\n        pass_incomplete: Number(stat.pass_incomplete),\r\n        shut_outs: Number(stat.shut_outs),\r\n        season_type: stat.season_type,\r\n        playing_year: stat.playing_year,\r\n      }))\r\n    );\r\n  }\r\n\r\n  private getPct(high: number, low: number): number {\r\n    const total = high + low;\r\n    return (high / total) * 100;\r\n  }\r\n}\r\n","import { Conferences_V2, Team_Stats_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiTeamStatsService {\r\n  constructor(\r\n    @InjectRepository(Team_Stats_V2)\r\n    private repo: Repository<Team_Stats_V2>,\r\n    @InjectRepository(Conferences_V2)\r\n    private conferencesRepo: Repository<Conferences_V2>\r\n  ) {}\r\n\r\n  async getTeamStatsBySeasonByType(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<Team_Stats_V2[]> {\r\n    return await this.repo.find({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          shortname: true,\r\n          nickname: true,\r\n        },\r\n        games_played: true,\r\n        points: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        long_win_streak: true,\r\n        penalty_minutes: true,\r\n        goals_for: true,\r\n        goals_against: true,\r\n        pk_goals: true,\r\n        pk_attempts: true,\r\n        pp_goals: true,\r\n        pp_attempts: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getAllTeamStatsBySeasonByType(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<Team_Stats_V2[]> {\r\n    const teamStats = await this.repo.find({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          shortname: true,\r\n          nickname: true,\r\n          divisions_id: {\r\n            id: true,\r\n            divisionname: true,\r\n            conference_id: true,\r\n          },\r\n        },\r\n        div_loss: true,\r\n        div_tie: true,\r\n        div_win: true,\r\n        games_played: true,\r\n        goals_against: true,\r\n        goals_for: true,\r\n        home_loss: true,\r\n        home_ties: true,\r\n        home_wins: true,\r\n        loss: true,\r\n        penalty_minutes: true,\r\n        pk_attempts: true,\r\n        pk_goals: true,\r\n        pk_min: true,\r\n        playing_year: true,\r\n        points: true,\r\n        pp_attempts: true,\r\n        pp_goals: true,\r\n        road_loss: true,\r\n        road_ties: true,\r\n        road_wins: true,\r\n        season_type: true,\r\n        ties: true,\r\n        trail_after_two_loss: true,\r\n        trail_after_two_ties: true,\r\n        trail_after_two_wins: true,\r\n        wins: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n    });\r\n\r\n    const teamStatsWithConference = await this.setConferenceInfo(teamStats);\r\n\r\n    return teamStatsWithConference;\r\n  }\r\n\r\n  async getTeamStandingsForPlayoffs(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<Team_Stats_V2[]> {\r\n    const teamStats = await this.repo.find({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          teamcolor: true,\r\n          shortname: true,\r\n          nickname: true,\r\n          divisions_id: {\r\n            id: true,\r\n            divisionname: true,\r\n            conference_id: true,\r\n          },\r\n        },\r\n        goals_against: true,\r\n        goals_for: true,\r\n        playing_year: true,\r\n        points: true,\r\n        season_type: true,\r\n        wins: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n    });\r\n\r\n    const teamStatsWithConference = await this.setConferenceInfo(teamStats);\r\n\r\n    const teamStatsWithConferenceSorted = await this.sortTeamStatsByStandings(\r\n      teamStatsWithConference\r\n    );\r\n\r\n    return teamStatsWithConferenceSorted;\r\n  }\r\n\r\n  private async setConferenceInfo(array: Team_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        conference: await this.getConferenceInfo(\r\n          item.team_id.divisions_id.conference_id\r\n        ),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getConferenceInfo(conferenceId: number) {\r\n    return await this.conferencesRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        conferencename: true,\r\n      },\r\n      where: {\r\n        id: conferenceId,\r\n      },\r\n    });\r\n  }\r\n\r\n  private sortTeamStatsByStandings = (data) => {\r\n    return data\r\n      .sort((a: any, b: any) => {\r\n        if (b.points === a.points) {\r\n          if (b.wins === a.wins) {\r\n            if (\r\n              b.goals_for - b.goals_against ===\r\n              a.goals_for - a.goals_against\r\n            ) {\r\n              return b.goals_for - a.goals_for;\r\n            } else {\r\n              return (\r\n                b.goals_for - b.goals_against - (a.goals_for - a.goals_against)\r\n              );\r\n            }\r\n          } else {\r\n            return b.wins - a.wins;\r\n          }\r\n        } else {\r\n          return b.points - a.points;\r\n        }\r\n      });\r\n  };\r\n}\r\n","import { Teams_V2, Team_Stats_V2 } from '@api/entities';\r\nimport { StatUserTeamRecordDto } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { MoreThan, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiUserTeamStatsService {\r\n  constructor(\r\n    @InjectRepository(Team_Stats_V2)\r\n    private repo: Repository<Team_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamsRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getUserTeamRecordBySeasonBySeasonType(\r\n    teamId: number,\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatUserTeamRecordDto> {\r\n    return await this.repo.findOne({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          shortname: true,\r\n          nickname: true,\r\n        },\r\n        id: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        points: true,\r\n        home_wins: true,\r\n        home_loss: true,\r\n        home_ties: true,\r\n        road_wins: true,\r\n        road_loss: true,\r\n        road_ties: true,\r\n        div_win: true,\r\n        div_loss: true,\r\n        div_tie: true,\r\n      },\r\n      where: {\r\n        team_id: {\r\n          id: teamId,\r\n        },\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getUserTeamStatsBySeasonType(\r\n    userId: number,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<any> {\r\n    const userTeams = await this.teamsRepo.findBy({ users_id: userId });\r\n\r\n    const userTeamsWithTeamStats = await this.setTeamStats(\r\n      userTeams,\r\n      seasonType\r\n    );\r\n\r\n    const userTeamsWithTeamStatsConverted = await this.setConvertedTeamStats(\r\n      userTeamsWithTeamStats\r\n    );\r\n\r\n    return userTeamsWithTeamStatsConverted;\r\n  }\r\n\r\n  private async setConvertedTeamStats(array: any[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamStats: await this.convertStats(item.teamStats),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async setTeamStats(\r\n    array: Teams_V2[],\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamStats: await this.getTeamStats(item.id, seasonType),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamStats(\r\n    teamId: number,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await this.repo.find({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          shortname: true,\r\n          nickname: true,\r\n        },\r\n        id: true,\r\n        games_played: true,\r\n        points: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        penalty_minutes: true,\r\n        goals_for: true,\r\n        goals_against: true,\r\n        pk_goals: true,\r\n        pk_attempts: true,\r\n        pp_goals: true,\r\n        pp_attempts: true,\r\n        sh_goals: true,\r\n        playing_year: true,\r\n        season_type: true,\r\n        shut_outs: true,\r\n        face_off_won: true,\r\n        face_off_lost: true,\r\n        corner_won: true,\r\n        corner_lost: true,\r\n        pass_complete: true,\r\n        pass_incomplete: true,\r\n        shots_against: true,\r\n        shots_for: true\r\n      },\r\n      where: {\r\n        team_id: {\r\n          id: teamId,\r\n        },\r\n        games_played: MoreThan(0),\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        playing_year: 'DESC'\r\n      }\r\n    });\r\n  }\r\n\r\n  private async convertStats(array: any[]) {\r\n    return await Promise.all(\r\n      array.map((stat: any) => ({\r\n        goalsForPerGame: Number(\r\n          (stat.goals_for / stat.games_played).toFixed(2)\r\n        ),\r\n        goalsAgainstPerGame: Number(\r\n          (stat.goals_against / stat.games_played).toFixed(2)\r\n        ),\r\n        goalDiff: stat.goals_for - stat.goals_against,\r\n        winPct: Number(((stat.wins / stat.games_played) * 100).toFixed(1)),\r\n        ppPct: Number(((stat.pp_goals / stat.pp_attempts) * 100).toFixed(1)),\r\n        pkPct: Number(\r\n          (\r\n            ((stat.pk_attempts - stat.pk_goals) / stat.pk_attempts) *\r\n            100\r\n          ).toFixed(1)\r\n        ),\r\n        foPct: Number(\r\n          this.getPct(\r\n            Number(stat.face_off_won),\r\n            Number(stat.face_off_lost)\r\n          ).toFixed(1)\r\n        ),\r\n        passPct: Number(\r\n          this.getPct(\r\n            Number(stat.pass_complete),\r\n            Number(stat.pass_incomplete)\r\n          ).toFixed(1)\r\n        ),\r\n        cornerPct: Number(\r\n          this.getPct(\r\n            Number(stat.corner_won),\r\n            Number(stat.corner_lost)\r\n          ).toFixed(1)\r\n        ),\r\n        pimPerGame: Number(\r\n          (stat.penalty_minutes / stat.games_played).toFixed(1)\r\n        ),\r\n        team_name: `${stat.team_id.city} ${stat.team_id.nickname}`,\r\n        team_id: stat.team_id,\r\n        games_played: Number(stat.games_played),\r\n        wins: Number(stat.wins),\r\n        loss: Number(stat.loss),\r\n        ties: Number(stat.ties),\r\n        points: Number(stat.points),\r\n        goals_for: Number(stat.goals_for),\r\n        goals_against: Number(stat.goals_against),\r\n        shots_against: Number(stat.shots_against),\r\n        shots_for: Number(stat.shots_for),\r\n        pp_goals: Number(stat.pp_goals),\r\n        pp_attempts: Number(stat.pp_attempts),\r\n        pk_goals: Number(stat.pk_goals),\r\n        pk_attempts: Number(stat.pk_attempts),\r\n        sh_goals: Number(stat.sh_goals),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        face_off_won: Number(stat.face_off_won),\r\n        face_off_lost: Number(stat.face_off_lost),\r\n        corner_won: Number(stat.corner_won),\r\n        corner_lost: Number(stat.corner_lost),\r\n        pass_complete: Number(stat.pass_complete),\r\n        pass_incomplete: Number(stat.pass_incomplete),\r\n        shut_outs: Number(stat.shut_outs),\r\n        season_type: stat.season_type,\r\n        playing_year: stat.playing_year,\r\n      }))\r\n    );\r\n  }\r\n\r\n  private getPct(high: number, low: number): number {\r\n    const total = high + low;\r\n    return (high / total) * 100;\r\n  }\r\n}\r\n","export * from './api-team-stats.service';\r\nexport * from './api-all-time-team-stats.service';\r\nexport * from './api-user-team-stats.service';\r\n","export * from './lib/api-teams.module';\n","import { Teams_V2, Users_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { TeamsController } from './controllers';\nimport { TeamsMiddleware } from './middlewares/teams.middleware';\nimport { TeamsService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Teams_V2, Users_V2])],\n  controllers: [TeamsController],\n  providers: [TeamsService],\n})\nexport class ApiTeamsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(TeamsMiddleware).forRoutes('*');\n  }\n}\n","export * from './teams.controller';\r\n","import { TeamCreateDto, TeamDto } from '@cha/shared/entities';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  NotFoundException,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { TeamsService } from '../services';\n\n@Controller('teams')\nexport class TeamsController {\n  constructor(private teamsService: TeamsService) {}\n\n  @Get('/user/:id')\n  async getUserTeams(@Param() param): Promise<TeamDto[]> {\n    const teams = await this.teamsService.getUserTeams(parseInt(param.id));\n\n    if (!teams || teams.length < 1) {\n      throw new NotFoundException('User Teams not found');\n    }\n    return teams;\n  }\n\n  @Get('/current')\n  async getCurrentTeams(): Promise<TeamDto[]> {\n    const teams = await this.teamsService.getCurrentTeams();\n\n    if (!teams || teams.length < 1) {\n      throw new NotFoundException('No Current Teams found');\n    }\n    return teams;\n  }\n\n  @Get('/:teamId')\n  async getUserByTeamId(@Param() param): Promise<{ user }> {\n    const user = await this.teamsService.getUserByTeamId(param.teamId);\n\n    if (!user) {\n      throw new NotFoundException('No User Found');\n    }\n    return user;\n  }\n\n  @Get('/all')\n  async getTeams(): Promise<TeamDto[]> {\n    const users = await this.teamsService.getAll();\n\n    if (!users || users.length < 1) {\n      throw new NotFoundException('Teams not found');\n    }\n    return users;\n  }\n\n  @Put('/:id')\n  updateTeamById(@Param() param, @Body() body): Promise<TeamDto> {\n    return this.teamsService.updateTeamById(parseInt(param.id), body);\n  }\n\n  @Post('/add')\n  addTeam(@Body() body: TeamCreateDto) {\n    return this.teamsService.addTeam(body);\n  }\n\n  @Delete('/delete/:id')\n  deleteTeamById(@Param() param) {\n    return this.teamsService.deleteTeam(parseInt(param.id));\n  }\n}\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class TeamsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Teams...');\r\n    next();\r\n  }\r\n}","export * from './teams.service';\r\n","import { Teams_V2, Users_V2 } from '@api/entities';\r\nimport { TeamCreateDto } from '@cha/shared/entities';\r\nimport { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class TeamsService {\r\n  constructor(\r\n    @InjectRepository(Teams_V2) private repo: Repository<Teams_V2>,\r\n    @InjectRepository(Users_V2) private userRepo: Repository<Users_V2>\r\n  ) {}\r\n\r\n  async getUserTeams(id: number): Promise<Teams_V2[]> {\r\n    return await this.repo.findBy({ users_id: id });\r\n  }\r\n\r\n  async getCurrentTeams(): Promise<Teams_V2[]> {\r\n    return await this.repo.findBy({ isactive: true });\r\n  }\r\n\r\n  async getUserByTeamId(teamId: number): Promise<any> {\r\n    const userId = await this.repo.findOne({\r\n      select: {\r\n        id: true,\r\n        users_id: true,\r\n      },\r\n      where: {\r\n        id: teamId,\r\n      },\r\n    });\r\n\r\n    const user = await this.userRepo.findOne({\r\n      where: {\r\n        id: userId.users_id,\r\n      },\r\n    });\r\n\r\n    return user;\r\n  }\r\n\r\n  async getAll(): Promise<Teams_V2[]> {\r\n    return await this.repo.find();\r\n  }\r\n\r\n  async updateTeamById(id: number, attrs: Partial<Teams_V2>) {\r\n    const team = await this.repo.findOneByOrFail({ id });\r\n\r\n    if (!team) {\r\n      throw new NotFoundException('Team not found');\r\n    }\r\n\r\n    Object.assign(team, attrs);\r\n\r\n    return this.repo.save(team);\r\n  }\r\n\r\n  async addTeam(body: TeamCreateDto) {\r\n    const team = await this.repo.create(body);\r\n\r\n    return this.repo.save(team);\r\n  }\r\n\r\n  async deleteTeam(id: number): Promise<Teams_V2> {\r\n    const team = await this.repo.findOneByOrFail({ id });\r\n\r\n    if (!team) {\r\n      throw new NotFoundException('Team not found');\r\n    }\r\n    return this.repo.remove(team);\r\n  }\r\n}\r\n","export * from './lib/api-transactions.module';\n","import { Players_V2, Teams_V2, Transactions_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TransactionsController } from './controllers';\nimport { TransactionsMiddleware } from './middlewares';\nimport { ApiTransactionsService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Transactions_V2, Teams_V2, Players_V2])],\n  controllers: [TransactionsController],\n  providers: [ApiTransactionsService],\n})\nexport class ApiTransactionsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(TransactionsMiddleware).forRoutes('*');\n  }\n}\n","export * from './transactions.controller';\r\n","import { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { ApiTransactionsService } from '../services';\n\n@Controller('transactions')\nexport class TransactionsController {\n  constructor(private transactionsService: ApiTransactionsService) {}\n\n  @Get('/:season')\n  async getTransactionsBySeason(@Param() param): Promise<any[]> {\n    const stats = await this.transactionsService.getTransactionsBySeason(\n      param.season\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Transactions not found');\n    }\n    return stats;\n  }\n}\n","export * from './transactions.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class TransactionsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Transactions...');\r\n    next();\r\n  }\r\n}\r\n","import { Players_V2, Teams_V2, Transactions_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Between, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiTransactionsService {\r\n  constructor(\r\n    @InjectRepository(Transactions_V2)\r\n    private repo: Repository<Transactions_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>,\r\n    @InjectRepository(Players_V2)\r\n    private playersRepo: Repository<Players_V2>\r\n  ) {}\r\n\r\n  async getTransactionsBySeason(year: string) {\r\n    const season = this.findSeasonDates(year);\r\n\r\n    const transactions = await this.repo.find({\r\n      where: {\r\n        transaction_date: Between(new Date(season.start), new Date(season.end)),\r\n      },\r\n      order: {\r\n        transaction_date: 'DESC',\r\n      },\r\n    });\r\n\r\n    const transactionsTeamInfo = await this.setTransactionInfo(transactions);\r\n\r\n    return transactionsTeamInfo;\r\n  }\r\n\r\n  private async setTransactionInfo(transactions: Transactions_V2[]) {\r\n    return await Promise.all(\r\n      transactions.map(async (transaction: Transactions_V2) => ({\r\n        id: transaction.id,\r\n        transactionDate: transaction.transaction_date,\r\n        teamOneInfo: await this.getTeamInfo(transaction.team_one_id),\r\n        teamOnePlayers: await this.setPlayersInfo(transaction.team_one_players),\r\n        teamOnePicks: transaction.team_one_picks,\r\n        teamTwoInfo: await this.getTeamInfo(transaction.team_two_id),\r\n        teamTwoPlayers: await this.setPlayersInfo(transaction.team_two_players),\r\n        teamTwoPicks: transaction.team_two_picks,\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async setPlayersInfo(array: number[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        player: await this.getPlayerInfo(item),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamId: number) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n        teamcolor: true,\r\n        teamtextcolor: true,\r\n      },\r\n      where: {\r\n        id: teamId,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async getPlayerInfo(playerId: number) {\r\n    return await this.playersRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        firstname: true,\r\n        lastname: true,\r\n        nhl_id: true,\r\n      },\r\n      where: {\r\n        id: playerId,\r\n      },\r\n    });\r\n  }\r\n\r\n  private findSeasonDates(year: string) {\r\n    const seasons = [\r\n      { year: '23', start: '2022-06-02', end: '2023-06-01' },\r\n      { year: '22', start: '2021-07-15', end: '2022-06-01' },\r\n      { year: '21', start: '2020-04-27', end: '2021-07-15' },\r\n    ];\r\n\r\n    return seasons.find((season) => season.year === year);\r\n  }\r\n}\r\n","export * from './api-transactions.service';","export * from './lib/api-users.module';\n","import { Users_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersController } from './controllers';\nimport { UserMiddleware } from './middlewares';\nimport { UsersService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users_V2])],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class ApiUsersModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(UserMiddleware).forRoutes('*');\n  }\n}\n","export * from './users.controller';\r\n","import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  NotFoundException,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { UsersService } from '../services';\nimport { UserCreateDto, UserDto } from '@cha/shared/entities';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @Get()\n  async getUsers(): Promise<UserDto[]> {\n    const users = await this.usersService.getAll();\n\n    if (!users || users.length < 1) {\n      throw new NotFoundException('users not found');\n    }\n    return users;\n  }\n\n  @Get('/:email')\n  async getUserByEmail(@Param() param): Promise<UserDto> {\n    const user = await this.usersService.findUserByEmail(param.email);\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n    return user;\n  }\n\n  @Get('/userId/:id')\n  async getUserById(@Param() param): Promise<UserDto> {\n    const user = await this.usersService.findUserById(parseInt(param.id));\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n    return user;\n  }\n\n  @Put('/userId/:id')\n  updateUserById(@Param() param, @Body() body): Promise<UserDto> {\n    return this.usersService.updateUserById(parseInt(param.id), body);\n  }\n\n  @Post('/add')\n  addUser(@Body() body: UserCreateDto) {\n    return this.usersService.addUser(body);\n  }\n\n  @Delete('/delete/:id')\n  deleteUserById(@Param() param) {\n    return this.usersService.deleteUser(parseInt(param.id));\n  }\n}\n","export * from './user.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class UserMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request User...');\r\n    next();\r\n  }\r\n}\r\n","export * from './users.service';\r\n","import { Users_V2 } from '@api/entities';\nimport { UserCreateDto } from '@cha/shared/entities';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectRepository(Users_V2) private repo: Repository<Users_V2>) {}\n\n  async findUserByEmail(email: string): Promise<Users_V2> {\n    return await this.repo.findOneByOrFail({ email });\n  }\n\n  async getAll(): Promise<Users_V2[]> {\n    return await this.repo.find();\n  }\n\n  async findUserById(id: number): Promise<Users_V2> {\n    return await this.repo.findOneByOrFail({ id });\n  }\n\n  async updateUserById(id: number, attrs: Partial<Users_V2>) {\n    const user = await this.repo.findOneByOrFail({ id });\n\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n\n    Object.assign(user, attrs);\n\n    return this.repo.save(user);\n  }\n\n  async addUser(body: UserCreateDto) {\n    const user = await this.repo.create(body);\n\n    return this.repo.save(user);\n  }\n\n  async deleteUser(id: number): Promise<Users_V2> {\n    const user = await this.repo.findOneByOrFail({ id });\n\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n    return this.repo.remove(user);\n  }\n}\n","export * from './lib/api-waivers.module';\n","import { Teams_V2, Waivers_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { WaiversController } from './controllers';\nimport { WaiversMiddleware } from './middlewares';\nimport { ApiWaiversService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Waivers_V2, Teams_V2])],\n  controllers: [WaiversController],\n  providers: [ApiWaiversService],\n})\nexport class ApiWaiversModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(WaiversMiddleware).forRoutes('*');\n  }\n}\n","export * from './waivers.controller';\r\n","import { Waivers_V2 } from '@api/entities';\nimport { Controller, Get, NotFoundException } from '@nestjs/common';\nimport { ApiWaiversService } from '../services';\n\n@Controller('waivers')\nexport class WaiversController {\n  constructor(private waiversService: ApiWaiversService) {}\n\n  @Get('/all')\n  async getAllPlayerSalaries(): Promise<Waivers_V2[]> {\n    const salaries = await this.waiversService.getWaiverPriority();\n\n    if (!salaries) {\n      throw new NotFoundException('Waivers not found');\n    }\n    return salaries;\n  }\n}\n","export * from './waivers.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class WaiversMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Waivers...');\r\n    next();\r\n  }\r\n}\r\n","import { Teams_V2, Waivers_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiWaiversService {\r\n  constructor(\r\n    @InjectRepository(Waivers_V2)\r\n    private repo: Repository<Waivers_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamsRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getWaiverPriority() {\r\n    const allWaivers = await this.repo.find();\r\n\r\n    const allWaiverWithTeamInfo = await this.setTeamInfo(allWaivers);\r\n\r\n    return allWaiverWithTeamInfo;\r\n  }\r\n\r\n  private async setTeamInfo(array: any[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_id),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamId: number) {\r\n    if (teamId) {\r\n      return await this.teamsRepo.findOne({\r\n        select: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          nickname: true,\r\n        },\r\n        where: {\r\n          id: teamId,\r\n        },\r\n      });\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n}\r\n","export * from './api-waivers.service';\r\n","export * from './lib/dtos';\n\nexport * from './lib/enums';\n\nexport * from './lib/models';\n","export * from './award.dto';\r\nexport * from './award-stats.dto';\r\nexport * from './award-award-type.dto';\r\nexport * from './user-award.dto';\r\n","export * from './draft-table-stat.dto';\r\nexport * from './draft-table.dto';\r\nexport * from './draft-pick.dto';\r\n","export * from './user';\r\nexport * from './teams';\r\nexport * from './league';\r\nexport * from './awards';\r\nexport * from './player';\r\nexport * from './drafts';\r\nexport * from './nhl';\r\nexport * from './stats';\r\nexport * from './schedule';\r\nexport * from './transactions';\r\nexport * from './salaries';\r\nexport * from './waivers';\r\n","export * from './leagueData.dto';\r\n","export * from './nhl-leaders.dto';\r\nexport * from './nhl-player.dto';\r\nexport * from './nhl-goalie-stat.dto';\r\nexport * from './nhl-player-stat.dto';\r\n","export * from './player.dto';\r\n","export * from './goalie-rating.dto';\r\nexport * from './player-rating.dto';\r\nexport * from './salaries-and-ratings.dto';\r\n","export * from './schedule-all.dto';\r\nexport * from './games.dto';\r\n","export * from './stat-team.dto';\r\nexport * from './stat-player-leader.dto';\r\nexport * from './stat-player-leaders.dto';\r\nexport * from './stat-goalie-leader.dto';\r\nexport * from './stat-goalie-leaders.dto';\r\nexport * from './stat-team-all.dto';\r\nexport * from './stat-player-all.dto';\r\nexport * from './stat-goalie-all.dto';\r\nexport * from './stat-team-playoffs.dto';\r\nexport * from './stat-teams-history';\r\nexport * from './stat-players-history.dto';\r\nexport * from './stat-goalies-history.dto';\r\nexport * from './stat-user-team-record.dto';\r\nexport * from './stat-user-teams-history.dto';\r\nexport * from './stat-user-players-history.dto';\r\nexport * from './stat-user-goalies-history.dto';","export * from './team.dto';\r\n","export * from './get-transaction.dto';\r\n","export * from './user.dto';\r\nexport * from './user.create.dto';\r\n","export class UserCreateDto {\r\n  firstname!: string;\r\n  lastname!: string;\r\n  email!: string;\r\n  isadmin!: boolean;\r\n  isactive!: boolean;\r\n}\r\n","export class UserDto {\r\n  id!: number;\r\n  email!: string;\r\n  firstname!: string;\r\n  lastname!: string;\r\n  isactive!: boolean;\r\n  isadmin!: boolean;\r\n  authdata?: string;\r\n}\r\n","export * from './waivers.dto';","export enum AwardTypeEnum {\r\n  GM = 2,\r\n  CHAMPION = 3,\r\n  SEASON = 4,\r\n  ROOKIE = 5,\r\n  SCORER = 6,\r\n  GOALIE = 7,\r\n  DEFENSE = 8,\r\n}\r\n","export * from './awardType.enum';\r\n","export * from './primeButtonClass.enum';\r\n","export enum PrimeButtonClass {\r\n  PRIMARY = '',\r\n  SECONDARY = 'p-button-secondary',\r\n  SUCCESS = 'p-button-success',\r\n  INFO = 'p-button-info',\r\n  WARNING = 'p-button-warning',\r\n  HELP = 'p-button-help',\r\n  DANGER = 'p-button-danger',\r\n}\r\n","export * from './button';\r\nexport * from './logo';\r\nexport * from './teams';\r\nexport * from './award';\r\nexport * from './league';\r\n","export enum ConferencesEnum {\r\n  EASTERN = 2,\r\n  WESTERN = 3,\r\n}\r\n","export enum DivisionsEnum {\r\n  NORTH_WEST = 2,\r\n  NORTH_EAST = 3,\r\n  SOUTH_WEST = 4,\r\n  SOUTH_EAST = 5,\r\n}\r\n","export * from './conferences.enum';\r\nexport * from './divisions.enum';","export enum ChaLogoEnum {\r\n  ASSASSINS = 'Assassins.png',\r\n  BRAHMAS = 'Brahams.png',\r\n  FIGHTING_COCKS = 'Cocks.png',\r\n  CYCLONES = 'Cyclones.png',\r\n  CHY_DESPERADO = 'Desperado.png',\r\n  DRAGONS = 'Dragons.png',\r\n  FLASHERS = 'Flashers.png',\r\n  FREE_AGENT = 'free_agent.png',\r\n  GLORY = 'Glory.png',\r\n  GOATS = 'Goats.png',\r\n  GREEN_JACKETS = 'GreenJackets.png',\r\n  HOUND_DOGS = 'HoundDogs.png',\r\n  STELLAR_JAYS = 'jays-large.png',\r\n  KILLER_BEES = 'KillerBees.png',\r\n  MOUNTAINEERS = 'Mountaineers.png',\r\n  NORTH_STARS = 'NorthStars.png',\r\n  OIL_BARONS = 'OilBarons.png',\r\n  PROWLERS = 'Prowlers.png',\r\n  SAC_STORM = 'sac_storm.png',\r\n  VIKINGS = 'vikings.png',\r\n  WOLFPACK = 'Wolfpack.png',\r\n\r\n  ACES = 'aces.png',\r\n  BADGERS = 'badgers.png',\r\n  BANDITS = 'bandits.png',\r\n  BARONS = 'barons.png',\r\n  BEAVERS = 'beavers.png',\r\n  CHA_STORM = 'chastorm.png',\r\n  CHUPACABRAS = 'chupacabras.png',\r\n  COMETS = 'comets.png',\r\n  CONQUERERS = 'conquerers.png',\r\n  CRIMSONTIDE = 'crimsontide.png',\r\n  CRUSH = 'crush.png',\r\n  GRAVEDIGGERS = 'gravediggers.png',\r\n  HELLCATS = 'hellcats.png',\r\n  MIS_INDIANS = 'indians.png',\r\n  SAL_INDIANS = 'indians.png',\r\n  JOKERS = 'jokers.png',\r\n  LAS_DESPERADO = 'lasdesperado.png',\r\n  LIONHEARTS = 'lionheats.png',\r\n  LOGGERHEADS = 'loggerheads.png',\r\n  MUDBUGS = 'mudbugs.png',\r\n  OCEANUS = 'oceanus.png',\r\n  OUTLAWS = 'outlaws.png',\r\n  PREDATORS = 'predators.png',\r\n  RAYS = 'rays.png',\r\n  REDNECKS = 'rednecks.png',\r\n  ROYALS = 'royals.png',\r\n  SCHOONERS = 'schooners.png',\r\n  SEA_STORM = 'Storm.png',\r\n  SURGE = 'surge.png',\r\n  THUNDERCATS = 'thundercats.png',\r\n  VIPERS = 'Vipers.png',\r\n  VOODOO = 'voodoo.png',\r\n  WHISKEYJACKS = 'whiskeyjacks.png',\r\n  RUSTLERS = 'rustlers.png',\r\n\r\n  LEAGUE = 'cha_logo.jpg',\r\n}\r\n","export * from './cha-logo.enum';\r\n","export * from './team.enum';\r\n","export enum TeamsEnum {\r\n  FLASHERS = 2,\r\n  GREEN_JACKETS = 3,\r\n  CHY_DESPERADO = 4,\r\n  CYCLONES = 5,\r\n  GLORY = 6,\r\n  GOATS = 7,\r\n  MOUNTAINEERS = 8,\r\n  BRAHMAS = 9,\r\n  HOUND_DOGS = 10,\r\n  ICE_DRAGONS = 11,\r\n  NORTH_STARS = 12,\r\n  ASSASSINS = 13,\r\n  OIL_BARONS = 14,\r\n  PROWLERS = 15,\r\n  FIGHTING_COCKS = 16,\r\n  SEA_STORM = 17,\r\n  STINGRAYS = 18,\r\n  KILLER_BEES = 19,\r\n  VIPERS = 20,\r\n  WOLFPACK = 21,\r\n  MUDBUGS = 22,\r\n  CHA_STORM = 23,\r\n  SURGE = 24,\r\n  LAS_DESPERADO = 25,\r\n  OUTLAWS = 26,\r\n  OCEANUS = 27,\r\n  ACES = 28,\r\n  HONEY_BADGERS = 29,\r\n  BANDITS = 30,\r\n  BARONS = 31,\r\n  CHUPACABRAS = 32,\r\n  CONQUERERS = 33,\r\n  CRUSH = 34,\r\n  HELLCATS = 35,\r\n  MISS_INDIANS = 36,\r\n  SAL_INDIANS = 37,\r\n  JOKERS = 38,\r\n  LIONHEARTS = 39,\r\n  LOGGERHEADS = 40,\r\n  PREDATORS = 41,\r\n  REDNECKS = 42,\r\n  ROYALS = 43,\r\n  RUSTLERS = 44,\r\n  SCHOONERS = 45,\r\n  THUNDERCATS = 46,\r\n  VOODOO = 47,\r\n  WHISKEYJACKS = 48,\r\n  CRIMSONTIDE = 49,\r\n  BEAVERS = 50,\r\n  COMETS = 51,\r\n  GRAVE_DIGGERS = 52,\r\n  STELLAR_JAYS = 53,\r\n  FREE_AGENT = 54,\r\n  VIKINGS = 60,\r\n  SAC_STORM = 61,\r\n}\r\n","export * from './playoffs';\r\nexport * from './salaries';","export * from './playoff-standings.model';\r\n","export * from './player-salary.model';","module.exports = require(\"@nestjs/axios\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"rxjs\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { NestExpressApplication } from '@nestjs/platform-express';\n\nimport { join } from 'path';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestExpressApplication>(AppModule);\n  const globalPrefix = 'api';\n  const port = process.env.PORT || 3333;\n\n  console.log(process.env.DATABASE_URL);\n\n  app.setGlobalPrefix(globalPrefix);\n  app.useStaticAssets(join(__dirname, '..', 'public'));\n  app.setBaseViewsDir(join(__dirname, 'assets/views'));\n  app.setViewEngine('hbs');\n  app.enableCors();\n\n  app.use((req, res, next) => {\n    next();\n  });\n\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":["AppController","root","message","Get","Render","Controller","AppModule","Module","imports","ConfigModule","forRoot","isGlobal","envFilePath","TypeOrmModule","type","url","process","env","DATABASE_URL","synchronize","entities","Users_V2","Teams_V2","Award_Type_V2","Awards_V2","Draft_Order_V2","Drafts_V2","Conferences_V2","Current_Season_V2","Divisions_V2","Players_V2","Goalie_Ratings_V2","Player_Ratings_V2","Salaries_V2","Schedule_V2","Goalies_Stats_V2","Players_Stats_V2","Team_Stats_V2","Transactions_V2","Waivers_V2","ssl","rejectUnauthorized","ApiCoreModule","controllers","providers","AppService","getData","getViewName","Injectable","ApiAwardsModule","configure","consumer","apply","AwardsMiddleware","forRoutes","forFeature","AwardsController","ApiAwardsService","ApiUserAwardsService","constructor","awardsService","userAwardsService","async","champions","this","getChampions","length","NotFoundException","scorers","getScorerAwards","defense","getDefenseAwards","rookies","getRookieAwards","goalies","getGoalieAwards","gms","getGmAwards","season","getSeasonAwards","param","awardsByUser","getAwardsByUserId","userId","Promise","Param","use","req","res","next","console","log","repo","playerStatsRepo","goalieStatsRepo","teamStatsRepo","selectUserOptions","id","display_season","cha_season","award_type","display_name","team_id","city","nickname","teamlogo","teamcolor","users_id","firstname","lastname","selectPlayerOptions","player_id","nhl_id","find","select","relations","where","AwardTypeEnum","CHAMPION","SCORER","setPlayerStats","DEFENSE","ROOKIE","GOALIE","setGoalieStats","GM","seasonAwards","SEASON","setSeasonStats","array","all","map","item","stats","getPlayerStats","playerId","chaSeason","findOne","playing_year","games_played","goals","assists","points","season_type","getGoalieStats","isgoalie","is_protected","isactive","isdefense","isforward","wins","goals_against_avg","save_pct","getSeasonStats","teamId","goals_for","goals_against","InjectRepository","Repository","teamtextcolor","order","ApiUsersModule","ApiDraftTableModule","ApiEntryDraftModule","ApiGoalieStatsModule","ApiLeagueModule","ApiNhlModule","ApiPlayerInfoModule","ApiPlayerRatingsModule","ApiPlayerStatsModule","ApiSalariesModule","ApiScheduleModule","ApiTeamStatsModule","ApiTeamsModule","ApiTransactionsModule","ApiWaiversModule","exports","DraftTableMiddleware","DraftTableController","ApiDraftTableService","draftTableService","draftTable","getDraftTableByYearByStandings","draft_year","getDraftByStandings","data","sort","a","b","reverse","draftYear","playingYear","shortname","draftTableWithStandings","setTableStandings","getTeamStats","PrimaryGeneratedColumn","Column","Entity","OneToOne","playerStats","award","JoinColumn","name","ManyToOne","user","team","player","orderBy","Relation","eager","logInsert","logUpdate","logRemove","OneToMany","goalieStats","salary","draft","goalieRating","playerRating","AfterInsert","AfterUpdate","AfterRemove","division","Date","EntryDraftMiddleware","EntryDraftController","ApiEntryDraftService","draftService","entries","getAll","draft_round","draft_overall","GoalieStatsMiddleware","GoalieStatsController","ApiGoalieStatsService","ApiGoalieStatsLeadersService","ApiGoalieAllTimeStatsService","ApiUserGoalieStatsService","goalieStatsLeadersService","goalieStatsService","goalieAllTimeStatsService","userGoalieStatsService","getGoalieStatsLeaders","seasonType","minGames","getAllGoalieStats","getGoalieStatsByPlayerId","getAllTimeGoalieStatsBySeasonByType","getAllTimeGoalieStatsSummedBySeasonByType","record","getUserGoaliesStatsBySeasonType","getUserGoaliesStatsAllTimeBySeasonType","teamInfoRepo","dataSource","allStats","team_name","minutes_played","loss","ties","shutouts","saves","shots_for","penalty_minutes","MoreThan","allStatsWithTeamInfo","setTeamInfo","convertStats","result","query","teamInfo","getTeamInfo","teamName","raw","stat","Number","toFixed","InjectDataSource","DataSource","shotsFaced","getShotsFacedLeaders","gaa","getGaaLeaders","savePct","getSavePctLeaders","getShutoutLeaders","getWinsLeaders","shotsFacedLeaders","take","gaaLeaders","savePctLeaders","shutoutLeaders","winLeaders","allGoalieStats","en_goals","pass_pct","goalieStatsWithTeamInfo","userTeams","findBy","userTeamsWithGoalieStats","setConvertedGoaliesStats","setGoalieAllTimeStats","getGoalieAllTimeStats","teamShortName","LeagueMiddleware","LeagueController","LeagueService","leagueService","getCurrentLeagueData","NhlMiddleware","HttpModule","NhlController","ApiNhlService","nhlService","nhlLeaders","getNhlLeaders","playerType","statType","getNhlGoalieLeaders","getNhlRookieLeaders","getNhlDefenseLeaders","getNhlSummaryFromSportsnet","getNhlRookieSummary","statsType","start","pageSize","getNhlPlayerStatsByPlayerId","httpService","nhlCOM","nhlAPI","nhlComSummary","sportsNet","get","pipe","response","splits","HttpService","PlayerInfoController","getAllPlayers","getPlayerInfoById","getGoalieInfoById","getPlayerLogoByNhlId","getGoalieLogoByNhlId","getActivePlayers","getPlayerForEditById","updatePlayerById","body","addPlayer","deletePlayer","Put","Body","Post","Delete","PlayerRatingsController","PlayerStatsMiddleware","PlayerStatsController","ApiPlayerStatsService","ApiPlayerLeadersStatsService","ApiPlayerAllTimeStatsService","ApiUserPlayerStatsService","playerLeaderStatsService","playerStatsService","playerAllTimeStatsService","userPlayersStatsService","getPlayerStatsLeaders","getAllStats","getPlayerStatsByPlayerId","getAllTimePlayerStatsBySeasonByType","getAllTimePlayerStatsSummedBySeasonByType","getUserPlayerStatsBySeasonType","getUserPlayerStatsAllTimeBySeasonType","position","plus_minus","pp_goals","sh_goals","gw_goals","shots","shooting_pct","minutes_per_game","fo_pct","corner_pct","hit_per_game","blocked_shots","pointsPerSixty","hits","getHitsLeaders","getPointsLeaders","getAssistLeaders","bestPlusMinus","getBestPlusMinusLeaders","blockedShots","getblockedShotLeaders","currStreak","getCurrSteakLeaders","getDefenseLeaders","getGoalLeaders","longStreak","getLongStreakLeaders","minutes","getMinutesLeaders","penalties","getPenaltyLeaders","ppGoals","getPpgoalsLeaders","getRookieLeaders","shGoals","getShGoalsLeaders","getShotsLeaders","hitsLeaders","pointsLeaders","assistLeaders","bestPlusMinusLeaders","blockedShotLeaders","currStreakLeaders","current_points_streak","defenseLeaders","goalLeaders","longStreakLeaders","longest_points_streak","minutesLeaders","penaltyLeaders","ppGoalsLeaders","rookieLeaders","player_status","shGoalsLeaders","shotsLeaders","gt_goals","userTeamsWithPlayerStats","setConvertedPlayersStats","setPlayerAllTimeStats","getPlayerAllTimeStats","SalariesMiddleware","SalariesController","ApiSalariesService","salariesService","salaries","getAllPlayerSalaries","getAllGoaliesSalaries","getUserTeamPlayerSalaries","ratingsSeason","getUserTeamGoaliesSalaries","teamsRepo","playersRepo","playersStatsRepo","playerRatingsRepo","goaliesStatsRepo","goalieRatingsRepo","allPlayersInSeason","allSalariesForPlayersInSeason","setPlayersSalaries","allSalariesAndRatingsForPlayersInSeason","setPlayerRating","allGoaliesInSeason","allSalariesForGoaliesInSeason","allSalariesAndRatingsForGoaliesInSeason","setGoalieRating","allSalariesRatingsNHLStatsForPlayersInSeason","setNHLStats","getSalary","season_2022","season_2023","season_2024","season_2025","toString","ratings","getPlayerRating","getGoalieRating","passing","speed","skating","c_rate","l_rate","r_rate","ld_rate","rd_rate","shooting","face_off","forecheck","assist_rating","clear_crease","shot_block","pk","physical","rock","intimidation","game_fatigue","shift_fatigue","nhlStats","firstValueFrom","ScheduleMiddleware","ScheduleController","ApiScheduleService","scheduleService","getCompleteScheduleBySeason","getNextDays","currentDay","schedule","game_day","Between","setTeamNextInfo","lastFive","createQueryBuilder","year","andWhere","Brackets","qb","orWhere","limit","getMany","getLastFiveRecord","lastFiveRecord","forEach","home_team_id","home_team_score","vis_team_score","push","game","vis_team_id","gameDay","visTeamScore","visTeamInfo","visTeamLastFive","getTeamLastFive","visTeamRecord","getTeamSeasonRecord","visTeamVersus","getTeamRecordVersus","homeTeamScore","homeTeamInfo","homeTeamLastFive","homeTeamRecord","homeTeamVersus","teamOneId","teamTwoId","versus","empty","getVersusRecord","TeamStatsMiddleware","TeamStatsController","ApiTeamStatsService","ApiAllTimeTeamStatsService","ApiUserTeamStatsService","teamsStatsService","allTimeTeamsStatsService","userTeamStatsService","getTeamStatsBySeasonByType","getAllTeamStatsBySeasonByType","getTeamStandingsForPlayoffs","getAllTimeTeamStatsBySeasonByType","getAllTimeTeamStatsSummedBySeasonByType","getUserTeamRecordBySeasonBySeasonType","getUserTeamStatsBySeasonType","allTimeStats","pk_goals","pk_attempts","pp_attempts","shut_outs","face_off_won","face_off_lost","corner_won","corner_lost","pass_complete","pass_incomplete","goalsForPerGame","goalsAgainstPerGame","goalDiff","winPct","ppPct","pkPct","foPct","getPct","passPct","cornerPct","pimPerGame","shots_against","high","low","conferencesRepo","sortTeamStatsByStandings","long_win_streak","teamStats","divisions_id","divisionname","conference_id","div_loss","div_tie","div_win","home_loss","home_ties","home_wins","pk_min","road_loss","road_ties","road_wins","trail_after_two_loss","trail_after_two_ties","trail_after_two_wins","setConferenceInfo","teamStatsWithConference","conference","getConferenceInfo","conferenceId","conferencename","userTeamsWithTeamStats","setTeamStats","setConvertedTeamStats","TeamsMiddleware","TeamsController","TeamsService","teamsService","teams","getUserTeams","parseInt","getCurrentTeams","getUserByTeamId","users","updateTeamById","addTeam","deleteTeamById","deleteTeam","TeamCreateDto","userRepo","attrs","findOneByOrFail","Object","assign","save","create","remove","TransactionsMiddleware","TransactionsController","ApiTransactionsService","transactionsService","getTransactionsBySeason","findSeasonDates","transactions","transaction_date","end","setTransactionInfo","transaction","transactionDate","teamOneInfo","team_one_id","teamOnePlayers","setPlayersInfo","team_one_players","teamOnePicks","team_one_picks","teamTwoInfo","team_two_id","teamTwoPlayers","team_two_players","teamTwoPicks","team_two_picks","getPlayerInfo","UserMiddleware","UsersController","UsersService","usersService","findUserByEmail","email","findUserById","updateUserById","addUser","deleteUserById","deleteUser","UserCreateDto","WaiversMiddleware","WaiversController","ApiWaiversService","waiversService","getWaiverPriority","allWaivers","PrimeButtonClass","ConferencesEnum","DivisionsEnum","ChaLogoEnum","TeamsEnum","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","port","PORT","setGlobalPrefix","useStaticAssets","join","__dirname","setBaseViewsDir","setViewEngine","enableCors","listen","Logger","bootstrap"],"sourceRoot":""}