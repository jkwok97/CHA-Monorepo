{"version":3,"file":"main.js","mappings":"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","sources":["webpack://cha-hockey/./apps/cha-server/src/app/app.controller.ts","webpack://cha-hockey/./apps/cha-server/src/app/app.module.ts","webpack://cha-hockey/./apps/cha-server/src/app/app.service.ts","webpack://cha-hockey/./libs/api/awards/src/index.ts","webpack://cha-hockey/./libs/api/awards/src/lib/api-awards.module.ts","webpack://cha-hockey/./libs/api/awards/src/lib/controllers/awards.controller.ts","webpack://cha-hockey/./libs/api/awards/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/awards/src/lib/middlewares/awards.middleware.ts","webpack://cha-hockey/./libs/api/awards/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/awards/src/lib/services/api-awards.service.ts","webpack://cha-hockey/./libs/api/awards/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/core/src/index.ts","webpack://cha-hockey/./libs/api/core/src/lib/api-core.module.ts","webpack://cha-hockey/./libs/api/draft-table/src/index.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/api-draft-table.module.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/controllers/draft-table.controller.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/middlewares/draft-table.middleware.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/services/api-draft-table.service.ts","webpack://cha-hockey/./libs/api/draft-table/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/entities/src/index.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/award-type.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/award.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/conference.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/current_season.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/division.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/draft-order.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/draft.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/goalie-rating.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/goalie-stats.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/index.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/player-rating.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/player-stats.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/player.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/salary.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/schedule.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/team-stats.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/team.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/transactions.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/user.entity.ts","webpack://cha-hockey/./libs/api/entities/src/lib/entities/waivers.entity.ts","webpack://cha-hockey/./libs/api/entry-draft/src/index.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/api-entry-draft.module.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/controllers/entry-draft.controller.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/middlewares/entry-draft.middleware.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/services/api-entry-draft.service.ts","webpack://cha-hockey/./libs/api/entry-draft/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/index.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/api-goalie-stats.module.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/controllers/goalie-stats.controller.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/middlewares/goalie-stats.middleware.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/services/api-goalie-all-time-stats.service.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/services/api-goalie-stats-leaders.service.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/services/api-goalie-stats.service.ts","webpack://cha-hockey/./libs/api/goalie-stats/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/league/src/index.ts","webpack://cha-hockey/./libs/api/league/src/lib/api-league.module.ts","webpack://cha-hockey/./libs/api/league/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/league/src/lib/controllers/league.controller.ts","webpack://cha-hockey/./libs/api/league/src/lib/middlewares/league.middleware.ts","webpack://cha-hockey/./libs/api/league/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/league/src/lib/services/league.service.ts","webpack://cha-hockey/./libs/api/nhl/src/index.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/api-nhl.module.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/controllers/nhl.controller.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/middlewares/nhl.middleware.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/services/api-nhl.service.ts","webpack://cha-hockey/./libs/api/nhl/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/player-info/src/index.ts","webpack://cha-hockey/./libs/api/player-info/src/lib/api-player-info.module.ts","webpack://cha-hockey/./libs/api/player-info/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/player-info/src/lib/controllers/player-info.controller.ts","webpack://cha-hockey/./libs/api/player-ratings/src/index.ts","webpack://cha-hockey/./libs/api/player-ratings/src/lib/api-player-ratings.module.ts","webpack://cha-hockey/./libs/api/player-ratings/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/player-ratings/src/lib/controllers/player-ratings.controller.ts","webpack://cha-hockey/./libs/api/player-stats/src/index.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/api-player-stats.module.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/controllers/player-stats.controller.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/middlewares/player-stats.middleware.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/services/api-player-all-time-stats.service.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/services/api-player-leaders-stats.service.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/services/api-player-stats.service.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/services/api-user-player-stats.service.ts","webpack://cha-hockey/./libs/api/player-stats/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/salaries/src/index.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/api-salaries.module.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/controllers/salaries.controller.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/middlewares/salaries.middleware.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/services/api-salaries.service.ts","webpack://cha-hockey/./libs/api/salaries/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/schedule/src/index.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/api-schedule.module.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/controllers/schedule.controller.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/middlewares/schedule.middleware.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/services/api-schedule.service.ts","webpack://cha-hockey/./libs/api/schedule/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/team-stats/src/index.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/api-team-stats.module.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/controllers/team-stats.controller.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/middlewares/team-stats.middleware.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/services/api-all-time-team-stats.service.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/services/api-team-stats.service.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/services/api-user-team-stats.service.ts","webpack://cha-hockey/./libs/api/team-stats/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/teams/src/index.ts","webpack://cha-hockey/./libs/api/teams/src/lib/api-teams.module.ts","webpack://cha-hockey/./libs/api/teams/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/teams/src/lib/controllers/teams.controller.ts","webpack://cha-hockey/./libs/api/teams/src/lib/middlewares/teams.middleware.ts","webpack://cha-hockey/./libs/api/teams/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/teams/src/lib/services/teams.service.ts","webpack://cha-hockey/./libs/api/transactions/src/index.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/api-transactions.module.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/controllers/transactions.controller.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/middlewares/transactions.middleware.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/services/api-transactions.service.ts","webpack://cha-hockey/./libs/api/transactions/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/users/src/index.ts","webpack://cha-hockey/./libs/api/users/src/lib/api-users.module.ts","webpack://cha-hockey/./libs/api/users/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/users/src/lib/controllers/users.controller.ts","webpack://cha-hockey/./libs/api/users/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/users/src/lib/middlewares/user.middleware.ts","webpack://cha-hockey/./libs/api/users/src/lib/services/index.ts","webpack://cha-hockey/./libs/api/users/src/lib/services/users.service.ts","webpack://cha-hockey/./libs/api/waivers/src/index.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/api-waivers.module.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/controllers/index.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/controllers/waivers.controller.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/middlewares/index.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/middlewares/waivers.middleware.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/services/api-waivers.service.ts","webpack://cha-hockey/./libs/api/waivers/src/lib/services/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/awards/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/drafts/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/league/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/nhl/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/player/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/salaries/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/schedule/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/stats/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/teams/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/transactions/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/user/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/user/user.create.dto.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/user/user.dto.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/dtos/waivers/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/award/awardType.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/award/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/button/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/button/primeButtonClass.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/league/conferences.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/league/divisions.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/league/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/logo/cha-logo.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/logo/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/teams/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/enums/teams/team.enum.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/models/index.ts","webpack://cha-hockey/./libs/cha/shared/entities/src/lib/models/playoffs/index.ts","webpack://cha-hockey/external commonjs \"@nestjs/axios\"","webpack://cha-hockey/external commonjs \"@nestjs/common\"","webpack://cha-hockey/external commonjs \"@nestjs/config\"","webpack://cha-hockey/external commonjs \"@nestjs/core\"","webpack://cha-hockey/external commonjs \"@nestjs/typeorm\"","webpack://cha-hockey/external commonjs \"rxjs\"","webpack://cha-hockey/external commonjs \"tslib\"","webpack://cha-hockey/external commonjs \"typeorm\"","webpack://cha-hockey/external node-commonjs \"fs\"","webpack://cha-hockey/external node-commonjs \"path\"","webpack://cha-hockey/webpack/bootstrap","webpack://cha-hockey/./apps/cha-server/src/main.ts"],"sourcesContent":["import { Controller, Get, Render } from '@nestjs/common';\n\n@Controller()\nexport class AppController {\n  @Get()\n  @Render('index')\n  root() {\n    return { message: 'Hello world!' };\n  }\n}\n","import { ApiCoreModule } from '@api/core';\nimport {\n  Users_V2,\n  Teams_V2,\n  Award_Type_V2,\n  Awards_V2,\n  Draft_Order_V2,\n  Drafts_V2,\n  Conferences_V2,\n  Current_Season_V2,\n  Divisions_V2,\n  Players_V2,\n  Goalie_Ratings_V2,\n  Player_Ratings_V2,\n  Salaries_V2,\n  Schedule_V2,\n  Goalies_Stats_V2,\n  Players_Stats_V2,\n  Team_Stats_V2,\n  Transactions_V2,\n  Waivers_V2,\n} from '@api/entities';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      envFilePath: `.env.${process.env.NODE_ENV}`,\n    }),\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      url: process.env.DATABASE_URL,\n      // database: 'defaultdb',\n      // host: process.env.DATABASE_HOST,\n      // username: process.env.DATABASE_USER,\n      // password: process.env.DATABASE_PASSWORD,\n      // port: parseInt(process.env.DATABASE_PORT),\n      synchronize: false,\n      entities: [\n        Users_V2,\n        Teams_V2,\n        Award_Type_V2,\n        Awards_V2,\n        Draft_Order_V2,\n        Drafts_V2,\n        Conferences_V2,\n        Current_Season_V2,\n        Divisions_V2,\n        Players_V2,\n        Goalie_Ratings_V2,\n        Player_Ratings_V2,\n        Salaries_V2,\n        Schedule_V2,\n        Goalies_Stats_V2,\n        Players_Stats_V2,\n        Team_Stats_V2,\n        Transactions_V2,\n        Waivers_V2,\n      ],\n      ssl: {\n        rejectUnauthorized: false,\n      },\n    }),\n    ApiCoreModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getData(): { message: string } {\n    return { message: 'Welcome to cha-server!' };\n  }\n\n  getViewName() {\n    return 'index.hbs';\n  }\n}\n","export * from './lib/api-awards.module';","import {\n  Awards_V2,\n  Players_Stats_V2,\n  Goalies_Stats_V2,\n  Team_Stats_V2,\n} from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AwardsController } from './controllers';\nimport { AwardsMiddleware } from './middlewares';\nimport { ApiAwardsService } from './services';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Awards_V2,\n      Players_Stats_V2,\n      Goalies_Stats_V2,\n      Team_Stats_V2,\n    ]),\n  ],\n  controllers: [AwardsController],\n  providers: [ApiAwardsService],\n})\nexport class ApiAwardsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(AwardsMiddleware).forRoutes('*');\n  }\n}\n","import { Awards_V2 } from '@api/entities';\nimport { Controller, Get, NotFoundException } from '@nestjs/common';\nimport { ApiAwardsService } from '../services/api-awards.service';\n\n@Controller('awards')\nexport class AwardsController {\n  constructor(private awardsService: ApiAwardsService) {}\n\n  @Get()\n  getAllAwardWinners() {\n    console.log('in awards controller');\n    return 'awards';\n  }\n\n  // @Get('/winners/:id')\n  // getAwardWinnersById() {}\n\n  @Get('/champions')\n  async getChampions(): Promise<Awards_V2[]> {\n    const champions = await this.awardsService.getChampions();\n\n    if (!champions || champions.length < 1) {\n      throw new NotFoundException('Champions Awards not found');\n    }\n    return champions;\n  }\n\n  @Get('/scorers')\n  async getScorerAwards() {\n    const scorers = await this.awardsService.getScorerAwards();\n\n    if (!scorers || scorers.length < 1) {\n      throw new NotFoundException('Scorers Awards not found');\n    }\n    return scorers;\n  }\n\n  @Get('/defense')\n  async getDefenseAwards(): Promise<Awards_V2[]> {\n    const defense = await this.awardsService.getDefenseAwards();\n\n    if (!defense || defense.length < 1) {\n      throw new NotFoundException('Defense Awards not found');\n    }\n    return defense;\n  }\n\n  @Get('/rookies')\n  async getRookieAwards(): Promise<Awards_V2[]> {\n    const rookies = await this.awardsService.getRookieAwards();\n\n    if (!rookies || rookies.length < 1) {\n      throw new NotFoundException('Rookie Awards not found');\n    }\n    return rookies;\n  }\n\n  @Get('/goalies')\n  async getGoalieAwards(): Promise<Awards_V2[]> {\n    const goalies = await this.awardsService.getGoalieAwards();\n\n    if (!goalies || goalies.length < 1) {\n      throw new NotFoundException('Goalie Awards not found');\n    }\n    return goalies;\n  }\n\n  @Get('/gm')\n  async getGmAwards(): Promise<Awards_V2[]> {\n    const gms = await this.awardsService.getGmAwards();\n\n    if (!gms || gms.length < 1) {\n      throw new NotFoundException('GM Awards not found');\n    }\n    return gms;\n  }\n\n  @Get('/season')\n  async getSeasonAwards(): Promise<Awards_V2[]> {\n    const season = await this.awardsService.getSeasonAwards();\n\n    if (!season || season.length < 1) {\n      throw new NotFoundException('Season Awards not found');\n    }\n    return season;\n  }\n\n  // @Get('/player/:id')\n  // getPlayerAwardsByPlayerId() {}\n\n  // @Get('/goalie/:id')\n  // getGoalieAwardsByPlayerId() {}\n\n  // @Get('/user/:id')\n  // getTeamAwardsByUserId() {}\n\n  // @Get('/award-types')\n  // getAwardTypes() {}\n\n  // @Post('/add')\n  // addAwardWinner() {}\n\n  // @Put('/winners/:id')\n  // editAwardWinnerById() {}\n\n  // @Delete('/winners/:id')\n  // deleteAwardWinnerById() {}\n}\n","export * from './awards.controller';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class AwardsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Awards...');\r\n    next();\r\n  }\r\n}\r\n","export * from './awards.middleware';\r\n","import {\r\n  Awards_V2,\r\n  Players_Stats_V2,\r\n  Goalies_Stats_V2,\r\n  Team_Stats_V2,\r\n} from '@api/entities';\r\nimport { AwardTypeEnum } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiAwardsService {\r\n  constructor(\r\n    @InjectRepository(Awards_V2) private repo: Repository<Awards_V2>,\r\n    @InjectRepository(Players_Stats_V2)\r\n    private playerStatsRepo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Goalies_Stats_V2)\r\n    private goalieStatsRepo: Repository<Goalies_Stats_V2>,\r\n    @InjectRepository(Team_Stats_V2)\r\n    private teamStatsRepo: Repository<Team_Stats_V2>\r\n  ) {}\r\n\r\n  selectUserOptions = {\r\n    id: true,\r\n    display_season: true,\r\n    cha_season: true,\r\n    award_type: {\r\n      display_name: true,\r\n      id: true,\r\n    },\r\n    team_id: {\r\n      id: true,\r\n      city: true,\r\n      nickname: true,\r\n      teamlogo: true,\r\n      teamcolor: true,\r\n    },\r\n    users_id: {\r\n      firstname: true,\r\n      lastname: true,\r\n    },\r\n  };\r\n\r\n  selectPlayerOptions = {\r\n    id: true,\r\n    display_season: true,\r\n    cha_season: true,\r\n    award_type: {\r\n      display_name: true,\r\n      id: true,\r\n    },\r\n    team_id: {\r\n      city: true,\r\n      nickname: true,\r\n      teamlogo: true,\r\n      teamcolor: true,\r\n    },\r\n    player_id: {\r\n      id: true,\r\n      nhl_id: true,\r\n      firstname: true,\r\n      lastname: true,\r\n    },\r\n    users_id: {\r\n      firstname: true,\r\n      lastname: true,\r\n    },\r\n  };\r\n\r\n  async getChampions(): Promise<Awards_V2[]> {\r\n    return await this.repo.find({\r\n      select: this.selectUserOptions,\r\n      relations: ['users_id', 'team_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.CHAMPION,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  async getScorerAwards() {\r\n    const scorers = await this.repo.find({\r\n      select: this.selectPlayerOptions,\r\n      relations: ['users_id', 'team_id', 'player_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.SCORER,\r\n        },\r\n      },\r\n    });\r\n\r\n    const scrorersWithStats = await this.setPlayerStats(scorers);\r\n\r\n    return scrorersWithStats;\r\n  }\r\n\r\n  async getDefenseAwards(): Promise<Awards_V2[]> {\r\n    const defense = await this.repo.find({\r\n      select: this.selectPlayerOptions,\r\n      relations: ['users_id', 'team_id', 'player_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.DEFENSE,\r\n        },\r\n      },\r\n    });\r\n\r\n    const defenseWithStats = await this.setPlayerStats(defense);\r\n\r\n    return defenseWithStats;\r\n  }\r\n\r\n  async getRookieAwards(): Promise<Awards_V2[]> {\r\n    const rookies = await this.repo.find({\r\n      select: this.selectPlayerOptions,\r\n      relations: ['users_id', 'team_id', 'player_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.ROOKIE,\r\n        },\r\n      },\r\n    });\r\n\r\n    const rookiesWithStats = await this.setPlayerStats(rookies);\r\n\r\n    return rookiesWithStats;\r\n  }\r\n\r\n  async getGoalieAwards(): Promise<Awards_V2[]> {\r\n    const goalies = await this.repo.find({\r\n      select: this.selectPlayerOptions,\r\n      relations: ['users_id', 'team_id', 'player_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.GOALIE,\r\n        },\r\n      },\r\n    });\r\n\r\n    const goaliesWithStats = await this.setGoalieStats(goalies);\r\n\r\n    return goaliesWithStats;\r\n  }\r\n\r\n  async getGmAwards(): Promise<Awards_V2[]> {\r\n    return await this.repo.find({\r\n      select: this.selectUserOptions,\r\n      relations: ['users_id', 'team_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.GM,\r\n        },\r\n      },\r\n    });\r\n  }\r\n\r\n  async getSeasonAwards(): Promise<Awards_V2[]> {\r\n    const seasonAwards = await this.repo.find({\r\n      select: this.selectUserOptions,\r\n      relations: ['users_id', 'team_id', 'award_type'],\r\n      where: {\r\n        award_type: {\r\n          id: AwardTypeEnum.SEASON,\r\n        },\r\n      },\r\n    });\r\n\r\n    const seasonAwardsWithStats = await this.setSeasonStats(seasonAwards);\r\n\r\n    return seasonAwardsWithStats;\r\n  }\r\n\r\n  private async setPlayerStats(array: Awards_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        stats: await this.getPlayerStats(item.player_id.id, item.cha_season),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getPlayerStats(playerId: number, chaSeason: string) {\r\n    return await this.playerStatsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        playing_year: true,\r\n        games_played: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n      },\r\n      where: {\r\n        player_id: { id: playerId },\r\n        playing_year: chaSeason,\r\n        season_type: 'Regular',\r\n      },\r\n    });\r\n  }\r\n\r\n  private async setGoalieStats(array: Awards_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        stats: await this.getGoalieStats(item.player_id.id, item.cha_season),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getGoalieStats(playerId: number, chaSeason: string) {\r\n    return await this.goalieStatsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        player_id: {\r\n          id: true,\r\n          nhl_id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          isgoalie: true,\r\n          is_protected: true,\r\n          isactive: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n        playing_year: true,\r\n        games_played: true,\r\n        wins: true,\r\n        goals_against_avg: true,\r\n        save_pct: true,\r\n      },\r\n      where: {\r\n        player_id: {\r\n          id: playerId,\r\n        },\r\n        playing_year: chaSeason,\r\n        season_type: 'Regular',\r\n      },\r\n    });\r\n  }\r\n\r\n  private async setSeasonStats(array: Awards_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        stats: await this.getSeasonStats(item.team_id.id, item.cha_season),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getSeasonStats(teamId: number, chaSeason: string) {\r\n    return await this.teamStatsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        playing_year: true,\r\n        games_played: true,\r\n        wins: true,\r\n        goals_for: true,\r\n        goals_against: true,\r\n        points: true,\r\n      },\r\n      where: {\r\n        team_id: { id: teamId },\r\n        playing_year: chaSeason,\r\n        season_type: 'Regular',\r\n      },\r\n    });\r\n  }\r\n}\r\n","export * from './api-awards.service';\r\n","export * from './lib/api-core.module';\n","import { Module } from '@nestjs/common';\n\nimport { ApiAwardsModule } from '@api/awards';\nimport { ApiUsersModule } from '@api/users';\nimport { ApiDraftTableModule } from '@api/draft-table';\nimport { ApiEntryDraftModule } from '@api/entry-draft';\nimport { ApiGoalieStatsModule } from '@api/goalie-stats';\nimport { ApiLeagueModule } from '@api/league';\nimport { ApiNhlModule } from '@api/nhl';\nimport { ApiPlayerInfoModule } from '@api/player-info';\nimport { ApiPlayerRatingsModule } from '@api/player-ratings';\nimport { ApiPlayerStatsModule } from '@api/player-stats';\nimport { ApiSalariesModule } from '@api/salaries';\nimport { ApiScheduleModule } from '@api/schedule';\nimport { ApiTeamStatsModule } from '@api/team-stats';\nimport { ApiTeamsModule } from '@api/teams';\nimport { ApiTransactionsModule } from '@api/transactions';\nimport { ApiWaiversModule } from '@api/waivers';\n\n@Module({\n  imports: [\n    ApiUsersModule,\n    ApiAwardsModule,\n    ApiDraftTableModule,\n    ApiEntryDraftModule,\n    ApiGoalieStatsModule,\n    ApiLeagueModule,\n    ApiNhlModule,\n    ApiPlayerInfoModule,\n    ApiPlayerRatingsModule,\n    ApiPlayerStatsModule,\n    ApiSalariesModule,\n    ApiScheduleModule,\n    ApiTeamStatsModule,\n    ApiTeamsModule,\n    ApiTransactionsModule,\n    ApiWaiversModule,\n  ],\n  controllers: [],\n  providers: [],\n  exports: [],\n})\nexport class ApiCoreModule {}\n","export * from './lib/api-draft-table.module';\n","import { Draft_Order_V2, Team_Stats_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DraftTableController } from './controllers';\nimport { DraftTableMiddleware } from './middlewares';\nimport { ApiDraftTableService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Draft_Order_V2, Team_Stats_V2])],\n  controllers: [DraftTableController],\n  providers: [ApiDraftTableService],\n})\nexport class ApiDraftTableModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(DraftTableMiddleware).forRoutes('*');\n  }\n}\n","import { Draft_Order_V2 } from '@api/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { ApiDraftTableService } from '../services';\n\n@Controller('draft-table')\nexport class DraftTableController {\n  constructor(private draftTableService: ApiDraftTableService) {}\n\n  @Get('/:draft_year/:playing_year')\n  async getDraftTableByYearByStandings(\n    @Param() param: any\n  ): Promise<Draft_Order_V2[]> {\n    const draftTable =\n      await this.draftTableService.getDraftTableByYearByStandings(\n        param.draft_year,\n        param.playing_year\n      );\n\n    if (!draftTable || draftTable.length < 1) {\n      throw new NotFoundException('Draft Table not found');\n    }\n    return draftTable;\n  }\n}\n","export * from './draft-table.controller';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class DraftTableMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Draft Table...');\r\n    next();\r\n  }\r\n}\r\n","export * from './draft-table.middleware';\r\n","import { Draft_Order_V2, Team_Stats_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiDraftTableService {\r\n  constructor(\r\n    @InjectRepository(Draft_Order_V2) private repo: Repository<Draft_Order_V2>,\r\n    @InjectRepository(Team_Stats_V2)\r\n    private teamStatsRepo: Repository<Team_Stats_V2>\r\n  ) {}\r\n\r\n  async getDraftTableByYearByStandings(\r\n    draftYear: string,\r\n    playingYear: string\r\n  ): Promise<Draft_Order_V2[]> {\r\n    const draftTable = await this.repo.find({\r\n      relations: ['team_id'],\r\n      where: {\r\n        draft_year: draftYear,\r\n      },\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          shortname: true,\r\n          city: true,\r\n          nickname: true,\r\n          teamlogo: true,\r\n        },\r\n      },\r\n    });\r\n\r\n    const draftTableWithStandings = await this.setTableStandings(\r\n      draftTable,\r\n      playingYear\r\n    );\r\n\r\n    const draftTableByStandings = this.getDraftByStandings(\r\n      draftTableWithStandings\r\n    );\r\n\r\n    return draftTableByStandings;\r\n  }\r\n\r\n  private async setTableStandings(\r\n    array: Draft_Order_V2[],\r\n    playingYear: string\r\n  ) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        stats: await this.getTeamStats(item.team_id.id, playingYear),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamStats(teamId: number, playingYear: string) {\r\n    return await this.teamStatsRepo.findOne({\r\n      relations: ['team_id'],\r\n      select: {\r\n        id: true,\r\n        wins: true,\r\n        goals_for: true,\r\n        goals_against: true,\r\n        points: true,\r\n      },\r\n      where: {\r\n        team_id: { id: teamId },\r\n        playing_year: playingYear,\r\n        season_type: 'Regular',\r\n      },\r\n    });\r\n  }\r\n\r\n  private getDraftByStandings = (data) => {\r\n    return data\r\n      .sort((a: any, b: any) => {\r\n        if (b.stats.points === a.stats.points) {\r\n          if (b.stats.wins === a.stats.wins) {\r\n            if (\r\n              b.stats.goals_for - b.stats.goals_against ===\r\n              a.stats.goals_for - a.stats.goals_against\r\n            ) {\r\n              return b.stats.goals_for - a.stats.goals_for;\r\n            } else {\r\n              return (\r\n                b.stats.goals_for -\r\n                b.stats.goals_against -\r\n                (a.stats.goals_for - a.stats.goals_against)\r\n              );\r\n            }\r\n          } else {\r\n            return b.stats.wins - a.stats.wins;\r\n          }\r\n        } else {\r\n          return b.stats.points - a.stats.points;\r\n        }\r\n      })\r\n      .reverse();\r\n  };\r\n}\r\n","export * from './api-draft-table.service';\r\n","export * from './lib/entities';\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Award_Type_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  award_type!: string;\r\n\r\n  @Column()\r\n  display_name!: string;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  ManyToOne,\r\n  JoinColumn,\r\n  OneToOne,\r\n} from 'typeorm';\r\nimport { Award_Type_V2 } from './award-type.entity';\r\nimport { Players_Stats_V2 } from './player-stats.entity';\r\nimport { Players_V2 } from './player.entity';\r\nimport { Teams_V2 } from './team.entity';\r\nimport { Users_V2 } from './user.entity';\r\n\r\n@Entity({\r\n  orderBy: {\r\n    display_season: 'DESC',\r\n  },\r\n})\r\nexport class Awards_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  display_season!: string;\r\n\r\n  @OneToOne(() => Players_Stats_V2, (playerStats) => playerStats.playing_year)\r\n  @Column()\r\n  cha_season!: string;\r\n\r\n  @OneToOne(() => Award_Type_V2, (award) => award.id)\r\n  @JoinColumn({ name: 'award_type' })\r\n  award_type!: Award_Type_V2;\r\n\r\n  @ManyToOne(() => Users_V2, (user) => user.id)\r\n  @JoinColumn({ name: 'users_id' })\r\n  users_id!: Users_V2;\r\n\r\n  @ManyToOne(() => Teams_V2, (team) => team.id)\r\n  @JoinColumn({ name: 'team_id' })\r\n  team_id!: Teams_V2;\r\n\r\n  @ManyToOne(() => Players_V2, (player) => player.id)\r\n  @JoinColumn({ name: 'player_id' })\r\n  player_id!: Players_V2;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Conferences_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  conferencename!: string;\r\n\r\n  @Column()\r\n  isactive!: boolean;\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Current_Season_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  current_year!: string;\r\n\r\n  @Column()\r\n  next_year!: string;\r\n\r\n  @Column()\r\n  prev_year!: string;\r\n\r\n  @Column()\r\n  nhl_year!: string;\r\n\r\n  @Column()\r\n  current_season_type!: string;\r\n\r\n  @Column()\r\n  current_day!: number;\r\n\r\n  @Column()\r\n  current_draft_year!: number;\r\n\r\n  @Column()\r\n  next_draft_year!: number;\r\n\r\n  @Column()\r\n  current_cap!: number;\r\n\r\n  @Column()\r\n  next_cap!: number;\r\n\r\n  @Column()\r\n  min_games!: number;\r\n\r\n  @Column()\r\n  offseason!: boolean;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Divisions_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  divisionname!: string;\r\n\r\n  @Column()\r\n  conference_id!: number;\r\n\r\n  @Column()\r\n  isactive!: boolean;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  ManyToOne,\r\n  JoinColumn,\r\n} from 'typeorm';\r\nimport { Teams_V2 } from './team.entity';\r\n\r\n@Entity()\r\nexport class Draft_Order_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @ManyToOne(() => Teams_V2, (team) => team.id)\r\n  @JoinColumn({ name: 'team_id' })\r\n  team_id!: Teams_V2;\r\n\r\n  @Column()\r\n  round_one!: number;\r\n\r\n  @Column()\r\n  round_two!: number;\r\n\r\n  @Column()\r\n  round_three!: number;\r\n\r\n  @Column()\r\n  round_four!: number;\r\n\r\n  @Column()\r\n  round_five!: number;\r\n\r\n  @Column()\r\n  draft_year!: string;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  ManyToOne,\r\n  JoinColumn,\r\n  Relation,\r\n} from 'typeorm';\r\nimport { Players_V2 } from './player.entity';\r\nimport { Teams_V2 } from './team.entity';\r\n\r\n@Entity()\r\nexport class Drafts_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @ManyToOne(() => Players_V2, (player) => player.id)\r\n  @JoinColumn({ name: 'player_id' })\r\n  player_id!: Relation<Players_V2>;\r\n\r\n  @Column()\r\n  draft_year!: string;\r\n\r\n  @Column()\r\n  draft_round!: number;\r\n\r\n  @Column()\r\n  draft_overall!: number;\r\n\r\n  @ManyToOne(() => Teams_V2, (team) => team.id)\r\n  @JoinColumn({ name: 'team_id' })\r\n  team_id!: Teams_V2;\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Goalie_Ratings_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  player_id!: number;\r\n\r\n  @Column()\r\n  games_played!: number;\r\n\r\n  @Column()\r\n  minutes_played!: number;\r\n\r\n  @Column()\r\n  goals_against_avg!: string;\r\n\r\n  @Column()\r\n  wins!: number;\r\n\r\n  @Column()\r\n  loss!: number;\r\n\r\n  @Column()\r\n  ties!: number;\r\n\r\n  @Column()\r\n  en_goals!: number;\r\n\r\n  @Column()\r\n  shutouts!: number;\r\n\r\n  @Column()\r\n  goals_against!: number;\r\n\r\n  @Column()\r\n  saves!: number;\r\n\r\n  @Column()\r\n  shots_for!: number;\r\n\r\n  @Column()\r\n  save_pct!: string;\r\n\r\n  @Column()\r\n  goals!: number;\r\n\r\n  @Column()\r\n  assists!: number;\r\n\r\n  @Column()\r\n  points!: number;\r\n\r\n  @Column()\r\n  penalty_minutes!: number;\r\n\r\n  @Column()\r\n  skating!: string;\r\n\r\n  @Column()\r\n  speed!: string;\r\n\r\n  @Column()\r\n  passing!: string;\r\n\r\n  @Column()\r\n  playing_year!: string;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  OneToOne,\r\n  JoinColumn,\r\n  ManyToOne,\r\n} from 'typeorm';\r\nimport { Players_V2 } from './player.entity';\r\nimport { Teams_V2 } from './team.entity';\r\n\r\n@Entity()\r\nexport class Goalies_Stats_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @ManyToOne(() => Players_V2, (player) => player.id, { eager: true })\r\n  @JoinColumn({ name: 'player_id' })\r\n  player_id!: Players_V2;\r\n\r\n  @Column()\r\n  team_name!: string;\r\n\r\n  @Column()\r\n  games_played!: number;\r\n\r\n  @Column()\r\n  minutes_played!: number;\r\n\r\n  @Column()\r\n  goals_against_avg!: string;\r\n\r\n  @Column()\r\n  wins!: number;\r\n\r\n  @Column()\r\n  loss!: number;\r\n\r\n  @Column()\r\n  ties!: number;\r\n\r\n  @Column()\r\n  en_goals!: number;\r\n\r\n  @Column()\r\n  shutouts!: number;\r\n\r\n  @Column()\r\n  goals_against!: number;\r\n\r\n  @Column()\r\n  saves!: number;\r\n\r\n  @Column()\r\n  shots_for!: number;\r\n\r\n  @Column()\r\n  save_pct!: string;\r\n\r\n  @Column()\r\n  goals!: number;\r\n\r\n  @Column()\r\n  assists!: number;\r\n\r\n  @Column()\r\n  points!: number;\r\n\r\n  @Column()\r\n  penalty_minutes!: number;\r\n\r\n  @Column()\r\n  pass_complete!: number;\r\n\r\n  @Column()\r\n  pass_incomplete!: number;\r\n\r\n  @Column()\r\n  pass_attempts!: number;\r\n\r\n  @Column()\r\n  pass_pct!: string;\r\n\r\n  @Column()\r\n  penalty_minor!: number;\r\n\r\n  @Column()\r\n  penalty_minor_coincidental!: number;\r\n\r\n  @Column()\r\n  penalty_major!: number;\r\n\r\n  @Column()\r\n  penalty_fighting_major!: number;\r\n\r\n  @Column()\r\n  penalty_match!: number;\r\n\r\n  @Column()\r\n  penalty_misconduct!: number;\r\n\r\n  @Column()\r\n  penalty_game_misconduct!: number;\r\n\r\n  @Column()\r\n  penalty_gross_misconduct!: number;\r\n\r\n  @Column()\r\n  playing_year!: string;\r\n\r\n  @Column()\r\n  season_type!: 'Regular' | 'Playoffs';\r\n\r\n  @Column()\r\n  player_status!: 'Veteran' | 'Rookie';\r\n\r\n  @OneToOne(() => Teams_V2, (team) => team.shortname)\r\n  team!: Teams_V2;\r\n}\r\n","export * from './award-type.entity';\r\nexport * from './award.entity';\r\nexport * from './conference.entity';\r\nexport * from './current_season.entity';\r\nexport * from './division.entity';\r\nexport * from './draft-order.entity';\r\nexport * from './draft.entity';\r\nexport * from './goalie-rating.entity';\r\nexport * from './goalie-stats.entity';\r\nexport * from './player-rating.entity';\r\nexport * from './player-stats.entity';\r\nexport * from './player.entity';\r\nexport * from './salary.entity';\r\nexport * from './schedule.entity';\r\nexport * from './team-stats.entity';\r\nexport * from './team.entity';\r\nexport * from './transactions.entity';\r\nexport * from './user.entity';\r\nexport * from './waivers.entity';\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Player_Ratings_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  player_id!: number;\r\n\r\n  @Column()\r\n  games_played!: number;\r\n\r\n  @Column()\r\n  goals!: number;\r\n\r\n  @Column()\r\n  assists!: number;\r\n\r\n  @Column()\r\n  points!: number;\r\n\r\n  @Column()\r\n  plus_minus!: number;\r\n\r\n  @Column()\r\n  penalty_minutes!: number;\r\n\r\n  @Column()\r\n  pp_goals!: number;\r\n\r\n  @Column()\r\n  sh_goals!: number;\r\n\r\n  @Column()\r\n  gw_goals!: number;\r\n\r\n  @Column()\r\n  gt_goals!: number;\r\n\r\n  @Column()\r\n  shots!: number;\r\n\r\n  @Column()\r\n  shooting_pct!: string;\r\n\r\n  @Column()\r\n  game_fatigue!: string;\r\n\r\n  @Column()\r\n  shift_fatigue!: string;\r\n\r\n  @Column()\r\n  c_rate!: string;\r\n\r\n  @Column()\r\n  l_rate!: string;\r\n\r\n  @Column()\r\n  r_rate!: string;\r\n\r\n  @Column()\r\n  ld_rate!: string;\r\n\r\n  @Column()\r\n  rd_rate!: string;\r\n\r\n  @Column()\r\n  shooting!: string;\r\n\r\n  @Column()\r\n  skating!: string;\r\n\r\n  @Column()\r\n  speed!: string;\r\n\r\n  @Column()\r\n  passing!: string;\r\n\r\n  @Column()\r\n  forecheck!: string;\r\n\r\n  @Column()\r\n  physical!: string;\r\n\r\n  @Column()\r\n  intimidation!: string;\r\n\r\n  @Column()\r\n  clear_crease!: string;\r\n\r\n  @Column()\r\n  rock!: string;\r\n\r\n  @Column()\r\n  pk!: string;\r\n\r\n  @Column()\r\n  shot_block!: string;\r\n\r\n  @Column()\r\n  face_off!: string;\r\n\r\n  @Column()\r\n  assist_rating!: string;\r\n\r\n  @Column()\r\n  playing_year!: string;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  OneToOne,\r\n  ManyToOne,\r\n  JoinColumn,\r\n} from 'typeorm';\r\nimport { Awards_V2 } from './award.entity';\r\nimport { Players_V2 } from './player.entity';\r\n\r\n@Entity()\r\nexport class Players_Stats_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @ManyToOne(() => Players_V2, (player) => player.id, { eager: true })\r\n  @JoinColumn({ name: 'player_id' })\r\n  player_id!: Players_V2;\r\n\r\n  @Column()\r\n  team_name!: string;\r\n\r\n  @Column()\r\n  position!: string;\r\n\r\n  @Column()\r\n  games_played!: number;\r\n\r\n  @Column()\r\n  goals!: number;\r\n\r\n  @Column()\r\n  assists!: number;\r\n\r\n  @Column()\r\n  points!: number;\r\n\r\n  @Column()\r\n  plus_minus!: number;\r\n\r\n  @Column()\r\n  penalty_minutes!: number;\r\n\r\n  @Column()\r\n  pp_goals!: number;\r\n\r\n  @Column()\r\n  sh_goals!: number;\r\n\r\n  @Column()\r\n  gw_goals!: number;\r\n\r\n  @Column()\r\n  gt_goals!: number;\r\n\r\n  @Column()\r\n  shots!: number;\r\n\r\n  @Column()\r\n  shooting_pct!: string;\r\n\r\n  @Column()\r\n  minutes_played!: number;\r\n\r\n  @Column()\r\n  minutes_per_game!: string;\r\n\r\n  @Column()\r\n  fo_won!: number;\r\n\r\n  @Column()\r\n  fo_lost!: number;\r\n\r\n  @Column()\r\n  fo_tied!: number;\r\n\r\n  @Column()\r\n  fo_pct!: string;\r\n\r\n  @Column()\r\n  pass_complete!: number;\r\n\r\n  @Column()\r\n  pass_incomplete!: number;\r\n\r\n  @Column()\r\n  pass_attempts!: number;\r\n\r\n  @Column()\r\n  pass_pct!: string;\r\n\r\n  @Column()\r\n  corner_won!: number;\r\n\r\n  @Column()\r\n  corner_lost!: number;\r\n\r\n  @Column()\r\n  corner_total!: number;\r\n\r\n  @Column()\r\n  corner_pct!: string;\r\n\r\n  @Column()\r\n  fights_won!: number;\r\n\r\n  @Column()\r\n  fights_lost!: number;\r\n\r\n  @Column()\r\n  fights_tied!: number;\r\n\r\n  @Column()\r\n  fights_pct!: string;\r\n\r\n  @Column()\r\n  hits!: number;\r\n\r\n  @Column()\r\n  hit_per_game!: string;\r\n\r\n  @Column()\r\n  blocked_shots!: number;\r\n\r\n  @Column()\r\n  blocked_shot_per_game!: string;\r\n\r\n  @Column()\r\n  current_points_streak!: number;\r\n\r\n  @Column()\r\n  longest_points_streak!: number;\r\n\r\n  @Column()\r\n  penalty_minor!: number;\r\n\r\n  @Column()\r\n  penalty_minor_coincidental!: number;\r\n\r\n  @Column()\r\n  penalty_major!: number;\r\n\r\n  @Column()\r\n  penalty_fighting_major!: number;\r\n\r\n  @Column()\r\n  penalty_match!: number;\r\n\r\n  @Column()\r\n  penalty_misconduct!: number;\r\n\r\n  @Column()\r\n  penalty_game_misconduct!: number;\r\n\r\n  @Column()\r\n  penalty_gross_misconduct!: number;\r\n\r\n  @OneToOne(() => Awards_V2, (award) => award.cha_season)\r\n  @Column()\r\n  playing_year!: string;\r\n\r\n  @Column()\r\n  season_type!: 'Regular' | 'Playoffs';\r\n\r\n  @Column()\r\n  player_status!: 'Veteran' | 'Rookie';\r\n\r\n  // @OneToOne(() => Teams_V2, (team) => team.shortname)\r\n  // team!: Teams_V2;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  OneToMany,\r\n  AfterInsert,\r\n  AfterUpdate,\r\n  AfterRemove,\r\n  OneToOne,\r\n} from 'typeorm';\r\nimport { Drafts_V2 } from './draft.entity';\r\nimport { Goalie_Ratings_V2 } from './goalie-rating.entity';\r\nimport { Goalies_Stats_V2 } from './goalie-stats.entity';\r\nimport { Player_Ratings_V2 } from './player-rating.entity';\r\nimport { Players_Stats_V2 } from './player-stats.entity';\r\nimport { Salaries_V2 } from './salary.entity';\r\n\r\n@Entity()\r\nexport class Players_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  firstname!: string;\r\n\r\n  @Column()\r\n  lastname!: string;\r\n\r\n  @Column()\r\n  nhl_id!: string;\r\n\r\n  @Column()\r\n  isactive!: boolean;\r\n\r\n  @Column()\r\n  isgoalie!: boolean;\r\n\r\n  @Column()\r\n  isdefense!: boolean;\r\n\r\n  @Column()\r\n  isforward!: boolean;\r\n\r\n  @Column()\r\n  is_protected!: boolean;\r\n\r\n  @OneToMany(() => Players_Stats_V2, (playerStats) => playerStats.player_id)\r\n  playerStats!: Players_Stats_V2;\r\n\r\n  @OneToMany(() => Goalies_Stats_V2, (goalieStats) => goalieStats.player_id)\r\n  goalieStats!: Goalies_Stats_V2;\r\n\r\n  @OneToOne(() => Salaries_V2, (salary) => salary.player_id)\r\n  salary!: Salaries_V2;\r\n\r\n  @OneToMany(() => Drafts_V2, (draft) => draft.player_id)\r\n  draft!: Drafts_V2;\r\n\r\n  @OneToMany(() => Goalie_Ratings_V2, (goalieRating) => goalieRating.player_id)\r\n  goalieRating!: Goalie_Ratings_V2;\r\n\r\n  @OneToMany(() => Player_Ratings_V2, (playerRating) => playerRating.player_id)\r\n  playerRating!: Player_Ratings_V2;\r\n\r\n  @AfterInsert()\r\n  logInsert() {\r\n    console.log('Inserted Player with id', this.id);\r\n  }\r\n\r\n  @AfterUpdate()\r\n  logUpdate() {\r\n    console.log('Updated Player with id', this.id);\r\n  }\r\n\r\n  @AfterRemove()\r\n  logRemove() {\r\n    console.log('Removed Player');\r\n  }\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Salaries_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  player_id!: string;\r\n\r\n  @Column()\r\n  season_2020!: string;\r\n\r\n  @Column()\r\n  season_2021!: string;\r\n\r\n  @Column()\r\n  season_2022!: string;\r\n\r\n  @Column()\r\n  season_2023!: string;\r\n\r\n  @Column()\r\n  season_2024!: string;\r\n\r\n  @Column()\r\n  season_2025!: string;\r\n\r\n  @Column()\r\n  season_2026!: string;\r\n\r\n  @Column()\r\n  season_2027!: string;\r\n\r\n  @Column()\r\n  season_2028!: string;\r\n\r\n  @Column()\r\n  season_2029!: string;\r\n\r\n  @Column()\r\n  season_2030!: string;\r\n\r\n  @Column()\r\n  season_2031!: string;\r\n\r\n  @Column()\r\n  season_2032!: string;\r\n\r\n  @Column()\r\n  season_2033!: string;\r\n\r\n  @Column()\r\n  season_2034!: string;\r\n\r\n  @Column()\r\n  season_2035!: string;\r\n\r\n  @Column()\r\n  season_2036!: string;\r\n\r\n  @Column()\r\n  season_2037!: string;\r\n\r\n  @Column()\r\n  season_2038!: string;\r\n\r\n  @Column()\r\n  season_2039!: string;\r\n\r\n  @Column()\r\n  season_2040!: string;\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Schedule_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  game_day!: number;\r\n\r\n  @Column()\r\n  vis_team_id!: number;\r\n\r\n  @Column()\r\n  vis_team_game_number!: number;\r\n\r\n  @Column()\r\n  vis_team_score!: number;\r\n\r\n  @Column()\r\n  home_team_id!: number;\r\n\r\n  @Column()\r\n  home_team_game_number!: number;\r\n\r\n  @Column()\r\n  home_team_score!: number;\r\n\r\n  @Column()\r\n  playing_year!: string;\r\n}\r\n","import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  ManyToOne,\r\n  JoinColumn,\r\n} from 'typeorm';\r\nimport { Teams_V2 } from './team.entity';\r\n\r\n@Entity()\r\nexport class Team_Stats_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @ManyToOne(() => Teams_V2, (team) => team.id)\r\n  @JoinColumn({ name: 'team_id' })\r\n  team_id!: Teams_V2;\r\n\r\n  @Column()\r\n  games_played!: number;\r\n\r\n  @Column()\r\n  wins!: number;\r\n\r\n  @Column()\r\n  loss!: number;\r\n\r\n  @Column()\r\n  ties!: number;\r\n\r\n  @Column()\r\n  points!: number;\r\n\r\n  @Column()\r\n  goals_for!: number;\r\n\r\n  @Column()\r\n  goals_against!: number;\r\n\r\n  @Column()\r\n  pp_attempts!: number;\r\n\r\n  @Column()\r\n  pp_goals!: number;\r\n\r\n  @Column()\r\n  pp_min!: number;\r\n\r\n  @Column()\r\n  pk_attempts!: number;\r\n\r\n  @Column()\r\n  pk_goals!: number;\r\n\r\n  @Column()\r\n  pk_min!: number;\r\n\r\n  @Column()\r\n  penalty_minutes!: number;\r\n\r\n  @Column()\r\n  sh_goals!: number;\r\n\r\n  @Column()\r\n  home_wins!: number;\r\n\r\n  @Column()\r\n  home_loss!: number;\r\n\r\n  @Column()\r\n  home_ties!: number;\r\n\r\n  @Column()\r\n  road_wins!: number;\r\n\r\n  @Column()\r\n  road_loss!: number;\r\n\r\n  @Column()\r\n  road_ties!: number;\r\n\r\n  @Column()\r\n  div_win!: number;\r\n\r\n  @Column()\r\n  div_loss!: number;\r\n\r\n  @Column()\r\n  div_tie!: number;\r\n\r\n  @Column()\r\n  ot_win!: number;\r\n\r\n  @Column()\r\n  ot_loss!: number;\r\n\r\n  @Column()\r\n  lead_after_two_wins!: number;\r\n\r\n  @Column()\r\n  lead_after_two_loss!: number;\r\n\r\n  @Column()\r\n  lead_after_two_ties!: number;\r\n\r\n  @Column()\r\n  trail_after_two_wins!: number;\r\n\r\n  @Column()\r\n  trail_after_two_loss!: number;\r\n\r\n  @Column()\r\n  trail_after_two_ties!: number;\r\n\r\n  @Column()\r\n  even_after_two_wins!: number;\r\n\r\n  @Column()\r\n  even_after_two_loss!: number;\r\n\r\n  @Column()\r\n  even_after_two_ties!: number;\r\n\r\n  @Column()\r\n  long_win_streak!: number;\r\n\r\n  @Column()\r\n  shots_for!: number;\r\n\r\n  @Column()\r\n  shots_against!: number;\r\n\r\n  @Column()\r\n  face_off_won!: number;\r\n\r\n  @Column()\r\n  face_off_lost!: number;\r\n\r\n  @Column()\r\n  corner_won!: number;\r\n\r\n  @Column()\r\n  corner_lost!: number;\r\n\r\n  @Column()\r\n  pass_complete!: number;\r\n\r\n  @Column()\r\n  pass_incomplete!: number;\r\n\r\n  @Column()\r\n  empty_net!: number;\r\n\r\n  @Column()\r\n  shut_outs!: number;\r\n\r\n  @Column()\r\n  playing_year!: string;\r\n\r\n  @Column()\r\n  season_type!: 'Regular' | 'Playoffs';\r\n}\r\n","import {\r\n  Entity,\r\n  Column,\r\n  PrimaryGeneratedColumn,\r\n  AfterInsert,\r\n  AfterRemove,\r\n  AfterUpdate,\r\n  JoinColumn,\r\n  OneToOne,\r\n} from 'typeorm';\r\nimport { Divisions_V2 } from './division.entity';\r\n\r\n@Entity()\r\nexport class Teams_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  shortname!: string;\r\n\r\n  @Column()\r\n  city!: string;\r\n\r\n  @Column()\r\n  nickname!: string;\r\n\r\n  @Column()\r\n  isactive!: boolean;\r\n\r\n  @Column()\r\n  users_id!: number;\r\n\r\n  @Column()\r\n  teamlogo!: string;\r\n\r\n  @Column()\r\n  teamaltlogo!: string;\r\n\r\n  @Column()\r\n  teamcolor!: string;\r\n\r\n  @Column()\r\n  teamtextcolor!: string;\r\n\r\n  @OneToOne(() => Divisions_V2, (division) => division.id, { eager: true })\r\n  @JoinColumn({ name: 'divisions_id' })\r\n  divisions_id!: Divisions_V2;\r\n\r\n  @AfterInsert()\r\n  logInsert() {\r\n    console.log('Inserted Team with id', this.id);\r\n  }\r\n\r\n  @AfterUpdate()\r\n  logUpdate() {\r\n    console.log('Updated Team with id', this.id);\r\n  }\r\n\r\n  @AfterRemove()\r\n  logRemove() {\r\n    console.log('Removed Team');\r\n  }\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\r\n\r\n@Entity()\r\nexport class Transactions_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  transaction_date!: Date;\r\n\r\n  @Column()\r\n  team_one_id!: number;\r\n\r\n  @Column('text', { array: true })\r\n  team_one_picks!: string[];\r\n\r\n  @Column('int', { array: true })\r\n  team_one_players!: number[];\r\n\r\n  @Column()\r\n  team_two_id!: number;\r\n\r\n  @Column('text', { array: true })\r\n  team_two_picks!: string[];\r\n\r\n  @Column('int', { array: true })\r\n  team_two_players!: number[];\r\n}\r\n","import {\r\n  Entity,\r\n  Column,\r\n  PrimaryGeneratedColumn,\r\n  AfterInsert,\r\n  AfterRemove,\r\n  AfterUpdate,\r\n} from 'typeorm';\r\n\r\n@Entity()\r\nexport class Users_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  firstname!: string;\r\n\r\n  @Column()\r\n  lastname!: string;\r\n\r\n  @Column()\r\n  email!: string;\r\n\r\n  @Column()\r\n  isadmin!: boolean;\r\n\r\n  @Column()\r\n  isactive!: boolean;\r\n\r\n  @AfterInsert()\r\n  logInsert() {\r\n    console.log('Inserted User with id', this.id);\r\n  }\r\n\r\n  @AfterUpdate()\r\n  logUpdate() {\r\n    console.log('Updated User with id', this.id);\r\n  }\r\n\r\n  @AfterRemove()\r\n  logRemove() {\r\n    console.log('Removed User');\r\n  }\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, Column, OneToOne } from 'typeorm';\r\nimport { Teams_V2 } from './team.entity';\r\n\r\n@Entity()\r\nexport class Waivers_V2 {\r\n  @PrimaryGeneratedColumn()\r\n  id!: number;\r\n\r\n  @Column()\r\n  team_id!: number;\r\n\r\n  @Column()\r\n  priority_number!: number;\r\n\r\n  @OneToOne(() => Teams_V2, (team) => team.id)\r\n  team!: Teams_V2;\r\n}\r\n","export * from './lib/api-entry-draft.module';\n","import { Drafts_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EntryDraftController } from './controllers';\nimport { EntryDraftMiddleware } from './middlewares';\nimport { ApiEntryDraftService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Drafts_V2])],\n  controllers: [EntryDraftController],\n  providers: [ApiEntryDraftService],\n})\nexport class ApiEntryDraftModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(EntryDraftMiddleware).forRoutes('*');\n  }\n}\n","import { Drafts_V2 } from '@api/entities';\nimport { Controller, Get, NotFoundException } from '@nestjs/common';\nimport { ApiEntryDraftService } from '../services';\n\n@Controller('entry-draft')\nexport class EntryDraftController {\n  constructor(private draftService: ApiEntryDraftService) {}\n\n  @Get('/ordered')\n  async getAll(): Promise<Drafts_V2[]> {\n    const entries = await this.draftService.getAll();\n\n    if (!entries || entries.length < 1) {\n      throw new NotFoundException('Entry Draft Table not found');\n    }\n    return entries;\n  }\n}\n","export * from './entry-draft.controller';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class EntryDraftMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Entry Draft Table...');\r\n    next();\r\n  }\r\n}\r\n","export * from './entry-draft.middleware';\r\n","import { Drafts_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiEntryDraftService {\r\n  constructor(\r\n    @InjectRepository(Drafts_V2) private repo: Repository<Drafts_V2>\r\n  ) {}\r\n\r\n  async getAll(): Promise<Drafts_V2[]> {\r\n    const draftTable = await this.repo.find({\r\n      relations: ['team_id', 'player_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          nickname: true,\r\n          teamlogo: true,\r\n        },\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n        },\r\n      },\r\n      order: {\r\n        draft_year: 'DESC',\r\n        draft_round: 'ASC',\r\n        draft_overall: 'ASC',\r\n      },\r\n    });\r\n\r\n    return draftTable;\r\n  }\r\n}\r\n","export * from './api-entry-draft.service';\r\n","export * from './lib/api-goalie-stats.module';","import { Goalies_Stats_V2, Teams_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { GoalieStatsController } from './controllers';\nimport { GoalieStatsMiddleware } from './middlewares';\nimport {\n  ApiGoalieStatsService,\n  ApiGoalieStatsLeadersService,\n  ApiGoalieAllTimeStatsService,\n} from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Goalies_Stats_V2, Teams_V2])],\n  controllers: [GoalieStatsController],\n  providers: [\n    ApiGoalieStatsService,\n    ApiGoalieStatsLeadersService,\n    ApiGoalieAllTimeStatsService,\n  ],\n})\nexport class ApiGoalieStatsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(GoalieStatsMiddleware).forRoutes('*');\n  }\n}\n","import {\n  StatGoalieLeadersDto,\n  StatGoaliesHistoryDto,\n} from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { stat } from 'fs';\nimport {\n  ApiGoalieAllTimeStatsService,\n  ApiGoalieStatsLeadersService,\n  ApiGoalieStatsService,\n} from '../services';\n\n@Controller('goalie-stats')\nexport class GoalieStatsController {\n  constructor(\n    private goalieStatsLeadersService: ApiGoalieStatsLeadersService,\n    private goalieStatsService: ApiGoalieStatsService,\n    private goalieAllTimeStatsService: ApiGoalieAllTimeStatsService\n  ) {}\n\n  @Get('/leaders/:season/:seasonType/:minGames')\n  async getGoalieStatsLeaders(@Param() param): Promise<StatGoalieLeadersDto> {\n    const stats = await this.goalieStatsLeadersService.getGoalieStatsLeaders(\n      param.season,\n      param.seasonType,\n      param.minGames\n    );\n\n    if (!stats) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/all/:season/:seasonType')\n  async getAllGoalieStats(@Param() param): Promise<any[]> {\n    const stats = await this.goalieStatsService.getAllGoalieStats(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats || stat.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/current/:season/:seasonType/:playerId')\n  async getGoalieStatsByPlayerId(@Param() param): Promise<any[]> {\n    const stats = await this.goalieStatsService.getGoalieStatsByPlayerId(\n      param.season,\n      param.seasonType,\n      param.playerId\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/season/:seasonType')\n  async getAllTimePlayerStatsBySeasonByType(\n    @Param() param\n  ): Promise<StatGoaliesHistoryDto[]> {\n    const stats =\n      await this.goalieAllTimeStatsService.getAllTimeGoalieStatsBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Goalie Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/all-time/:seasonType')\n  async getAllTimeGoalieStatsSummedBySeasonByType(\n    @Param() param\n  ): Promise<StatGoaliesHistoryDto[]> {\n    const stats =\n      await this.goalieAllTimeStatsService.getAllTimeGoalieStatsSummedBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Goalie Stats not found');\n    }\n    return stats;\n  }\n}\n","export * from './goalie-stats.controller';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class GoalieStatsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Goalie Stats...');\r\n    next();\r\n  }\r\n}\r\n","export * from './goalie-stats.middleware';\r\n","import { Goalies_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport { StatGoaliesHistoryDto } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { DataSource, MoreThan, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiGoalieAllTimeStatsService {\r\n  constructor(\r\n    @InjectRepository(Goalies_Stats_V2)\r\n    private repo: Repository<Goalies_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>,\r\n    @InjectDataSource() private dataSource: DataSource\r\n  ) {}\r\n\r\n  async getAllTimeGoalieStatsBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatGoaliesHistoryDto[]> {\r\n    const allStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        playing_year: true,\r\n        season_type: true,\r\n        games_played: true,\r\n        minutes_played: true,\r\n        goals_against_avg: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        shutouts: true,\r\n        goals_against: true,\r\n        saves: true,\r\n        shots_for: true,\r\n        save_pct: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        penalty_minutes: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        season_type: seasonType,\r\n        games_played: MoreThan(0),\r\n      },\r\n      order: {\r\n        wins: 'DESC',\r\n      },\r\n    });\r\n\r\n    const allStatsWithTeamInfo = await this.setTeamInfo(allStats);\r\n\r\n    const allStatsWithTeamInfoConverted = await this.convertStats(\r\n      allStatsWithTeamInfo,\r\n      false\r\n    );\r\n\r\n    return allStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  async getAllTimeGoalieStatsSummedBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatGoaliesHistoryDto[]> {\r\n    const result = await this.dataSource.query(\r\n      `select\r\n      b.firstname as firstname,\r\n      b.lastname as lastname,\r\n      b.isgoalie as isgoalie,\r\n      b.nhl_id as nhl_id,\r\n      a.player_id as player_id,\r\n      a.season_type as season_type, \r\n      sum(games_played) as games_played, \r\n      sum(wins) as wins, \r\n      sum(loss) as loss, \r\n      sum(ties) as ties, \r\n      sum(minutes_played) as minutes_played, \r\n      sum(en_goals) as en_goals, \r\n      sum(shutouts) as shutouts, \r\n      sum(goals_against) as goals_against, \r\n      sum(saves) as saves, \r\n      sum(shots_for) as shots_for, \r\n      sum(goals) as goals, \r\n      sum(assists) as assists, \r\n      sum(points) as points, \r\n      sum(penalty_minutes) as penalty_minutes\r\n      from\r\n      goalies_stats_v2 as a\r\n      left join players_v2 as b\r\n      on b.id = a.player_id\r\n      where (a.player_id = b.id\r\n      and\r\n      a.games_played > '0'\r\n      and\r\n      a.season_type = '${seasonType}')\r\n      group by b.firstname, b.lastname, b.isgoalie, b.nhl_id, a.player_id, a.season_type\r\n      order by wins DESC`\r\n    );\r\n\r\n    const allTimeStatsConverted = await this.convertStats(result, true);\r\n\r\n    return allTimeStatsConverted;\r\n  }\r\n\r\n  private async setTeamInfo(array: Goalies_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async convertStats(array: any[], raw: boolean) {\r\n    return await Promise.all(\r\n      array.map((stat: any) => ({\r\n        playing_year: stat.playing_year,\r\n        season_type: stat.season_type,\r\n        teamInfo: !raw ? stat['teamInfo'] : null,\r\n        player_id: !raw\r\n          ? stat.player_id\r\n          : {\r\n              id: stat['player_id'],\r\n              firstname: stat['firstname'],\r\n              lastname: stat['lastname'],\r\n              nhl_id: stat['nhl_id'],\r\n              isactive: null,\r\n              isgoalie: stat['isgoalie'],\r\n              isdefense: null,\r\n              isforward: null,\r\n              is_protected: null,\r\n            },\r\n        games_played: Number(stat.games_played),\r\n        minutes_played: Number(stat.minutes_played),\r\n        goals_against_avg: !raw\r\n          ? Number(Number(stat.goals_against_avg).toFixed(2))\r\n          : Number(\r\n              (\r\n                (Number(stat.goals_against) * 60) /\r\n                Number(stat.minutes_played)\r\n              ).toFixed(2)\r\n            ),\r\n        wins: Number(stat.wins),\r\n        loss: Number(stat.loss),\r\n        ties: Number(stat.ties),\r\n        shutouts: Number(stat.shutouts),\r\n        goals_against: Number(stat.goals_against),\r\n        saves: Number(stat.saves),\r\n        shots_for: Number(stat.shots_for),\r\n        save_pct: !raw\r\n          ? Number(Number(stat.save_pct).toFixed(3))\r\n          : Number((Number(stat.saves) / Number(stat.shots_for)).toFixed(3)),\r\n        goals: Number(stat.goals),\r\n        assists: Number(stat.assists),\r\n        points: Number(stat.points),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { Goalies_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport {\r\n  StatGoalieLeaderDto,\r\n  StatGoalieLeadersDto,\r\n} from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, MoreThan } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiGoalieStatsLeadersService {\r\n  constructor(\r\n    @InjectRepository(Goalies_Stats_V2)\r\n    private repo: Repository<Goalies_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getGoalieStatsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    minGames: string\r\n  ): Promise<StatGoalieLeadersDto> {\r\n    const shotsFacedLeaders = await this.getShotsFacedLeaders(\r\n      season,\r\n      seasonType,\r\n      minGames\r\n    );\r\n    const gaaLeaders = await this.getGaaLeaders(season, seasonType, minGames);\r\n    const savePctLeaders = await this.getSavePctLeaders(\r\n      season,\r\n      seasonType,\r\n      minGames\r\n    );\r\n    const shutoutsLeaders = await this.getShutoutLeaders(season, seasonType);\r\n    const winsLeaders = await this.getWinsLeaders(season, seasonType);\r\n\r\n    return {\r\n      shotsFaced: shotsFacedLeaders as unknown as StatGoalieLeaderDto[],\r\n      gaa: gaaLeaders as unknown as StatGoalieLeaderDto[],\r\n      savePct: savePctLeaders as unknown as StatGoalieLeaderDto[],\r\n      shutouts: shutoutsLeaders as unknown as StatGoalieLeaderDto[],\r\n      wins: winsLeaders as unknown as StatGoalieLeaderDto[],\r\n    };\r\n  }\r\n\r\n  private async getShotsFacedLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    minGames: string\r\n  ) {\r\n    const shotsFacedLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        shots_for: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        games_played: MoreThan(Number(minGames)),\r\n      },\r\n      order: {\r\n        shots_for: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const shotsFacedLeadersWithTeamInfo = await this.setTeamInfo(\r\n      shotsFacedLeaders\r\n    );\r\n\r\n    return shotsFacedLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getGaaLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    minGames: string\r\n  ) {\r\n    const gaaLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        goals_against_avg: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        games_played: MoreThan(Number(minGames)),\r\n      },\r\n      order: {\r\n        goals_against_avg: 'ASC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const gaaLeadersWithTeamInfo = await this.setTeamInfo(gaaLeaders);\r\n\r\n    return gaaLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getSavePctLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    minGames: string\r\n  ) {\r\n    const savePctLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        save_pct: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        games_played: MoreThan(Number(minGames)),\r\n      },\r\n      order: {\r\n        save_pct: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const savePctLeadersWithTeamInfo = await this.setTeamInfo(savePctLeaders);\r\n\r\n    return savePctLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getShutoutLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const shutoutLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        shutouts: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        shutouts: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const shutoutLeadersWithTeamInfo = await this.setTeamInfo(shutoutLeaders);\r\n\r\n    return shutoutLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getWinsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const winLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        wins: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        wins: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const winLeadersWithTeamInfo = await this.setTeamInfo(winLeaders);\r\n\r\n    return winLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async setTeamInfo(array: Goalies_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Goalies_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiGoalieStatsService {\r\n  constructor(\r\n    @InjectRepository(Goalies_Stats_V2)\r\n    private repo: Repository<Goalies_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getAllGoalieStats(season: string, seasonType: 'Regular' | 'Playoffs') {\r\n    const allGoalieStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        games_played: true,\r\n        minutes_played: true,\r\n        goals_against_avg: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        en_goals: true,\r\n        shutouts: true,\r\n        goals_against: true,\r\n        saves: true,\r\n        shots_for: true,\r\n        save_pct: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        penalty_minutes: true,\r\n        pass_pct: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        wins: 'DESC',\r\n      },\r\n    });\r\n\r\n    const goalieStatsWithTeamInfo = await this.setTeamInfo(allGoalieStats);\r\n\r\n    const goalieStatsWithTeamInfoConverted = await this.convertStats(\r\n      goalieStatsWithTeamInfo\r\n    );\r\n\r\n    return goalieStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  async getGoalieStatsByPlayerId(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    playerId: number\r\n  ) {\r\n    const allGoalieStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        games_played: true,\r\n        minutes_played: true,\r\n        goals_against_avg: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        en_goals: true,\r\n        shutouts: true,\r\n        goals_against: true,\r\n        saves: true,\r\n        shots_for: true,\r\n        save_pct: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        penalty_minutes: true,\r\n        pass_pct: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        player_id: {\r\n          id: playerId,\r\n        },\r\n      },\r\n      order: {\r\n        wins: 'DESC',\r\n      },\r\n    });\r\n\r\n    const goalieStatsWithTeamInfo = await this.setTeamInfo(allGoalieStats);\r\n\r\n    const goalieStatsWithTeamInfoConverted = await this.convertStats(\r\n      goalieStatsWithTeamInfo\r\n    );\r\n\r\n    return goalieStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  private async setTeamInfo(array: Goalies_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async convertStats(array: Goalies_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map((stat: Goalies_Stats_V2) => ({\r\n        ...stat,\r\n        games_played: Number(stat.games_played),\r\n        minutes_played: Number(stat.minutes_played),\r\n        goals_against_avg: Number(Number(stat.goals_against_avg).toFixed(2)),\r\n        wins: Number(stat.wins),\r\n        loss: Number(stat.loss),\r\n        ties: Number(stat.ties),\r\n        en_goals: Number(stat.en_goals),\r\n        shutouts: Number(stat.shutouts),\r\n        goals_against: Number(stat.goals_against),\r\n        saves: Number(stat.saves),\r\n        shots_for: Number(stat.shots_for),\r\n        save_pct: Number(Number(stat.save_pct).toFixed(3)),\r\n        goals: Number(stat.goals),\r\n        assists: Number(stat.assists),\r\n        points: Number(stat.points),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        pass_pct: Number(stat.pass_pct),\r\n      }))\r\n    );\r\n  }\r\n}\r\n","export * from './api-goalie-stats-leaders.service';\r\nexport * from './api-goalie-stats.service';\r\nexport * from './api-goalie-all-time-stats.service';","export * from './lib/api-league.module';\n","import { Current_Season_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { LeagueController } from './controllers';\nimport { LeagueMiddleware } from './middlewares/league.middleware';\nimport { LeagueService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Current_Season_V2])],\n  controllers: [LeagueController],\n  providers: [LeagueService],\n})\nexport class ApiLeagueModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LeagueMiddleware).forRoutes('*');\n  }\n}\n","export * from './league.controller';\r\n","import { LeagueDataDto } from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException } from '@nestjs/common';\nimport { LeagueService } from '../services';\n\n@Controller('league')\nexport class LeagueController {\n  constructor(private leagueService: LeagueService) {}\n\n  @Get('/current-data')\n  async getCurrentData(): Promise<LeagueDataDto> {\n    const data = await this.leagueService.getCurrentLeagueData();\n\n    if (!data) {\n      throw new NotFoundException('League Data not found');\n    }\n    return data;\n  }\n}\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class LeagueMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request League...');\r\n    next();\r\n  }\r\n}","export * from './league.service';\r\n","import { Current_Season_V2 } from '@api/entities';\r\nimport { LeagueDataDto } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class LeagueService {\r\n  constructor(\r\n    @InjectRepository(Current_Season_V2)\r\n    private repo: Repository<Current_Season_V2>\r\n  ) {}\r\n\r\n  async getCurrentLeagueData(): Promise<LeagueDataDto> {\r\n    return (await this.repo.find()) as unknown as LeagueDataDto;\r\n  }\r\n}\r\n","export * from './lib/api-nhl.module';\n","import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { HttpModule } from '@nestjs/axios';\nimport { NhlController } from './controllers';\nimport { NhlMiddleware } from './middlewares';\nimport { ApiNhlService } from './services';\n\n@Module({\n  imports: [HttpModule],\n  controllers: [NhlController],\n  providers: [ApiNhlService],\n})\nexport class ApiNhlModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(NhlMiddleware).forRoutes('*');\n  }\n}\n","export * from './nhl.controller';\r\n","import { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { ApiNhlService } from '../services';\n\n@Controller('nhl')\nexport class NhlController {\n  constructor(private nhlService: ApiNhlService) {}\n\n  @Get('/nhl-leaders/:season/:playerType/:statType')\n  async getNhlLeaders(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlLeaders(\n      param.playerType,\n      param.statType,\n      param.season\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Leaders not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/nhl-leaders/:season/:playerType/:statType/:minGames')\n  async getNhlGoalieLeaders(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlGoalieLeaders(\n      param.playerType,\n      param.statType,\n      param.season,\n      param.minGames\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Leaders not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/nhl-rookie-leaders/:season/:playerType/:statType')\n  async getNhlRookieLeaders(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlRookieLeaders(\n      param.playerType,\n      param.statType,\n      param.season\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Leaders not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/nhl-defense-leaders/:season/:playerType/:statType')\n  async getNhlDefenseLeaders(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlDefenseLeaders(\n      param.playerType,\n      param.statType,\n      param.season\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Leaders not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/nhl-summary/sportsnet/:season/:seasonType')\n  async getNhlSummaryFromSportsnet(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlSummaryFromSportsnet(\n      param.season,\n      param.seasonType\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Summary not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/nhl-summary/rookies/:season/:player/:statsType/:sort/:start/:pageSize')\n  async getNhlRookieSummary(@Param() param) {\n    const nhlLeaders = await this.nhlService.getNhlRookieSummary(\n      param.season,\n      param.player,\n      param.statsType,\n      param.sort,\n      param.start,\n      param.pageSize\n    );\n\n    if (!nhlLeaders) {\n      throw new NotFoundException('Nhl Rookie Summary not found');\n    }\n    return nhlLeaders;\n  }\n\n  @Get('/player/stats/:playerId/:season')\n  async getNhlPlayerStatsByPlayerId(@Param() param) {\n    const stats = await this.nhlService.getNhlPlayerStatsByPlayerId(\n      param.playerId,\n      param.season\n    );\n\n    if (!stats) {\n      throw new NotFoundException('Nhl Player Stat not found');\n    }\n    return stats;\n  }\n}\n","export * from './nhl.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class NhlMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Nhl...');\r\n    next();\r\n  }\r\n}\r\n","import { HttpService } from '@nestjs/axios';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { AxiosResponse } from 'axios';\r\nimport { map, Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ApiNhlService {\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  nhlCOM = 'https://api.nhle.com/stats/rest/en/leaders';\r\n  nhlAPI = 'https://statsapi.web.nhl.com/api/v1/people';\r\n  nhlComSummary = 'https://api.nhle.com/stats/rest/en';\r\n  sportsNet = 'https://mobile-statsv2.sportsnet.ca/web_player_table';\r\n\r\n  getNhlLeaders(\r\n    playerType: string,\r\n    statType: string,\r\n    season: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.nhlCOM}/${playerType}s/${statType}?cayenneExp=season=${season}%20and%20gameType=2`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlGoalieLeaders(\r\n    playerType: string,\r\n    statType: string,\r\n    season: string,\r\n    minGames: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.nhlCOM}/${playerType}s/${statType}?cayenneExp=season=${season}%20and%20gameType=2%20and%20gamesPlayed%20%3E=%20${minGames}`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlRookieLeaders(\r\n    playerType: string,\r\n    statType: string,\r\n    season: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.nhlCOM}/${playerType}s/${statType}?cayenneExp=season=${season}%20and%20gameType=2%20and%20isRookie%20=%20%27Y%27`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlDefenseLeaders(\r\n    playerType: string,\r\n    statType: string,\r\n    season: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.nhlCOM}/${playerType}s/${statType}?cayenneExp=season=${season}%20and%20gameType=2%20and%20player.positionCode%20=%20%27D%27`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlSummaryFromSportsnet(\r\n    season: string,\r\n    seasonType: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.sportsNet}?league=nhl&season=${season}&season_type=${seasonType}`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlRookieSummary(\r\n    season: string,\r\n    player: string,\r\n    statsType: string,\r\n    sort: string,\r\n    start: string,\r\n    pageSize: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const leaders = this.httpService\r\n      .get(\r\n        `${this.nhlComSummary}/${player}/summary?isAggregate=false&isGame=false&sort=%5B%7B%22property%22:%22${statsType}%22,%22direction%22:%22${sort}%22%7D%5D&start=${start}&limit=${pageSize}&cayenneExp=gameTypeId=2%20and%20isRookie=%221%22%20and%20seasonId%3C=${season}%20and%20seasonId%3E=${season}`\r\n      )\r\n      .pipe(map((response) => response.data));\r\n\r\n    return leaders;\r\n  }\r\n\r\n  getNhlPlayerStatsByPlayerId(\r\n    playerId: number,\r\n    season: string\r\n  ): Observable<AxiosResponse<any[]>> {\r\n    const stats = this.httpService\r\n      .get(\r\n        `${this.nhlAPI}/${playerId}/stats?stats=statsSingleSeason&season=${season}`\r\n      )\r\n      .pipe(map((response) => response.data.stats[0].splits));\r\n\r\n    return stats;\r\n  }\r\n}\r\n","export * from './api-nhl.service';\r\n","export * from './lib/api-player-info.module';","import { Module } from '@nestjs/common';\nimport { PlayerInfoController } from './controllers';\n\n@Module({\n  controllers: [PlayerInfoController],\n  providers: [],\n  exports: [],\n})\nexport class ApiPlayerInfoModule {}\n","export * from './player-info.controller';\r\n","import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\n\n@Controller('player-info')\nexport class PlayerInfoController {\n  @Get()\n  getAllPlayers() {}\n\n  @Get('/players/:id')\n  getPlayerInfoById(@Param('id') id: string) {}\n\n  @Get('/goalies/:id')\n  getGoalieInfoById(@Param('id') id: string) {}\n\n  @Get('/players/nhl/logo/:id')\n  getPlayerLogoByNhlId(@Param('id') id: string) {}\n\n  @Get('/goalies/nhl/logo/:id')\n  getGoalieLogoByNhlId(@Param('id') id: string) {}\n\n  @Get('/players/active')\n  getActivePlayers() {}\n\n  @Get('/player/:id')\n  getPlayerForEditById(@Param('id') id: string) {}\n\n  @Put('/player/:id')\n  updatePlayerById(@Body() body: any, @Param('id') id: string) {}\n\n  @Post('/players/add')\n  addPlayer(@Body() body: any) {}\n\n  @Delete('/delete/:id')\n  deletePlayer(@Body() body: any, @Param('id') id: string) {}\n}\n","export * from './lib/api-player-ratings.module';\n","import { Module } from '@nestjs/common';\nimport { PlayerRatingsController } from './controllers';\n\n@Module({\n  controllers: [PlayerRatingsController],\n  providers: [],\n  exports: [],\n})\nexport class ApiPlayerRatingsModule {}\n","export * from './player-ratings.controller';\r\n","import { Controller } from '@nestjs/common';\n\n@Controller('player-ratings')\nexport class PlayerRatingsController {}\n","export * from './lib/api-player-stats.module';\n","import { Players_Stats_V2, Teams_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PlayerStatsController } from './controllers';\nimport { PlayerStatsMiddleware } from './middlewares';\nimport {\n  ApiPlayerAllTimeStatsService,\n  ApiPlayerLeadersStatsService,\n  ApiPlayerStatsService,\n  ApiUserPlayerStatsService,\n} from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Players_Stats_V2, Teams_V2])],\n  controllers: [PlayerStatsController],\n  providers: [\n    ApiPlayerStatsService,\n    ApiPlayerLeadersStatsService,\n    ApiPlayerAllTimeStatsService,\n    ApiUserPlayerStatsService,\n  ],\n})\nexport class ApiPlayerStatsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(PlayerStatsMiddleware).forRoutes('*');\n  }\n}\n","export * from './player-stats.controller';\r\n","import {\n  StatPlayerLeadersDto,\n  StatPlayersHistoryDto,\n  StatUserPlayersHistoryDto,\n} from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport {\n  ApiPlayerAllTimeStatsService,\n  ApiPlayerLeadersStatsService,\n  ApiPlayerStatsService,\n  ApiUserPlayerStatsService,\n} from '../services';\n\n@Controller('player-stats')\nexport class PlayerStatsController {\n  constructor(\n    private playerLeaderStatsService: ApiPlayerLeadersStatsService,\n    private playerStatsService: ApiPlayerStatsService,\n    private playerAllTimeStatsService: ApiPlayerAllTimeStatsService,\n    private userPlayersStatsService: ApiUserPlayerStatsService\n  ) {}\n\n  @Get('/leaders/:season/:seasonType')\n  async getPlayerStatsLeaders(@Param() param): Promise<StatPlayerLeadersDto> {\n    const stats = await this.playerLeaderStatsService.getPlayerStatsLeaders(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats) {\n      throw new NotFoundException('Player Leader Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/all/:season/:seasonType')\n  async getPlayerStatsAll(@Param() param): Promise<any[]> {\n    const stats = await this.playerStatsService.getAllStats(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/current/:season/:seasonType/:playerId')\n  async getPlayerStatsByPlayerId(@Param() param): Promise<any[]> {\n    const stats = await this.playerStatsService.getPlayerStatsByPlayerId(\n      param.season,\n      param.seasonType,\n      param.playerId\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/season/:seasonType')\n  async getAllTimePlayerStatsBySeasonByType(\n    @Param() param\n  ): Promise<StatPlayersHistoryDto[]> {\n    const stats =\n      await this.playerAllTimeStatsService.getAllTimePlayerStatsBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/all-time/:seasonType')\n  async getAllTimePlayerStatsSummedBySeasonByType(\n    @Param() param\n  ): Promise<StatPlayersHistoryDto[]> {\n    const stats =\n      await this.playerAllTimeStatsService.getAllTimePlayerStatsSummedBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/user/:userId/history/:seasonType')\n  async getTeamPlayerStatsBySeasonType(\n    @Param() param\n  ): Promise<StatUserPlayersHistoryDto[]> {\n    const record =\n      await this.userPlayersStatsService.getUserPlayerStatsBySeasonType(\n        param.userId,\n        param.seasonType\n      );\n\n    if (!record) {\n      throw new NotFoundException('Team Players Stats not found');\n    }\n    return record;\n  }\n\n  @Get('/user/:userId/history/all/:seasonType')\n  async getTeamPlayerStatsAllTimeBySeasonType(\n    @Param() param\n  ): Promise<StatUserPlayersHistoryDto[]> {\n    const record =\n      await this.userPlayersStatsService.getUserPlayerStatsAllTimeBySeasonType(\n        param.userId,\n        param.seasonType\n      );\n\n    if (!record) {\n      throw new NotFoundException('Team Players Stats not found');\n    }\n    return record;\n  }\n}\n","export * from './player-stats.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class PlayerStatsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Player Stats...');\r\n    next();\r\n  }\r\n}\r\n","import { Players_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport { StatPlayersHistoryDto } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { DataSource, MoreThan, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiPlayerAllTimeStatsService {\r\n  constructor(\r\n    @InjectRepository(Players_Stats_V2)\r\n    private repo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>,\r\n    @InjectDataSource() private dataSource: DataSource\r\n  ) {}\r\n\r\n  async getAllTimePlayerStatsBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatPlayersHistoryDto[]> {\r\n    const allStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        position: true,\r\n        games_played: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        plus_minus: true,\r\n        penalty_minutes: true,\r\n        pp_goals: true,\r\n        sh_goals: true,\r\n        gw_goals: true,\r\n        shots: true,\r\n        shooting_pct: true,\r\n        minutes_played: true,\r\n        minutes_per_game: true,\r\n        fo_pct: true,\r\n        pass_pct: true,\r\n        corner_pct: true,\r\n        hits: true,\r\n        blocked_shots: true,\r\n        playing_year: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        season_type: seasonType,\r\n      },\r\n      take: 1500,\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n    });\r\n\r\n    const allStatsWithTeamInfo = await this.setTeamInfo(allStats);\r\n\r\n    const allStatsWithTeamInfoConverted = await this.convertStats(\r\n      allStatsWithTeamInfo,\r\n      false\r\n    );\r\n\r\n    return allStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  async getAllTimePlayerStatsSummedBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatPlayersHistoryDto[]> {\r\n    const result = await this.dataSource.query(\r\n      `select\r\n      b.firstname as firstname,\r\n      b.lastname as lastname,\r\n      b.isdefense as isdefense,\r\n      b.isforward as isforward,\r\n      b.isgoalie as isgoalie,\r\n      b.nhl_id as nhl_id,\r\n      a.player_id as player_id,\r\n      a.season_type as season_type, \r\n      a.position as position,\r\n      sum(a.games_played) as games_played, \r\n      sum(a.goals) as goals, \r\n      sum(a.assists) as assists, \r\n      sum(a.points) as points, \r\n      sum(a.plus_minus) as plus_minus, \r\n      sum(a.penalty_minutes) as penalty_minutes, \r\n      sum(a.sh_goals) as sh_goals, \r\n      sum(a.pp_goals) as pp_goals, \r\n      sum(a.gw_goals) as gw_goals, \r\n      sum(a.shots) as shots, \r\n      sum(a.minutes_played) as minutes_played, \r\n      sum(a.hits) as hits, \r\n      sum(a.blocked_shots) as blocked_shots\r\n      from\r\n      players_stats_v2 as a\r\n      left join players_v2 as b\r\n      on b.id = a.player_id\r\n      where (a.player_id = b.id\r\n      and\r\n      a.points > '0'\r\n      and\r\n      a.season_type = '${seasonType}')\r\n      group by b.firstname, b.lastname, b.isgoalie, b.isdefense, b.isforward, b.nhl_id, a.player_id, a.season_type, a.position\r\n      order by points DESC`\r\n    );\r\n\r\n    const allTimeStatsConverted = await this.convertStats(result, true);\r\n\r\n    return allTimeStatsConverted;\r\n  }\r\n\r\n  private async setTeamInfo(array: Players_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async convertStats(array: any[], raw: boolean) {\r\n    return await Promise.all(\r\n      array.map((stat: any) => ({\r\n        playing_year: stat.playing_year,\r\n        season_type: stat.season_type,\r\n        teamInfo: !raw ? stat['teamInfo'] : null,\r\n        player_id: !raw\r\n          ? stat.player_id\r\n          : {\r\n              id: stat['player_id'],\r\n              firstname: stat['firstname'],\r\n              lastname: stat['lastname'],\r\n              nhl_id: stat['nhl_id'],\r\n              isactive: null,\r\n              isgoalie: null,\r\n              isdefense: stat['isdefense'],\r\n              isforward: stat['isforward'],\r\n              is_protected: null,\r\n            },\r\n        position: stat.position,\r\n        games_played: Number(stat.games_played),\r\n        goals: Number(stat.goals),\r\n        assists: Number(stat.assists),\r\n        points: Number(stat.points),\r\n        pointsPerSixty: Number(\r\n          ((Number(stat.points) / Number(stat.minutes_played)) * 60).toFixed(2)\r\n        ),\r\n        plus_minus: Number(stat.plus_minus),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        pp_goals: Number(stat.pp_goals),\r\n        sh_goals: Number(stat.sh_goals),\r\n        gw_goals: Number(stat.gw_goals),\r\n        shots: Number(stat.shots),\r\n        shooting_pct: !raw\r\n          ? Number(stat.shooting_pct)\r\n          : Number(\r\n              ((Number(stat.goals) / Number(stat.shots)) * 100).toFixed(1)\r\n            ),\r\n        minutes_per_game: !raw\r\n          ? Number(stat.minutes_per_game)\r\n          : Number(\r\n              (Number(stat.minutes_played) / Number(stat.games_played)).toFixed(\r\n                1\r\n              )\r\n            ),\r\n        fo_pct: !raw ? Number(stat.fo_pct) : null,\r\n        pass_pct: !raw ? Number(stat.pass_pct) : null,\r\n        corner_pct: !raw ? Number(stat.corner_pct) : null,\r\n        hit_per_game: Number((Number(stat.hits) / Number(stat.games_played)).toFixed(1)),\r\n        blocked_shots: Number(stat.blocked_shots),\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { Players_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport {\r\n  StatPlayerLeaderDto,\r\n  StatPlayerLeadersDto,\r\n} from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiPlayerLeadersStatsService {\r\n  constructor(\r\n    @InjectRepository(Players_Stats_V2)\r\n    private repo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getPlayerStatsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatPlayerLeadersDto> {\r\n    const hitsLeaders = await this.getHitsLeaders(season, seasonType);\r\n    const pointsLeaders = await this.getPointsLeaders(season, seasonType);\r\n    const assistLeaders = await this.getAssistLeaders(season, seasonType);\r\n    const bestPlusMinusLeaders = await this.getBestPlusMinusLeaders(\r\n      season,\r\n      seasonType\r\n    );\r\n    const blockedShotLeaders = await this.getblockedShotLeaders(\r\n      season,\r\n      seasonType\r\n    );\r\n    const currSteakLeaders = await this.getCurrSteakLeaders(season, seasonType);\r\n    const defenseLeaders = await this.getDefenseLeaders(season, seasonType);\r\n    const goalLeaders = await this.getGoalLeaders(season, seasonType);\r\n    const longStreakLeaders = await this.getLongStreakLeaders(\r\n      season,\r\n      seasonType\r\n    );\r\n    const minutesLeaders = await this.getMinutesLeaders(season, seasonType);\r\n    const penaltyLeaders = await this.getPenaltyLeaders(season, seasonType);\r\n    const ppGoalsLeaders = await this.getPpgoalsLeaders(season, seasonType);\r\n    const rookieLeaders = await this.getRookieLeaders(season, seasonType);\r\n    const shGoalsLeaders = await this.getShGoalsLeaders(season, seasonType);\r\n    const shotsLeaders = await this.getShotsLeaders(season, seasonType);\r\n\r\n    return {\r\n      hits: hitsLeaders as unknown as StatPlayerLeaderDto[],\r\n      points: pointsLeaders as unknown as StatPlayerLeaderDto[],\r\n      assists: assistLeaders as unknown as StatPlayerLeaderDto[],\r\n      bestPlusMinus: bestPlusMinusLeaders as unknown as StatPlayerLeaderDto[],\r\n      blockedShots: blockedShotLeaders as unknown as StatPlayerLeaderDto[],\r\n      currStreak: currSteakLeaders as unknown as StatPlayerLeaderDto[],\r\n      defense: defenseLeaders as unknown as StatPlayerLeaderDto[],\r\n      goals: goalLeaders as unknown as StatPlayerLeaderDto[],\r\n      longStreak: longStreakLeaders as unknown as StatPlayerLeaderDto[],\r\n      minutes: minutesLeaders as unknown as StatPlayerLeaderDto[],\r\n      penalties: penaltyLeaders as unknown as StatPlayerLeaderDto[],\r\n      ppGoals: ppGoalsLeaders as unknown as StatPlayerLeaderDto[],\r\n      rookies: rookieLeaders as unknown as StatPlayerLeaderDto[],\r\n      shGoals: shGoalsLeaders as unknown as StatPlayerLeaderDto[],\r\n      shots: shotsLeaders as unknown as StatPlayerLeaderDto[],\r\n    };\r\n  }\r\n\r\n  private async getHitsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const hitsLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        hits: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: {\r\n        player_id: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        hits: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const hitsLeadersWithTeamInfo = await this.setTeamInfo(hitsLeaders);\r\n\r\n    return hitsLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getPointsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const pointsLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        points: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const pointsLeadersWithTeamInfo = await this.setTeamInfo(pointsLeaders);\r\n\r\n    return pointsLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getAssistLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const assistLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        assists: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        assists: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const assistLeadersWithTeamInfo = await this.setTeamInfo(assistLeaders);\r\n\r\n    return assistLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getBestPlusMinusLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const bestPlusMinusLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        plus_minus: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        plus_minus: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const bestPlusMinusLeadersWithTeamInfo = await this.setTeamInfo(\r\n      bestPlusMinusLeaders\r\n    );\r\n\r\n    return bestPlusMinusLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getblockedShotLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const blockedShotLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        blocked_shots: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        blocked_shots: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const blockedShotLeadersWithTeamInfo = await this.setTeamInfo(\r\n      blockedShotLeaders\r\n    );\r\n\r\n    return blockedShotLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getCurrSteakLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const currStreakLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        current_points_streak: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        current_points_streak: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const currStreakLeadersWithTeamInfo = await this.setTeamInfo(\r\n      currStreakLeaders\r\n    );\r\n\r\n    return currStreakLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getDefenseLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const defenseLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        points: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n          isdefense: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        player_id: {\r\n          isdefense: true,\r\n        },\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const defenseLeadersWithTeamInfo = await this.setTeamInfo(defenseLeaders);\r\n\r\n    return defenseLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getGoalLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const goalLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        goals: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        goals: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const goalLeadersWithTeamInfo = await this.setTeamInfo(goalLeaders);\r\n\r\n    return goalLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getLongStreakLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const longStreakLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        longest_points_streak: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        longest_points_streak: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const longStreakLeadersWithTeamInfo = await this.setTeamInfo(\r\n      longStreakLeaders\r\n    );\r\n\r\n    return longStreakLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getMinutesLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const minutesLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        minutes_played: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        minutes_played: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const minutesLeadersWithTeamInfo = await this.setTeamInfo(minutesLeaders);\r\n\r\n    return minutesLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getPenaltyLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const penaltyLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        penalty_minutes: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        penalty_minutes: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const penaltyLeadersWithTeamInfo = await this.setTeamInfo(penaltyLeaders);\r\n\r\n    return penaltyLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getPpgoalsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const ppGoalsLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        pp_goals: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        pp_goals: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const ppGoalsLeadersWithTeamInfo = await this.setTeamInfo(ppGoalsLeaders);\r\n\r\n    return ppGoalsLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getRookieLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const rookieLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        points: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        player_status: 'Rookie',\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const rookieLeadersWithTeamInfo = await this.setTeamInfo(rookieLeaders);\r\n\r\n    return rookieLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getShGoalsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const shGoalsLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        sh_goals: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        sh_goals: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const shGoalsLeadersWithTeamInfo = await this.setTeamInfo(shGoalsLeaders);\r\n\r\n    return shGoalsLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async getShotsLeaders(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const shotsLeaders = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        shots: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isgoalie: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        shots: 'DESC',\r\n      },\r\n      take: 10,\r\n    });\r\n\r\n    const shotsLeadersWithTeamInfo = await this.setTeamInfo(shotsLeaders);\r\n\r\n    return shotsLeadersWithTeamInfo;\r\n  }\r\n\r\n  private async setTeamInfo(array: Players_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Players_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiPlayerStatsService {\r\n  constructor(\r\n    @InjectRepository(Players_Stats_V2)\r\n    private repo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getAllStats(season: string, seasonType: 'Regular' | 'Playoffs') {\r\n    const allStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        position: true,\r\n        games_played: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        plus_minus: true,\r\n        penalty_minutes: true,\r\n        pp_goals: true,\r\n        sh_goals: true,\r\n        gw_goals: true,\r\n        gt_goals: true,\r\n        shots: true,\r\n        shooting_pct: true,\r\n        minutes_played: true,\r\n        minutes_per_game: true,\r\n        fo_pct: true,\r\n        pass_pct: true,\r\n        corner_pct: true,\r\n        hits: true,\r\n        blocked_shots: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n    });\r\n\r\n    const allStatsWithTeamInfo = await this.setTeamInfo(allStats);\r\n\r\n    const allStatsWithTeamInfoConverted = await this.convertStats(\r\n      allStatsWithTeamInfo\r\n    );\r\n\r\n    return allStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  async getPlayerStatsByPlayerId(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs',\r\n    playerId: number\r\n  ) {\r\n    const allStats = await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        position: true,\r\n        games_played: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        plus_minus: true,\r\n        penalty_minutes: true,\r\n        pp_goals: true,\r\n        sh_goals: true,\r\n        gw_goals: true,\r\n        gt_goals: true,\r\n        shots: true,\r\n        shooting_pct: true,\r\n        minutes_played: true,\r\n        minutes_per_game: true,\r\n        fo_pct: true,\r\n        pass_pct: true,\r\n        corner_pct: true,\r\n        hits: true,\r\n        blocked_shots: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n        player_id: {\r\n          id: playerId,\r\n        },\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n    });\r\n\r\n    const allStatsWithTeamInfo = await this.setTeamInfo(allStats);\r\n\r\n    const allStatsWithTeamInfoConverted = await this.convertStats(\r\n      allStatsWithTeamInfo\r\n    );\r\n\r\n    return allStatsWithTeamInfoConverted;\r\n  }\r\n\r\n  private async setTeamInfo(array: Players_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n      },\r\n      where: {\r\n        shortname: teamName,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async convertStats(array: Players_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map((stat: Players_Stats_V2) => ({\r\n        ...stat,\r\n        games_played: Number(stat.games_played),\r\n        goals: Number(stat.goals),\r\n        assists: Number(stat.assists),\r\n        points: Number(stat.points),\r\n        plus_minus: Number(stat.plus_minus),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        pp_goals: Number(stat.pp_goals),\r\n        sh_goals: Number(stat.sh_goals),\r\n        gw_goals: Number(stat.gw_goals),\r\n        gt_goals: Number(stat.gt_goals),\r\n        shots: Number(stat.shots),\r\n        shooting_pct: Number(stat.shooting_pct),\r\n        minutes_played: Number(stat.minutes_played),\r\n        minutes_per_game: Number(stat.minutes_per_game),\r\n        fo_pct: Number(stat.fo_pct),\r\n        pass_pct: Number(stat.pass_pct),\r\n        corner_pct: Number(stat.corner_pct),\r\n        hits: Number(stat.hits),\r\n        blocked_shots: Number(stat.blocked_shots),\r\n      }))\r\n    );\r\n  }\r\n}\r\n","import { Players_Stats_V2, Teams_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { DataSource, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiUserPlayerStatsService {\r\n  constructor(\r\n    @InjectRepository(Players_Stats_V2)\r\n    private repo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>,\r\n    @InjectDataSource() private dataSource: DataSource\r\n  ) {}\r\n\r\n  async getUserPlayerStatsBySeasonType(\r\n    userId: number,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const userTeams = await this.teamInfoRepo.findBy({ users_id: userId });\r\n\r\n    const userTeamsWithPlayerStats = await this.setPlayerStats(\r\n      userTeams,\r\n      seasonType\r\n    );\r\n\r\n    const userTeamsWithPlayersStatsConverted =\r\n      await this.setConvertedPlayersStats(userTeamsWithPlayerStats, false);\r\n\r\n    return userTeamsWithPlayersStatsConverted;\r\n  }\r\n\r\n  async getUserPlayerStatsAllTimeBySeasonType(\r\n    userId: number,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    const userTeams = await this.teamInfoRepo.findBy({ users_id: userId });\r\n\r\n    const userTeamsWithPlayerStats = await this.setPlayerAllTimeStats(\r\n      userTeams,\r\n      seasonType\r\n    );\r\n\r\n    const userTeamsWithPlayersStatsConverted =\r\n      await this.setConvertedPlayersStats(userTeamsWithPlayerStats, true);\r\n\r\n    return userTeamsWithPlayersStatsConverted;\r\n  }\r\n\r\n  private async setPlayerStats(\r\n    array: Teams_V2[],\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        playerStats: await this.getPlayerStats(item.shortname, seasonType),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async setPlayerAllTimeStats(\r\n    array: Teams_V2[],\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        playerStats: await this.getPlayerAllTimeStats(\r\n          item.shortname,\r\n          seasonType\r\n        ),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getPlayerAllTimeStats(\r\n    teamShortName: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await this.dataSource.query(\r\n      `select\r\n      b.firstname as firstname,\r\n      b.lastname as lastname,\r\n      b.isdefense as isdefense,\r\n      b.isforward as isforward,\r\n      b.isgoalie as isgoalie,\r\n      b.nhl_id as nhl_id,\r\n      a.player_id as player_id,\r\n      a.season_type as season_type, \r\n      a.position as position,\r\n      sum(a.games_played) as games_played, \r\n      sum(a.goals) as goals, \r\n      sum(a.assists) as assists, \r\n      sum(a.points) as points, \r\n      sum(a.plus_minus) as plus_minus, \r\n      sum(a.penalty_minutes) as penalty_minutes, \r\n      sum(a.sh_goals) as sh_goals, \r\n      sum(a.pp_goals) as pp_goals, \r\n      sum(a.gw_goals) as gw_goals, \r\n      sum(a.gt_goals) as gt_goals, \r\n      sum(a.shots) as shots, \r\n      sum(a.minutes_played) as minutes_played, \r\n      sum(a.hits) as hits, \r\n      sum(a.blocked_shots) as blocked_shots\r\n      from\r\n      players_stats_v2 as a\r\n      left join players_v2 as b\r\n      on b.id = a.player_id\r\n      where (a.player_id = b.id\r\n      and\r\n      a.points > '0'\r\n      and\r\n      a.season_type = '${seasonType}'\r\n      and a.team_name = '${teamShortName}')\r\n      group by b.firstname, b.lastname, b.isgoalie, b.isdefense, b.isforward, b.nhl_id, a.player_id, a.season_type, a.position\r\n      order by points DESC`\r\n    );\r\n  }\r\n\r\n  private async getPlayerStats(\r\n    teamShortName: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await this.repo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        position: true,\r\n        games_played: true,\r\n        goals: true,\r\n        assists: true,\r\n        points: true,\r\n        plus_minus: true,\r\n        penalty_minutes: true,\r\n        pp_goals: true,\r\n        sh_goals: true,\r\n        gw_goals: true,\r\n        gt_goals: true,\r\n        shots: true,\r\n        shooting_pct: true,\r\n        minutes_played: true,\r\n        minutes_per_game: true,\r\n        fo_pct: true,\r\n        pass_pct: true,\r\n        corner_pct: true,\r\n        hits: true,\r\n        blocked_shots: true,\r\n        playing_year: true,\r\n        player_id: {\r\n          id: true,\r\n          firstname: true,\r\n          lastname: true,\r\n          nhl_id: true,\r\n          isdefense: true,\r\n          isforward: true,\r\n        },\r\n      },\r\n      relations: ['player_id'],\r\n      where: {\r\n        team_name: teamShortName,\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n    });\r\n  }\r\n\r\n  private async setConvertedPlayersStats(array: any[], raw: boolean) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        playerStats: await this.convertStats(item.playerStats, raw, item),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async convertStats(\r\n    array: Players_Stats_V2[],\r\n    raw: boolean,\r\n    teamInfo: any\r\n  ) {\r\n    return await Promise.all(\r\n      array.map((stat: Players_Stats_V2) => ({\r\n        playing_year: stat.playing_year,\r\n        season_type: stat.season_type,\r\n        teamInfo: !raw\r\n          ? {\r\n              id: teamInfo.id,\r\n              city: teamInfo.city,\r\n              nickname: teamInfo.nickname,\r\n              teamlogo: teamInfo.teamlogo,\r\n            }\r\n          : null,\r\n        games_played: Number(stat.games_played),\r\n        goals: Number(stat.goals),\r\n        assists: Number(stat.assists),\r\n        points: Number(stat.points),\r\n        plus_minus: Number(stat.plus_minus),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        pp_goals: Number(stat.pp_goals),\r\n        sh_goals: Number(stat.sh_goals),\r\n        gw_goals: Number(stat.gw_goals),\r\n        gt_goals: Number(stat.gt_goals),\r\n        shots: Number(stat.shots),\r\n        shooting_pct: !raw\r\n          ? Number(stat.shooting_pct)\r\n          : Number(\r\n              ((Number(stat.goals) / Number(stat.shots)) * 100).toFixed(1)\r\n            ),\r\n        minutes_per_game: !raw\r\n          ? Number(stat.minutes_per_game)\r\n          : Number(\r\n              (Number(stat.minutes_played) / Number(stat.games_played)).toFixed(\r\n                1\r\n              )\r\n            ),\r\n        fo_pct: !raw ? Number(stat.fo_pct) : null,\r\n        pass_pct: !raw ? Number(stat.pass_pct) : null,\r\n        corner_pct: !raw ? Number(stat.corner_pct) : null,\r\n        minutes_played: Number(stat.minutes_played),\r\n        hits: Number(stat.hits),\r\n        blocked_shots: Number(stat.blocked_shots),\r\n        pointsPerSixty: Number(\r\n          ((Number(stat.points) / Number(stat.minutes_played)) * 60).toFixed(2)\r\n        ),\r\n        hit_per_game: !raw\r\n          ? Number(stat.hit_per_game)\r\n          : Number((Number(stat.hits) / Number(stat.games_played)).toFixed(1)),\r\n        player_id: !raw\r\n          ? stat.player_id\r\n          : {\r\n              id: stat['player_id'],\r\n              firstname: stat['firstname'],\r\n              lastname: stat['lastname'],\r\n              nhl_id: stat['nhl_id'],\r\n              isactive: null,\r\n              isgoalie: null,\r\n              isdefense: stat['isdefense'],\r\n              isforward: stat['isforward'],\r\n              is_protected: null,\r\n            },\r\n      }))\r\n    );\r\n  }\r\n}\r\n","export * from './api-player-leaders-stats.service';\r\nexport * from './api-player-stats.service';\r\nexport * from './api-player-all-time-stats.service';\r\nexport * from './api-user-player-stats.service';","export * from './lib/api-salaries.module';","import {\n  Goalies_Stats_V2,\n  Goalie_Ratings_V2,\n  Players_Stats_V2,\n  Players_V2,\n  Player_Ratings_V2,\n  Salaries_V2,\n  Teams_V2,\n} from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { SalariesController } from './controllers';\nimport { SalariesMiddleware } from './middlewares';\nimport { ApiSalariesService } from './services';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([\n      Players_Stats_V2,\n      Teams_V2,\n      Salaries_V2,\n      Player_Ratings_V2,\n      Goalie_Ratings_V2,\n      Goalies_Stats_V2,\n      Players_V2,\n    ]),\n  ],\n  controllers: [SalariesController],\n  providers: [ApiSalariesService],\n})\nexport class ApiSalariesModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(SalariesMiddleware).forRoutes('*');\n  }\n}\n","export * from './salaries.controller';\r\n","import { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { ApiSalariesService } from '../services';\n\n@Controller('salaries')\nexport class SalariesController {\n  constructor(private salariesService: ApiSalariesService) {}\n\n  @Get('/all/players/:season')\n  async getAllPlayerSalaries(@Param() param): Promise<any[]> {\n    const salaries = await this.salariesService.getAllPlayerSalaries(\n      param.season\n    );\n\n    if (!salaries) {\n      throw new NotFoundException('Player Salaries not found');\n    }\n    return salaries;\n  }\n\n  @Get('/all/goalies/:season')\n  async getAllGoaliesSalaries(@Param() param): Promise<any[]> {\n    const salaries = await this.salariesService.getAllGoaliesSalaries(\n      param.season\n    );\n\n    if (!salaries) {\n      throw new NotFoundException('Goalie Salaries not found');\n    }\n    return salaries;\n  }\n\n  @Get('/user/:teamName/players/:season/:ratingsSeason')\n  async getUserTeamPlayerSalaries(@Param() param): Promise<any[]> {\n    const salaries = await this.salariesService.getUserTeamPlayerSalaries(\n      param.teamName,\n      param.season,\n      param.ratingsSeason\n    );\n\n    if (!salaries) {\n      throw new NotFoundException('User Player Salaries not found');\n    }\n    return salaries;\n  }\n\n  @Get('/user/:teamName/goalies/:season/:ratingsSeason')\n  async getUserTeamGoaliesSalaries(@Param() param): Promise<any[]> {\n    const salaries = await this.salariesService.getUserTeamGoaliesSalaries(\n      param.teamName,\n      param.season,\n      param.ratingsSeason\n    );\n\n    if (!salaries) {\n      throw new NotFoundException('User Goalie Salaries not found');\n    }\n    return salaries;\n  }\n}\n","export * from './salaries.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class SalariesMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Salaries...');\r\n    next();\r\n  }\r\n}\r\n","import {\r\n  Goalies_Stats_V2,\r\n  Goalie_Ratings_V2,\r\n  Players_Stats_V2,\r\n  Players_V2,\r\n  Player_Ratings_V2,\r\n  Salaries_V2,\r\n  Teams_V2,\r\n} from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiSalariesService {\r\n  constructor(\r\n    @InjectRepository(Salaries_V2)\r\n    private repo: Repository<Salaries_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamsRepo: Repository<Teams_V2>,\r\n    @InjectRepository(Players_V2)\r\n    private playersRepo: Repository<Players_V2>,\r\n    @InjectRepository(Players_Stats_V2)\r\n    private playersStatsRepo: Repository<Players_Stats_V2>,\r\n    @InjectRepository(Player_Ratings_V2)\r\n    private playerRatingsRepo: Repository<Player_Ratings_V2>,\r\n    @InjectRepository(Goalies_Stats_V2)\r\n    private goaliesStatsRepo: Repository<Goalies_Stats_V2>,\r\n    @InjectRepository(Goalie_Ratings_V2)\r\n    private goalieRatingsRepo: Repository<Goalie_Ratings_V2>\r\n  ) {}\r\n\r\n  async getAllPlayerSalaries(season: string) {\r\n    const allPlayersInSeason = await this.playersStatsRepo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n        },\r\n      },\r\n      where: {\r\n        player_id: {\r\n          isgoalie: false,\r\n        },\r\n        season_type: 'Regular',\r\n        playing_year: season,\r\n      },\r\n    });\r\n\r\n    const allSalariesForPlayersInSeason = await this.setPlayersSalaries(\r\n      allPlayersInSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForPlayersInSeason = await this.setPlayerRating(\r\n      allSalariesForPlayersInSeason,\r\n      season\r\n    );\r\n\r\n    const allSalariesAndRatingsForPlayersInSeasonWithTeamInfo =\r\n      await this.setTeamInfo(allSalariesAndRatingsForPlayersInSeason);\r\n\r\n    return allSalariesAndRatingsForPlayersInSeasonWithTeamInfo;\r\n  }\r\n\r\n  async getAllGoaliesSalaries(season: string) {\r\n    const allGoaliesInSeason = await this.goaliesStatsRepo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n        },\r\n      },\r\n      where: {\r\n        player_id: {\r\n          isgoalie: true,\r\n        },\r\n        season_type: 'Regular',\r\n        playing_year: season,\r\n      },\r\n    });\r\n\r\n    const allSalariesForGoaliesInSeason = await this.setPlayersSalaries(\r\n      allGoaliesInSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForGoaliesInSeason = await this.setGoalieRating(\r\n      allSalariesForGoaliesInSeason,\r\n      season\r\n    );\r\n\r\n    const allSalariesAndRatingsForGoaliesInSeasonWithTeamInfo =\r\n      await this.setTeamInfo(allSalariesAndRatingsForGoaliesInSeason);\r\n\r\n    return allSalariesAndRatingsForGoaliesInSeasonWithTeamInfo;\r\n  }\r\n\r\n  async getUserTeamPlayerSalaries(\r\n    teamName: string,\r\n    season: string,\r\n    ratingsSeason: string\r\n  ) {\r\n    const allPlayersInSeason = await this.playersStatsRepo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n        },\r\n      },\r\n      where: {\r\n        player_id: {\r\n          isgoalie: false,\r\n        },\r\n        team_name: teamName,\r\n        season_type: 'Regular',\r\n        playing_year: season,\r\n      },\r\n    });\r\n\r\n    const allSalariesForPlayersInSeason = await this.setPlayersSalaries(\r\n      allPlayersInSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForPlayersInSeason = await this.setPlayerRating(\r\n      allSalariesForPlayersInSeason,\r\n      ratingsSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForPlayersInSeasonWithTeamInfo =\r\n      await this.setTeamInfo(allSalariesAndRatingsForPlayersInSeason);\r\n\r\n    return allSalariesAndRatingsForPlayersInSeasonWithTeamInfo;\r\n  }\r\n\r\n  async getUserTeamGoaliesSalaries(\r\n    teamName: string,\r\n    season: string,\r\n    ratingsSeason: string\r\n  ) {\r\n    const allGoaliesInSeason = await this.goaliesStatsRepo.find({\r\n      select: {\r\n        id: true,\r\n        team_name: true,\r\n        player_id: {\r\n          id: true,\r\n        },\r\n      },\r\n      where: {\r\n        player_id: {\r\n          isgoalie: true,\r\n        },\r\n        team_name: teamName,\r\n        season_type: 'Regular',\r\n        playing_year: season,\r\n      },\r\n    });\r\n\r\n    const allSalariesForGoaliesInSeason = await this.setPlayersSalaries(\r\n      allGoaliesInSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForGoaliesInSeason = await this.setGoalieRating(\r\n      allSalariesForGoaliesInSeason,\r\n      ratingsSeason\r\n    );\r\n\r\n    const allSalariesAndRatingsForGoaliesInSeasonWithTeamInfo =\r\n      await this.setTeamInfo(allSalariesAndRatingsForGoaliesInSeason);\r\n\r\n    return allSalariesAndRatingsForGoaliesInSeasonWithTeamInfo;\r\n  }\r\n\r\n  private async setPlayersSalaries(array: any[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        salaries: await this.getSalary(item.player_id.id),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getSalary(playerId: number) {\r\n    return await this.repo.findOne({\r\n      select: {\r\n        id: true,\r\n        player_id: true,\r\n        season_2022: true,\r\n        season_2023: true,\r\n        season_2024: true,\r\n        season_2025: true,\r\n      },\r\n      where: {\r\n        player_id: playerId.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  private async setPlayerRating(array: any[], season: string) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        ratings: await this.getPlayerRating(item.player_id.id, season),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async setGoalieRating(array: any[], season: string) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        ratings: await this.getGoalieRating(item.player_id.id, season),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getGoalieRating(playerId: number, season: string) {\r\n    return await this.goalieRatingsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        passing: true,\r\n        speed: true,\r\n        skating: true,\r\n        wins: true,\r\n        goals_against_avg: true,\r\n        save_pct: true,\r\n        games_played: true,\r\n      },\r\n      where: {\r\n        player_id: playerId,\r\n        playing_year: season,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async getPlayerRating(playerId: number, season: string) {\r\n    return await this.playerRatingsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        c_rate: true,\r\n        l_rate: true,\r\n        r_rate: true,\r\n        ld_rate: true,\r\n        rd_rate: true,\r\n        skating: true,\r\n        speed: true,\r\n        passing: true,\r\n        shooting: true,\r\n        face_off: true,\r\n        forecheck: true,\r\n        assist_rating: true,\r\n        clear_crease: true,\r\n        shot_block: true,\r\n        pk: true,\r\n        physical: true,\r\n        rock: true,\r\n        intimidation: true,\r\n        game_fatigue: true,\r\n        shift_fatigue: true,\r\n        points: true,\r\n        goals: true,\r\n        assists: true,\r\n        shots: true,\r\n        shooting_pct: true,\r\n        games_played: true,\r\n      },\r\n      where: {\r\n        player_id: playerId,\r\n        playing_year: season,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async setTeamInfo(array: any[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_name),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamName: string) {\r\n    if (teamName) {\r\n      return await this.teamsRepo.findOne({\r\n        select: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          nickname: true,\r\n        },\r\n        where: {\r\n          shortname: teamName,\r\n        },\r\n      });\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n}\r\n","export * from './api-salaries.service';\r\n","export * from './lib/api-schedule.module';\n","import { Schedule_V2, Teams_V2, Team_Stats_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ScheduleController } from './controllers';\nimport { ScheduleMiddleware } from './middlewares';\nimport { ApiScheduleService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Schedule_V2, Teams_V2, Team_Stats_V2])],\n  controllers: [ScheduleController],\n  providers: [ApiScheduleService],\n})\nexport class ApiScheduleModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(ScheduleMiddleware).forRoutes('*');\n  }\n}\n","export * from './schedule.controller';\r\n","import { ScheduleAllDto } from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { ApiScheduleService } from '../services';\n\n@Controller('schedule')\nexport class ScheduleController {\n  constructor(private scheduleService: ApiScheduleService) {}\n\n  @Get('/:season')\n  async getCompleteScheduleBySeason(@Param() param): Promise<ScheduleAllDto[]> {\n    const stats = await this.scheduleService.getCompleteScheduleBySeason(\n      param.season\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Leader Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/next/:season/:currentDay')\n  async getNextDays(@Param() param): Promise<any[]> {\n    const stats = await this.scheduleService.getNextDays(\n      param.season,\n      Number(param.currentDay)\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Player Leader Stats not found');\n    }\n    return stats;\n  }\n}\n","export * from './schedule.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class ScheduleMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Schedule...');\r\n    next();\r\n  }\r\n}\r\n","import { Schedule_V2, Teams_V2, Team_Stats_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Between, Brackets, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiScheduleService {\r\n  constructor(\r\n    @InjectRepository(Schedule_V2)\r\n    private repo: Repository<Schedule_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>,\r\n    @InjectRepository(Team_Stats_V2)\r\n    private teamStatsRepo: Repository<Team_Stats_V2>\r\n  ) {}\r\n\r\n  async getCompleteScheduleBySeason(season: string) {\r\n    const schedule = await this.repo.find({\r\n      where: {\r\n        playing_year: season,\r\n      },\r\n      order: {\r\n        game_day: 'ASC',\r\n      },\r\n    });\r\n\r\n    const scheduleTeamInfo = await this.setTeamInfo(schedule);\r\n\r\n    return scheduleTeamInfo;\r\n  }\r\n\r\n  async getNextDays(season: string, currentDay: number) {\r\n    const schedule = await this.repo.find({\r\n      where: {\r\n        playing_year: season,\r\n        game_day: Between(currentDay, currentDay + 4),\r\n      },\r\n      order: {\r\n        game_day: 'ASC',\r\n      },\r\n    });\r\n\r\n    const scheduleTeamInfo = await this.setTeamNextInfo(schedule);\r\n\r\n    return scheduleTeamInfo;\r\n  }\r\n\r\n  private async getTeamLastFive(teamId: number, season: string) {\r\n    const lastFive = await this.repo\r\n      .createQueryBuilder('schedule')\r\n      .where('schedule.playing_year = :year', { year: season })\r\n      .andWhere(\r\n        new Brackets((qb) => {\r\n          qb.where('schedule.home_team_id = :teamId', { teamId }).orWhere(\r\n            'schedule.vis_team_id = :teamId',\r\n            { teamId }\r\n          );\r\n        })\r\n      )\r\n      .orderBy('schedule.game_day', 'DESC')\r\n      .limit(5)\r\n      .getMany();\r\n\r\n    return await this.getLastFiveRecord(lastFive, teamId);\r\n  }\r\n\r\n  private async getLastFiveRecord(lastFive: Schedule_V2[], teamId: number) {\r\n    const lastFiveRecord = [];\r\n\r\n    await lastFive.forEach((record: Schedule_V2) => {\r\n      if (record.home_team_id === teamId) {\r\n        if (record.home_team_score > record.vis_team_score) {\r\n          lastFiveRecord.push('W');\r\n        } else if (record.home_team_score < record.vis_team_score) {\r\n          lastFiveRecord.push('L');\r\n        } else {\r\n          lastFiveRecord.push('T');\r\n        }\r\n      } else {\r\n        if (record.vis_team_score > record.home_team_score) {\r\n          lastFiveRecord.push('W');\r\n        } else if (record.vis_team_score < record.home_team_score) {\r\n          lastFiveRecord.push('L');\r\n        } else {\r\n          lastFiveRecord.push('T');\r\n        }\r\n      }\r\n    });\r\n\r\n    return lastFiveRecord;\r\n  }\r\n\r\n  private async getVersusRecord(data: Schedule_V2[], teamId: number) {\r\n    let wins = 0;\r\n    let loss = 0;\r\n    let ties = 0;\r\n\r\n    await data.forEach((game: Schedule_V2) => {\r\n      if (game.vis_team_id === teamId) {\r\n        game.vis_team_score > game.home_team_score\r\n          ? wins++\r\n          : game.vis_team_score === game.home_team_score\r\n          ? ties++\r\n          : loss++;\r\n      } else if (game.home_team_id === teamId) {\r\n        game.home_team_score > game.vis_team_score\r\n          ? wins++\r\n          : game.home_team_score === game.vis_team_score\r\n          ? ties++\r\n          : loss++;\r\n      }\r\n    });\r\n\r\n    return {\r\n      wins,\r\n      loss,\r\n      ties,\r\n    };\r\n  }\r\n\r\n  private async setTeamNextInfo(array: Schedule_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        id: item.id,\r\n        gameDay: item.game_day,\r\n        visTeamScore: item.vis_team_score,\r\n        visTeamInfo: await this.getTeamInfo(item.vis_team_id),\r\n        visTeamLastFive: await this.getTeamLastFive(\r\n          item.vis_team_id,\r\n          item.playing_year\r\n        ),\r\n        visTeamRecord: await this.getTeamSeasonRecord(\r\n          item.vis_team_id,\r\n          item.playing_year\r\n        ),\r\n        visTeamVersus: await this.getTeamRecordVersus(\r\n          item.vis_team_id,\r\n          item.home_team_id,\r\n          item.playing_year\r\n        ),\r\n        homeTeamScore: item.home_team_score,\r\n        homeTeamInfo: await this.getTeamInfo(item.home_team_id),\r\n        homeTeamLastFive: await this.getTeamLastFive(\r\n          item.home_team_id,\r\n          item.playing_year\r\n        ),\r\n        homeTeamRecord: await this.getTeamSeasonRecord(\r\n          item.home_team_id,\r\n          item.playing_year\r\n        ),\r\n        homeTeamVersus: await this.getTeamRecordVersus(\r\n          item.home_team_id,\r\n          item.vis_team_id,\r\n          item.playing_year\r\n        ),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async setTeamInfo(array: Schedule_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        visTeamInfo: await this.getTeamInfo(item.vis_team_id),\r\n        homeTeamInfo: await this.getTeamInfo(item.home_team_id),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamRecordVersus(\r\n    teamOneId: number,\r\n    teamTwoId: number,\r\n    season: string\r\n  ) {\r\n    const versus = await this.repo\r\n      .createQueryBuilder('schedule')\r\n      .where('schedule.playing_year = :year', { year: season })\r\n      .where(\r\n        new Brackets((qb) => {\r\n          qb.where('schedule.vis_team_id = :teamOneId', { teamOneId })\r\n            .andWhere('schedule.home_team_id = :teamTwoId', { teamTwoId })\r\n            .andWhere('schedule.playing_year = :year', { year: season })\r\n            .andWhere('schedule.vis_team_score >= :empty', { empty: 0 });\r\n        })\r\n      )\r\n      .orWhere(\r\n        new Brackets((qb) => {\r\n          qb.where('schedule.vis_team_id = :teamTwoId', { teamTwoId })\r\n            .andWhere('schedule.home_team_id = :teamOneId', { teamOneId })\r\n            .andWhere('schedule.playing_year = :year', { year: season })\r\n            .andWhere('schedule.vis_team_score >= :empty', { empty: 0 });\r\n        })\r\n      )\r\n      .getMany();\r\n\r\n    return await this.getVersusRecord(versus, teamOneId);\r\n  }\r\n\r\n  private async getTeamSeasonRecord(teamId: number, season: string) {\r\n    return await this.teamStatsRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n      },\r\n      where: {\r\n        team_id: {\r\n          id: teamId,\r\n        },\r\n        playing_year: season,\r\n        season_type: 'Regular',\r\n      },\r\n    });\r\n  }\r\n\r\n  private async getTeamInfo(teamId: number) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n        teamcolor: true,\r\n      },\r\n      where: {\r\n        id: teamId,\r\n      },\r\n    });\r\n  }\r\n}\r\n","export * from './api-schedule.service';","export * from './lib/api-team-stats.module';","import { Team_Stats_V2, Teams_V2, Conferences_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TeamStatsController } from './controllers';\nimport { TeamStatsMiddleware } from './middlewares';\nimport {\n  ApiAllTimeTeamStatsService,\n  ApiTeamStatsService,\n  ApiUserTeamStatsService,\n} from './services';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Team_Stats_V2, Teams_V2, Conferences_V2]),\n  ],\n  controllers: [TeamStatsController],\n  providers: [\n    ApiTeamStatsService,\n    ApiAllTimeTeamStatsService,\n    ApiUserTeamStatsService,\n  ],\n})\nexport class ApiTeamStatsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(TeamStatsMiddleware).forRoutes('*');\n  }\n}\n","export * from './team-stats.controller';\r\n","import { Team_Stats_V2 } from '@api/entities';\nimport {\n  StatTeamsHistoryDto,\n  StatUserTeamRecordDto,\n} from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport {\n  ApiAllTimeTeamStatsService,\n  ApiTeamStatsService,\n  ApiUserTeamStatsService,\n} from '../services';\n\n@Controller('team-stats')\nexport class TeamStatsController {\n  constructor(\n    private teamsStatsService: ApiTeamStatsService,\n    private allTimeTeamsStatsService: ApiAllTimeTeamStatsService,\n    private userTeamStatsService: ApiUserTeamStatsService\n  ) {}\n\n  @Get('/:season/:seasonType')\n  async getTeamStatsBySeasonByType(@Param() param): Promise<Team_Stats_V2[]> {\n    const stats = await this.teamsStatsService.getTeamStatsBySeasonByType(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Team Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/all/:season/:seasonType')\n  async getAllTeamStatsBySeasonByType(\n    @Param() param\n  ): Promise<Team_Stats_V2[]> {\n    const stats = await this.teamsStatsService.getAllTeamStatsBySeasonByType(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Team Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/playoffs/:season/:seasonType')\n  async getTeamStandingsForPlayoffs(@Param() param): Promise<Team_Stats_V2[]> {\n    const stats = await this.teamsStatsService.getTeamStandingsForPlayoffs(\n      param.season,\n      param.seasonType\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Team Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/season/:seasonType')\n  async getAllTimeTeamStatsBySeasonByType(\n    @Param() param\n  ): Promise<StatTeamsHistoryDto[]> {\n    const stats =\n      await this.allTimeTeamsStatsService.getAllTimeTeamStatsBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Team Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/history/all-time/:seasonType')\n  async getAllTimeTeamStatsSummedBySeasonByType(\n    @Param() param\n  ): Promise<StatTeamsHistoryDto[]> {\n    const stats =\n      await this.allTimeTeamsStatsService.getAllTimeTeamStatsSummedBySeasonByType(\n        param.seasonType\n      );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Team Stats not found');\n    }\n    return stats;\n  }\n\n  @Get('/user/:teamId/record/:season/:seasonType/')\n  async getUserTeamRecordBySeasonBySeasonType(\n    @Param() param\n  ): Promise<StatUserTeamRecordDto> {\n    const record =\n      await this.userTeamStatsService.getUserTeamRecordBySeasonBySeasonType(\n        param.teamId,\n        param.season,\n        param.seasonType\n      );\n\n    if (!record) {\n      throw new NotFoundException('User Team Stats not found');\n    }\n    return record;\n  }\n\n  @Get('/user/:userId/history/:seasonType')\n  async getUserTeamStatsBySeasonType(\n    @Param() param\n  ): Promise<StatUserTeamRecordDto> {\n    const record =\n      await this.userTeamStatsService.getUserTeamStatsBySeasonType(\n        param.userId,\n        param.seasonType\n      );\n\n    if (!record) {\n      throw new NotFoundException('User Team Stats not found');\n    }\n    return record;\n  }\n}\n","export * from './team-stats.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class TeamStatsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Team Stats...');\r\n    next();\r\n  }\r\n}\r\n","import { Team_Stats_V2 } from '@api/entities';\r\nimport { StatTeamsHistoryDto } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectDataSource, InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository, MoreThan, DataSource } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiAllTimeTeamStatsService {\r\n  constructor(\r\n    @InjectRepository(Team_Stats_V2)\r\n    private repo: Repository<Team_Stats_V2>,\r\n    @InjectDataSource() private dataSource: DataSource\r\n  ) {}\r\n\r\n  async getAllTimeTeamStatsBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatTeamsHistoryDto[]> {\r\n    const allTimeStats = await this.repo.find({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          shortname: true,\r\n          nickname: true,\r\n        },\r\n        games_played: true,\r\n        points: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        penalty_minutes: true,\r\n        goals_for: true,\r\n        goals_against: true,\r\n        pk_goals: true,\r\n        pk_attempts: true,\r\n        pp_goals: true,\r\n        pp_attempts: true,\r\n        sh_goals: true,\r\n        playing_year: true,\r\n        season_type: true,\r\n        shut_outs: true,\r\n        face_off_won: true,\r\n        face_off_lost: true,\r\n        corner_won: true,\r\n        corner_lost: true,\r\n        pass_complete: true,\r\n        pass_incomplete: true,\r\n      },\r\n      where: {\r\n        season_type: seasonType,\r\n        games_played: MoreThan(0),\r\n      },\r\n      order: {\r\n        points: 'DESC',\r\n      },\r\n    });\r\n\r\n    const allTimeStatsConverted = await this.convertStats(allTimeStats, false);\r\n\r\n    return allTimeStatsConverted;\r\n  }\r\n\r\n  async getAllTimeTeamStatsSummedBySeasonByType(\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatTeamsHistoryDto[]> {\r\n    const result = await this.dataSource.query(\r\n      ` select\r\n      a.team_id as team_id,\r\n      a.season_type as season_type, \r\n      c.city as city, \r\n      c.nickname as nickname,\r\n      c.shortname,\r\n      c.teamlogo,\r\n      c.isactive,\r\n      sum(games_played) as games_played, \r\n      sum(wins) as wins, \r\n      sum(loss) as loss, \r\n      sum(ties) as ties, \r\n      sum(points) as points, \r\n      sum(goals_for) as goals_for, \r\n      sum(goals_against) as goals_against, \r\n      sum(pp_attempts) as pp_attempts, \r\n      sum(pp_goals) as pp_goals, \r\n      sum(pk_attempts) as pk_attempts, \r\n      sum(pk_goals) as pk_goals, \r\n      sum(sh_goals) as sh_goals, \r\n      sum(penalty_minutes) as penalty_minutes, \r\n      sum(shots_for) as shots_for, \r\n      sum(shots_against) as shots_against, \r\n      sum(shut_outs) as shut_outs,\r\n      sum(face_off_won) as face_off_won,\r\n      sum(face_off_lost) as face_off_lost,\r\n      sum(corner_won) as corner_won,\r\n      sum(corner_lost) as corner_lost,\r\n      sum(pass_complete) as pass_complete,\r\n      sum(pass_incomplete) as pass_incomplete\r\n      from\r\n      team_stats_v2 as a\r\n      left join teams_v2 as c\r\n      on c.id = a.team_id\r\n      where a.season_type = '${seasonType}'\r\n      group by a.team_id, a.season_type, c.city, c.nickname, c.shortname, c.teamlogo, c.isactive\r\n      order by points DESC`\r\n    );\r\n\r\n    const allTimeStatsConverted = await this.convertStats(result, true);\r\n\r\n    return allTimeStatsConverted;\r\n  }\r\n\r\n  private async convertStats(array: any[], raw: boolean) {\r\n    return await Promise.all(\r\n      array.map((stat: any) => ({\r\n        goalsForPerGame: Number(\r\n          (stat.goals_for / stat.games_played).toFixed(2)\r\n        ),\r\n        goalsAgainstPerGame: Number(\r\n          (stat.goals_against / stat.games_played).toFixed(2)\r\n        ),\r\n        goalDiff: stat.goals_for - stat.goals_against,\r\n        winPct: Number(((stat.wins / stat.games_played) * 100).toFixed(1)),\r\n        ppPct: Number(((stat.pp_goals / stat.pp_attempts) * 100).toFixed(1)),\r\n        pkPct: Number(\r\n          (\r\n            ((stat.pk_attempts - stat.pk_goals) / stat.pk_attempts) *\r\n            100\r\n          ).toFixed(1)\r\n        ),\r\n        foPct: Number(\r\n          this.getPct(Number(stat.face_off_won), Number(stat.face_off_lost)).toFixed(1)\r\n        ),\r\n        passPct: Number(\r\n          this.getPct(Number(stat.pass_complete), Number(stat.pass_incomplete)).toFixed(1)\r\n        ),\r\n        cornerPct: Number(\r\n          this.getPct(Number(stat.corner_won), Number(stat.corner_lost)).toFixed(1)\r\n        ),\r\n        pimPerGame: Number(\r\n          (stat.penalty_minutes / stat.games_played).toFixed(1)\r\n        ),\r\n        team_name: raw\r\n          ? `${stat.city} ${stat.nickname}`\r\n          : `${stat.team_id.city} ${stat.team_id.nickname}`,\r\n        team_id: !raw\r\n          ? stat.team_id\r\n          : {\r\n              id: stat.team_id,\r\n              city: stat.city,\r\n              teamlogo: stat.teamlogo,\r\n              shortname: stat.shortname,\r\n              nickname: stat.nickname,\r\n            },\r\n        games_played: Number(stat.games_played),\r\n        wins: Number(stat.wins),\r\n        loss: Number(stat.loss),\r\n        ties: Number(stat.ties),\r\n        points: Number(stat.points),\r\n        goals_for: Number(stat.goals_for),\r\n        goals_against: Number(stat.goals_against),\r\n        shots_against: Number(stat.shots_against),\r\n        shots_for: Number(stat.shots_for),\r\n        pp_goals: Number(stat.pp_goals),\r\n        pp_attempts: Number(stat.pp_attempts),\r\n        pk_goals: Number(stat.pk_goals),\r\n        pk_attempts: Number(stat.pk_attempts),\r\n        sh_goals: Number(stat.sh_goals),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        face_off_won: Number(stat.face_off_won),\r\n        face_off_lost: Number(stat.face_off_lost),\r\n        corner_won: Number(stat.corner_won),\r\n        corner_lost: Number(stat.corner_lost),\r\n        pass_complete: Number(stat.pass_complete),\r\n        pass_incomplete: Number(stat.pass_incomplete),\r\n        shut_outs: Number(stat.shut_outs),\r\n        season_type: stat.season_type,\r\n        playing_year: stat.playing_year,\r\n      }))\r\n    );\r\n  }\r\n\r\n  private getPct(high: number, low: number): number {\r\n    const total = high + low;\r\n    return (high / total) * 100;\r\n  }\r\n}\r\n","import { Conferences_V2, Team_Stats_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiTeamStatsService {\r\n  constructor(\r\n    @InjectRepository(Team_Stats_V2)\r\n    private repo: Repository<Team_Stats_V2>,\r\n    @InjectRepository(Conferences_V2)\r\n    private conferencesRepo: Repository<Conferences_V2>\r\n  ) {}\r\n\r\n  async getTeamStatsBySeasonByType(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<Team_Stats_V2[]> {\r\n    return await this.repo.find({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          shortname: true,\r\n          nickname: true,\r\n        },\r\n        games_played: true,\r\n        points: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        long_win_streak: true,\r\n        penalty_minutes: true,\r\n        goals_for: true,\r\n        goals_against: true,\r\n        pk_goals: true,\r\n        pk_attempts: true,\r\n        pp_goals: true,\r\n        pp_attempts: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getAllTeamStatsBySeasonByType(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<Team_Stats_V2[]> {\r\n    const teamStats = await this.repo.find({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          shortname: true,\r\n          nickname: true,\r\n          divisions_id: {\r\n            id: true,\r\n            divisionname: true,\r\n            conference_id: true,\r\n          },\r\n        },\r\n        div_loss: true,\r\n        div_tie: true,\r\n        div_win: true,\r\n        games_played: true,\r\n        goals_against: true,\r\n        goals_for: true,\r\n        home_loss: true,\r\n        home_ties: true,\r\n        home_wins: true,\r\n        loss: true,\r\n        penalty_minutes: true,\r\n        pk_attempts: true,\r\n        pk_goals: true,\r\n        pk_min: true,\r\n        playing_year: true,\r\n        points: true,\r\n        pp_attempts: true,\r\n        pp_goals: true,\r\n        road_loss: true,\r\n        road_ties: true,\r\n        road_wins: true,\r\n        season_type: true,\r\n        ties: true,\r\n        trail_after_two_loss: true,\r\n        trail_after_two_ties: true,\r\n        trail_after_two_wins: true,\r\n        wins: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n    });\r\n\r\n    const teamStatsWithConference = await this.setConferenceInfo(teamStats);\r\n\r\n    return teamStatsWithConference;\r\n  }\r\n\r\n  async getTeamStandingsForPlayoffs(\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<Team_Stats_V2[]> {\r\n    const teamStats = await this.repo.find({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          teamcolor: true,\r\n          shortname: true,\r\n          nickname: true,\r\n          divisions_id: {\r\n            id: true,\r\n            divisionname: true,\r\n            conference_id: true,\r\n          },\r\n        },\r\n        goals_against: true,\r\n        goals_for: true,\r\n        playing_year: true,\r\n        points: true,\r\n        season_type: true,\r\n        wins: true,\r\n      },\r\n      where: {\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n    });\r\n\r\n    const teamStatsWithConference = await this.setConferenceInfo(teamStats);\r\n\r\n    const teamStatsWithConferenceSorted = await this.sortTeamStatsByStandings(\r\n      teamStatsWithConference\r\n    );\r\n\r\n    return teamStatsWithConferenceSorted;\r\n  }\r\n\r\n  private async setConferenceInfo(array: Team_Stats_V2[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        conference: await this.getConferenceInfo(\r\n          item.team_id.divisions_id.conference_id\r\n        ),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getConferenceInfo(conferenceId: number) {\r\n    return await this.conferencesRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        conferencename: true,\r\n      },\r\n      where: {\r\n        id: conferenceId,\r\n      },\r\n    });\r\n  }\r\n\r\n  private sortTeamStatsByStandings = (data) => {\r\n    return data\r\n      .sort((a: any, b: any) => {\r\n        if (b.points === a.points) {\r\n          if (b.wins === a.wins) {\r\n            if (\r\n              b.goals_for - b.goals_against ===\r\n              a.goals_for - a.goals_against\r\n            ) {\r\n              return b.goals_for - a.goals_for;\r\n            } else {\r\n              return (\r\n                b.goals_for - b.goals_against - (a.goals_for - a.goals_against)\r\n              );\r\n            }\r\n          } else {\r\n            return b.wins - a.wins;\r\n          }\r\n        } else {\r\n          return b.points - a.points;\r\n        }\r\n      });\r\n  };\r\n}\r\n","import { Teams_V2, Team_Stats_V2 } from '@api/entities';\r\nimport { StatUserTeamRecordDto } from '@cha/shared/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { MoreThan, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiUserTeamStatsService {\r\n  constructor(\r\n    @InjectRepository(Team_Stats_V2)\r\n    private repo: Repository<Team_Stats_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamsRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getUserTeamRecordBySeasonBySeasonType(\r\n    teamId: number,\r\n    season: string,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<StatUserTeamRecordDto> {\r\n    return await this.repo.findOne({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          shortname: true,\r\n          nickname: true,\r\n        },\r\n        id: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        points: true,\r\n        home_wins: true,\r\n        home_loss: true,\r\n        home_ties: true,\r\n        road_wins: true,\r\n        road_loss: true,\r\n        road_ties: true,\r\n        div_win: true,\r\n        div_loss: true,\r\n        div_tie: true,\r\n      },\r\n      where: {\r\n        team_id: {\r\n          id: teamId,\r\n        },\r\n        playing_year: season,\r\n        season_type: seasonType,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getUserTeamStatsBySeasonType(\r\n    userId: number,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ): Promise<any> {\r\n    const userTeams = await this.teamsRepo.findBy({ users_id: userId });\r\n\r\n    const userTeamsWithTeamStats = await this.setTeamStats(\r\n      userTeams,\r\n      seasonType\r\n    );\r\n\r\n    const userTeamsWithTeamStatsConverted = await this.setConvertedTeamStats(\r\n      userTeamsWithTeamStats\r\n    );\r\n\r\n    return userTeamsWithTeamStatsConverted;\r\n  }\r\n\r\n  private async setConvertedTeamStats(array: any[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamStats: await this.convertStats(item.teamStats),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async setTeamStats(\r\n    array: Teams_V2[],\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamStats: await this.getTeamStats(item.id, seasonType),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamStats(\r\n    teamId: number,\r\n    seasonType: 'Regular' | 'Playoffs'\r\n  ) {\r\n    return await this.repo.find({\r\n      relations: ['team_id'],\r\n      select: {\r\n        team_id: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          shortname: true,\r\n          nickname: true,\r\n        },\r\n        id: true,\r\n        games_played: true,\r\n        points: true,\r\n        wins: true,\r\n        loss: true,\r\n        ties: true,\r\n        penalty_minutes: true,\r\n        goals_for: true,\r\n        goals_against: true,\r\n        pk_goals: true,\r\n        pk_attempts: true,\r\n        pp_goals: true,\r\n        pp_attempts: true,\r\n        sh_goals: true,\r\n        playing_year: true,\r\n        season_type: true,\r\n        shut_outs: true,\r\n        face_off_won: true,\r\n        face_off_lost: true,\r\n        corner_won: true,\r\n        corner_lost: true,\r\n        pass_complete: true,\r\n        pass_incomplete: true,\r\n        shots_against: true,\r\n        shots_for: true\r\n      },\r\n      where: {\r\n        team_id: {\r\n          id: teamId,\r\n        },\r\n        games_played: MoreThan(0),\r\n        season_type: seasonType,\r\n      },\r\n      order: {\r\n        playing_year: 'DESC'\r\n      }\r\n    });\r\n  }\r\n\r\n  private async convertStats(array: any[]) {\r\n    return await Promise.all(\r\n      array.map((stat: any) => ({\r\n        goalsForPerGame: Number(\r\n          (stat.goals_for / stat.games_played).toFixed(2)\r\n        ),\r\n        goalsAgainstPerGame: Number(\r\n          (stat.goals_against / stat.games_played).toFixed(2)\r\n        ),\r\n        goalDiff: stat.goals_for - stat.goals_against,\r\n        winPct: Number(((stat.wins / stat.games_played) * 100).toFixed(1)),\r\n        ppPct: Number(((stat.pp_goals / stat.pp_attempts) * 100).toFixed(1)),\r\n        pkPct: Number(\r\n          (\r\n            ((stat.pk_attempts - stat.pk_goals) / stat.pk_attempts) *\r\n            100\r\n          ).toFixed(1)\r\n        ),\r\n        foPct: Number(\r\n          this.getPct(\r\n            Number(stat.face_off_won),\r\n            Number(stat.face_off_lost)\r\n          ).toFixed(1)\r\n        ),\r\n        passPct: Number(\r\n          this.getPct(\r\n            Number(stat.pass_complete),\r\n            Number(stat.pass_incomplete)\r\n          ).toFixed(1)\r\n        ),\r\n        cornerPct: Number(\r\n          this.getPct(\r\n            Number(stat.corner_won),\r\n            Number(stat.corner_lost)\r\n          ).toFixed(1)\r\n        ),\r\n        pimPerGame: Number(\r\n          (stat.penalty_minutes / stat.games_played).toFixed(1)\r\n        ),\r\n        team_name: `${stat.team_id.city} ${stat.team_id.nickname}`,\r\n        team_id: stat.team_id,\r\n        games_played: Number(stat.games_played),\r\n        wins: Number(stat.wins),\r\n        loss: Number(stat.loss),\r\n        ties: Number(stat.ties),\r\n        points: Number(stat.points),\r\n        goals_for: Number(stat.goals_for),\r\n        goals_against: Number(stat.goals_against),\r\n        shots_against: Number(stat.shots_against),\r\n        shots_for: Number(stat.shots_for),\r\n        pp_goals: Number(stat.pp_goals),\r\n        pp_attempts: Number(stat.pp_attempts),\r\n        pk_goals: Number(stat.pk_goals),\r\n        pk_attempts: Number(stat.pk_attempts),\r\n        sh_goals: Number(stat.sh_goals),\r\n        penalty_minutes: Number(stat.penalty_minutes),\r\n        face_off_won: Number(stat.face_off_won),\r\n        face_off_lost: Number(stat.face_off_lost),\r\n        corner_won: Number(stat.corner_won),\r\n        corner_lost: Number(stat.corner_lost),\r\n        pass_complete: Number(stat.pass_complete),\r\n        pass_incomplete: Number(stat.pass_incomplete),\r\n        shut_outs: Number(stat.shut_outs),\r\n        season_type: stat.season_type,\r\n        playing_year: stat.playing_year,\r\n      }))\r\n    );\r\n  }\r\n\r\n  private getPct(high: number, low: number): number {\r\n    const total = high + low;\r\n    return (high / total) * 100;\r\n  }\r\n}\r\n","export * from './api-team-stats.service';\r\nexport * from './api-all-time-team-stats.service';\r\nexport * from './api-user-team-stats.service';\r\n","export * from './lib/api-teams.module';\n","import { Teams_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { TeamsController } from './controllers';\nimport { TeamsMiddleware } from './middlewares/teams.middleware';\nimport { TeamsService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Teams_V2])],\n  controllers: [TeamsController],\n  providers: [TeamsService],\n})\nexport class ApiTeamsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(TeamsMiddleware).forRoutes('*');\n  }\n}\n","export * from './teams.controller';\r\n","import { TeamDto } from '@cha/shared/entities';\nimport { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { TeamsService } from '../services';\n\n@Controller('teams')\nexport class TeamsController {\n  constructor(private teamsService: TeamsService) {}\n\n  @Get('/user/:id')\n  async getUserTeams(@Param() param): Promise<TeamDto[]> {\n    const teams = await this.teamsService.getUserTeams(parseInt(param.id));\n\n    if (!teams || teams.length < 1) {\n      throw new NotFoundException('User Teams not found');\n    }\n    return teams;\n  }\n\n  @Get('/current')\n  async getCurrentTeams(): Promise<TeamDto[]> {\n    const teams = await this.teamsService.getCurrentTeams();\n\n    if (!teams || teams.length < 1) {\n      throw new NotFoundException('No Current Teams found');\n    }\n    return teams;\n  }\n}\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class TeamsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Teams...');\r\n    next();\r\n  }\r\n}","export * from './teams.service';\r\n","import { Teams_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class TeamsService {\r\n  constructor(@InjectRepository(Teams_V2) private repo: Repository<Teams_V2>) {}\r\n\r\n  async getUserTeams(id: number): Promise<Teams_V2[]> {\r\n    return await this.repo.findBy({ users_id: id });\r\n  }\r\n\r\n  async getCurrentTeams(): Promise<Teams_V2[]> {\r\n    return await this.repo.findBy({ isactive: true });\r\n  }\r\n}\r\n","export * from './lib/api-transactions.module';\n","import { Players_V2, Teams_V2, Transactions_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TransactionsController } from './controllers';\nimport { TransactionsMiddleware } from './middlewares';\nimport { ApiTransactionsService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Transactions_V2, Teams_V2, Players_V2])],\n  controllers: [TransactionsController],\n  providers: [ApiTransactionsService],\n})\nexport class ApiTransactionsModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(TransactionsMiddleware).forRoutes('*');\n  }\n}\n","export * from './transactions.controller';\r\n","import { Controller, Get, NotFoundException, Param } from '@nestjs/common';\nimport { ApiTransactionsService } from '../services';\n\n@Controller('transactions')\nexport class TransactionsController {\n  constructor(private transactionsService: ApiTransactionsService) {}\n\n  @Get('/:season')\n  async getTransactionsBySeason(@Param() param): Promise<any[]> {\n    const stats = await this.transactionsService.getTransactionsBySeason(\n      param.season\n    );\n\n    if (!stats || stats.length < 1) {\n      throw new NotFoundException('Transactions not found');\n    }\n    return stats;\n  }\n}\n","export * from './transactions.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class TransactionsMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Transactions...');\r\n    next();\r\n  }\r\n}\r\n","import { Players_V2, Teams_V2, Transactions_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Between, Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiTransactionsService {\r\n  constructor(\r\n    @InjectRepository(Transactions_V2)\r\n    private repo: Repository<Transactions_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamInfoRepo: Repository<Teams_V2>,\r\n    @InjectRepository(Players_V2)\r\n    private playersRepo: Repository<Players_V2>\r\n  ) {}\r\n\r\n  async getTransactionsBySeason(year: string) {\r\n    const season = this.findSeasonDates(year);\r\n\r\n    const transactions = await this.repo.find({\r\n      where: {\r\n        transaction_date: Between(new Date(season.start), new Date(season.end)),\r\n      },\r\n      order: {\r\n        transaction_date: 'DESC',\r\n      },\r\n    });\r\n\r\n    const transactionsTeamInfo = await this.setTransactionInfo(transactions);\r\n\r\n    return transactionsTeamInfo;\r\n  }\r\n\r\n  private async setTransactionInfo(transactions: Transactions_V2[]) {\r\n    return await Promise.all(\r\n      transactions.map(async (transaction: Transactions_V2) => ({\r\n        id: transaction.id,\r\n        transactionDate: transaction.transaction_date,\r\n        teamOneInfo: await this.getTeamInfo(transaction.team_one_id),\r\n        teamOnePlayers: await this.setPlayersInfo(transaction.team_one_players),\r\n        teamOnePicks: transaction.team_one_picks,\r\n        teamTwoInfo: await this.getTeamInfo(transaction.team_two_id),\r\n        teamTwoPlayers: await this.setPlayersInfo(transaction.team_two_players),\r\n        teamTwoPicks: transaction.team_two_picks,\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async setPlayersInfo(array: number[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        player: await this.getPlayerInfo(item),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamId: number) {\r\n    return await this.teamInfoRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        city: true,\r\n        teamlogo: true,\r\n        nickname: true,\r\n        teamcolor: true,\r\n        teamtextcolor: true,\r\n      },\r\n      where: {\r\n        id: teamId,\r\n      },\r\n    });\r\n  }\r\n\r\n  private async getPlayerInfo(playerId: number) {\r\n    return await this.playersRepo.findOne({\r\n      select: {\r\n        id: true,\r\n        firstname: true,\r\n        lastname: true,\r\n        nhl_id: true,\r\n      },\r\n      where: {\r\n        id: playerId,\r\n      },\r\n    });\r\n  }\r\n\r\n  private findSeasonDates(year: string) {\r\n    const seasons = [\r\n      { year: '23', start: '2022-06-02', end: '2023-06-01' },\r\n      { year: '22', start: '2021-07-15', end: '2022-06-01' },\r\n      { year: '21', start: '2020-04-27', end: '2021-07-15' },\r\n    ];\r\n\r\n    return seasons.find((season) => season.year === year);\r\n  }\r\n}\r\n","export * from './api-transactions.service';","export * from './lib/api-users.module';\n","import { Users_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersController } from './controllers';\nimport { UserMiddleware } from './middlewares';\nimport { UsersService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Users_V2])],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class ApiUsersModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(UserMiddleware).forRoutes('*');\n  }\n}\n","export * from './users.controller';\r\n","import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  NotFoundException,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { UsersService } from '../services';\nimport { UserCreateDto, UserDto } from '@cha/shared/entities';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @Get()\n  async getUsers(): Promise<UserDto[]> {\n    const users = await this.usersService.getAll();\n\n    if (!users || users.length < 1) {\n      throw new NotFoundException('users not found');\n    }\n    return users;\n  }\n\n  @Get('/:email')\n  async getUserByEmail(@Param() param): Promise<UserDto> {\n    const user = await this.usersService.findUserByEmail(param.email);\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n    return user;\n  }\n\n  @Get('/userId/:id')\n  async getUserById(@Param() param): Promise<UserDto> {\n    const user = await this.usersService.findUserById(parseInt(param.id));\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n    return user;\n  }\n\n  @Put('/userId/:id')\n  updateUserById(@Param() param, @Body() body): Promise<UserDto> {\n    return this.usersService.updateUserById(parseInt(param.id), body);\n  }\n\n  @Post('/add')\n  addUser(@Body() body: UserCreateDto) {\n    return this.usersService.addUser(body);\n  }\n\n  @Delete('/delete/:id')\n  deleteUserById(@Param() param) {\n    return this.usersService.deleteUser(parseInt(param.id));\n  }\n}\n","export * from './user.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class UserMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request User...');\r\n    next();\r\n  }\r\n}\r\n","export * from './users.service';\r\n","import { Users_V2 } from '@api/entities';\nimport { UserCreateDto } from '@cha/shared/entities';\nimport { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectRepository(Users_V2) private repo: Repository<Users_V2>) {}\n\n  async findUserByEmail(email: string): Promise<Users_V2> {\n    return await this.repo.findOneByOrFail({ email });\n  }\n\n  async getAll(): Promise<Users_V2[]> {\n    return await this.repo.find();\n  }\n\n  async findUserById(id: number): Promise<Users_V2> {\n    return await this.repo.findOneByOrFail({ id });\n  }\n\n  async updateUserById(id: number, attrs: Partial<Users_V2>) {\n    const user = await this.repo.findOneByOrFail({ id });\n\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n\n    Object.assign(user, attrs);\n\n    return this.repo.save(user);\n  }\n\n  async addUser(body: UserCreateDto) {\n    const user = await this.repo.create(body);\n\n    return this.repo.save(user);\n  }\n\n  async deleteUser(id: number): Promise<Users_V2> {\n    const user = await this.repo.findOneByOrFail({ id });\n\n    if (!user) {\n      throw new NotFoundException('user not found');\n    }\n    return this.repo.remove(user);\n  }\n}\n","export * from './lib/api-waivers.module';\n","import { Teams_V2, Waivers_V2 } from '@api/entities';\nimport { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { WaiversController } from './controllers';\nimport { WaiversMiddleware } from './middlewares';\nimport { ApiWaiversService } from './services';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Waivers_V2, Teams_V2])],\n  controllers: [WaiversController],\n  providers: [ApiWaiversService],\n})\nexport class ApiWaiversModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(WaiversMiddleware).forRoutes('*');\n  }\n}\n","export * from './waivers.controller';\r\n","import { Waivers_V2 } from '@api/entities';\nimport { Controller, Get, NotFoundException } from '@nestjs/common';\nimport { ApiWaiversService } from '../services';\n\n@Controller('waivers')\nexport class WaiversController {\n  constructor(private waiversService: ApiWaiversService) {}\n\n  @Get('/all')\n  async getAllPlayerSalaries(): Promise<Waivers_V2[]> {\n    const salaries = await this.waiversService.getWaiverPriority();\n\n    if (!salaries) {\n      throw new NotFoundException('Waivers not found');\n    }\n    return salaries;\n  }\n}\n","export * from './waivers.middleware';\r\n","import { Injectable, NestMiddleware } from '@nestjs/common';\r\nimport { Request, Response, NextFunction } from 'express';\r\n\r\n@Injectable()\r\nexport class WaiversMiddleware implements NestMiddleware {\r\n  use(req: Request, res: Response, next: NextFunction) {\r\n    console.log('Request Waivers...');\r\n    next();\r\n  }\r\n}\r\n","import { Teams_V2, Waivers_V2 } from '@api/entities';\r\nimport { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Repository } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class ApiWaiversService {\r\n  constructor(\r\n    @InjectRepository(Waivers_V2)\r\n    private repo: Repository<Waivers_V2>,\r\n    @InjectRepository(Teams_V2)\r\n    private teamsRepo: Repository<Teams_V2>\r\n  ) {}\r\n\r\n  async getWaiverPriority() {\r\n    const allWaivers = await this.repo.find();\r\n\r\n    const allWaiverWithTeamInfo = await this.setTeamInfo(allWaivers);\r\n\r\n    return allWaiverWithTeamInfo;\r\n  }\r\n\r\n  private async setTeamInfo(array: any[]) {\r\n    return await Promise.all(\r\n      array.map(async (item) => ({\r\n        ...item,\r\n        teamInfo: await this.getTeamInfo(item.team_id),\r\n      }))\r\n    );\r\n  }\r\n\r\n  private async getTeamInfo(teamId: number) {\r\n    if (teamId) {\r\n      return await this.teamsRepo.findOne({\r\n        select: {\r\n          id: true,\r\n          city: true,\r\n          teamlogo: true,\r\n          nickname: true,\r\n        },\r\n        where: {\r\n          id: teamId,\r\n        },\r\n      });\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n}\r\n","export * from './api-waivers.service';\r\n","export * from './lib/dtos';\n\nexport * from './lib/enums';\n\nexport * from './lib/models';\n","export * from './award.dto';\r\nexport * from './award-stats.dto';\r\nexport * from './award-award-type.dto';\r\n","export * from './draft-table-stat.dto';\r\nexport * from './draft-table.dto';\r\nexport * from './draft-pick.dto';\r\n","export * from './user';\r\nexport * from './teams';\r\nexport * from './league';\r\nexport * from './awards';\r\nexport * from './player';\r\nexport * from './drafts';\r\nexport * from './nhl';\r\nexport * from './stats';\r\nexport * from './schedule';\r\nexport * from './transactions';\r\nexport * from './salaries';\r\nexport * from './waivers';\r\n","export * from './leagueData.dto';\r\n","export * from './nhl-leaders.dto';\r\nexport * from './nhl-player.dto';\r\nexport * from './nhl-goalie-stat.dto';\r\nexport * from './nhl-player-stat.dto';\r\n","export * from './player.dto';\r\n","export * from './goalie-rating.dto';\r\nexport * from './player-rating.dto';\r\nexport * from './salaries-and-ratings.dto';\r\n","export * from './schedule-all.dto';\r\nexport * from './games.dto';\r\n","export * from './stat-team.dto';\r\nexport * from './stat-player-leader.dto';\r\nexport * from './stat-player-leaders.dto';\r\nexport * from './stat-goalie-leader.dto';\r\nexport * from './stat-goalie-leaders.dto';\r\nexport * from './stat-team-all.dto';\r\nexport * from './stat-player-all.dto';\r\nexport * from './stat-goalie-all.dto';\r\nexport * from './stat-team-playoffs.dto';\r\nexport * from './stat-teams-history';\r\nexport * from './stat-players-history.dto';\r\nexport * from './stat-goalies-history.dto';\r\nexport * from './stat-user-team-record.dto';\r\nexport * from './stat-user-teams-history.dto';\r\nexport * from './stat-user-players-history.dto';\r\n","export * from './team.dto';\r\n","export * from './get-transaction.dto';\r\n","export * from './user.dto';\r\nexport * from './user.create.dto';\r\n","export class UserCreateDto {\r\n  firstname!: string;\r\n  lastname!: string;\r\n  email!: string;\r\n  isadmin!: boolean;\r\n  isactive!: boolean;\r\n}\r\n","export class UserDto {\r\n  id!: number;\r\n  email!: string;\r\n  firstname!: string;\r\n  lastname!: string;\r\n  isactive!: boolean;\r\n  isadmin!: boolean;\r\n  authdata?: string;\r\n}\r\n","export * from './waivers.dto';","export enum AwardTypeEnum {\r\n  GM = 2,\r\n  CHAMPION = 3,\r\n  SEASON = 4,\r\n  ROOKIE = 5,\r\n  SCORER = 6,\r\n  GOALIE = 7,\r\n  DEFENSE = 8,\r\n}\r\n","export * from './awardType.enum';\r\n","export * from './primeButtonClass.enum';\r\n","export enum PrimeButtonClass {\r\n  PRIMARY = '',\r\n  SECONDARY = 'p-button-secondary',\r\n  SUCCESS = 'p-button-success',\r\n  INFO = 'p-button-info',\r\n  WARNING = 'p-button-warning',\r\n  HELP = 'p-button-help',\r\n  DANGER = 'p-button-danger',\r\n}\r\n","export * from './button';\r\nexport * from './logo';\r\nexport * from './teams';\r\nexport * from './award';\r\nexport * from './league';\r\n","export enum ConferencesEnum {\r\n  EASTERN = 2,\r\n  WESTERN = 3,\r\n}\r\n","export enum DivisionsEnum {\r\n  NORTH_WEST = 2,\r\n  NORTH_EAST = 3,\r\n  SOUTH_WEST = 4,\r\n  SOUTH_EAST = 5,\r\n}\r\n","export * from './conferences.enum';\r\nexport * from './divisions.enum';","export enum ChaLogoEnum {\r\n  ASSASSINS = 'Assassins.png',\r\n  BRAHMAS = 'Brahams.png',\r\n  FIGHTING_COCKS = 'Cocks.png',\r\n  CYCLONES = 'Cyclones.png',\r\n  CHY_DESPERADO = 'Desperado.png',\r\n  DRAGONS = 'Dragons.png',\r\n  FLASHERS = 'Flashers.png',\r\n  FREE_AGENT = 'free_agent.png',\r\n  GLORY = 'Glory.png',\r\n  GOATS = 'Goats.png',\r\n  GREEN_JACKETS = 'GreenJackets.png',\r\n  HOUND_DOGS = 'HoundDogs.png',\r\n  STELLAR_JAYS = 'jays-large.png',\r\n  KILLER_BEES = 'KillerBees.png',\r\n  MOUNTAINEERS = 'Mountaineers.png',\r\n  NORTH_STARS = 'NorthStars.png',\r\n  OIL_BARONS = 'OilBarons.png',\r\n  PROWLERS = 'Prowlers.png',\r\n  SAC_STORM = 'sac_storm.png',\r\n  VIKINGS = 'vikings.png',\r\n  WOLFPACK = 'Wolfpack.png',\r\n\r\n  ACES = 'aces.png',\r\n  BADGERS = 'badgers.png',\r\n  BANDITS = 'bandits.png',\r\n  BARONS = 'barons.png',\r\n  BEAVERS = 'beavers.png',\r\n  CHA_STORM = 'chastorm.png',\r\n  CHUPACABRAS = 'chupacabras.png',\r\n  COMETS = 'comets.png',\r\n  CONQUERERS = 'conquerers.png',\r\n  CRIMSONTIDE = 'crimsontide.png',\r\n  CRUSH = 'crush.png',\r\n  GRAVEDIGGERS = 'gravediggers.png',\r\n  HELLCATS = 'hellcats.png',\r\n  MIS_INDIANS = 'indians.png',\r\n  SAL_INDIANS = 'indians.png',\r\n  JOKERS = 'jokers.png',\r\n  LAS_DESPERADO = 'lasdesperado.png',\r\n  LIONHEARTS = 'lionheats.png',\r\n  LOGGERHEADS = 'loggerheads.png',\r\n  MUDBUGS = 'mudbugs.png',\r\n  OCEANUS = 'oceanus.png',\r\n  OUTLAWS = 'outlaws.png',\r\n  PREDATORS = 'predators.png',\r\n  RAYS = 'rays.png',\r\n  REDNECKS = 'rednecks.png',\r\n  ROYALS = 'royals.png',\r\n  SCHOONERS = 'schooners.png',\r\n  SEA_STORM = 'Storm.png',\r\n  SURGE = 'surge.png',\r\n  THUNDERCATS = 'thundercats.png',\r\n  VIPERS = 'Vipers.png',\r\n  VOODOO = 'voodoo.png',\r\n  WHISKEYJACKS = 'whiskeyjacks.png',\r\n  RUSTLERS = 'rustlers.png',\r\n\r\n  LEAGUE = 'cha_logo.jpg',\r\n}\r\n","export * from './cha-logo.enum';\r\n","export * from './team.enum';\r\n","export enum TeamsEnum {\r\n  FLASHERS = 2,\r\n  GREEN_JACKETS = 3,\r\n  CHY_DESPERADO = 4,\r\n  CYCLONES = 5,\r\n  GLORY = 6,\r\n  GOATS = 7,\r\n  MOUNTAINEERS = 8,\r\n  BRAHMAS = 9,\r\n  HOUND_DOGS = 10,\r\n  ICE_DRAGONS = 11,\r\n  NORTH_STARS = 12,\r\n  ASSASSINS = 13,\r\n  OIL_BARONS = 14,\r\n  PROWLERS = 15,\r\n  FIGHTING_COCKS = 16,\r\n  SEA_STORM = 17,\r\n  STINGRAYS = 18,\r\n  KILLER_BEES = 19,\r\n  VIPERS = 20,\r\n  WOLFPACK = 21,\r\n  MUDBUGS = 22,\r\n  CHA_STORM = 23,\r\n  SURGE = 24,\r\n  LAS_DESPERADO = 25,\r\n  OUTLAWS = 26,\r\n  OCEANUS = 27,\r\n  ACES = 28,\r\n  HONEY_BADGERS = 29,\r\n  BANDITS = 30,\r\n  BARONS = 31,\r\n  CHUPACABRAS = 32,\r\n  CONQUERERS = 33,\r\n  CRUSH = 34,\r\n  HELLCATS = 35,\r\n  MISS_INDIANS = 36,\r\n  SAL_INDIANS = 37,\r\n  JOKERS = 38,\r\n  LIONHEARTS = 39,\r\n  LOGGERHEADS = 40,\r\n  PREDATORS = 41,\r\n  REDNECKS = 42,\r\n  ROYALS = 43,\r\n  RUSTLERS = 44,\r\n  SCHOONERS = 45,\r\n  THUNDERCATS = 46,\r\n  VOODOO = 47,\r\n  WHISKEYJACKS = 48,\r\n  CRIMSONTIDE = 49,\r\n  BEAVERS = 50,\r\n  COMETS = 51,\r\n  GRAVE_DIGGERS = 52,\r\n  STELLAR_JAYS = 53,\r\n  FREE_AGENT = 54,\r\n  VIKINGS = 60,\r\n  SAC_STORM = 61,\r\n}\r\n","export * from './playoffs';\r\n","export * from './playoff-standings.model';\r\n","module.exports = require(\"@nestjs/axios\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"rxjs\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport { NestExpressApplication } from '@nestjs/platform-express';\n\nimport { join } from 'path';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestExpressApplication>(AppModule);\n  const globalPrefix = 'api';\n  const port = process.env.PORT || 3333;\n\n  console.log(process.env.DATABASE_URL);\n\n  app.setGlobalPrefix(globalPrefix);\n  app.useStaticAssets(join(__dirname, '..', 'public'));\n  app.setBaseViewsDir(join(__dirname, 'assets/views'));\n  app.setViewEngine('hbs');\n  app.enableCors();\n\n  app.use((req, res, next) => {\n    next();\n  });\n\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":["AppController","root","message","Get","Render","Controller","AppModule","Module","imports","ConfigModule","forRoot","isGlobal","envFilePath","TypeOrmModule","type","url","process","env","DATABASE_URL","synchronize","entities","Users_V2","Teams_V2","Award_Type_V2","Awards_V2","Draft_Order_V2","Drafts_V2","Conferences_V2","Current_Season_V2","Divisions_V2","Players_V2","Goalie_Ratings_V2","Player_Ratings_V2","Salaries_V2","Schedule_V2","Goalies_Stats_V2","Players_Stats_V2","Team_Stats_V2","Transactions_V2","Waivers_V2","ssl","rejectUnauthorized","ApiCoreModule","controllers","providers","AppService","getData","getViewName","Injectable","ApiAwardsModule","configure","consumer","apply","AwardsMiddleware","forRoutes","forFeature","AwardsController","ApiAwardsService","constructor","awardsService","getAllAwardWinners","console","log","async","champions","this","getChampions","length","NotFoundException","scorers","getScorerAwards","defense","getDefenseAwards","rookies","getRookieAwards","goalies","getGoalieAwards","gms","getGmAwards","season","getSeasonAwards","Promise","use","req","res","next","repo","playerStatsRepo","goalieStatsRepo","teamStatsRepo","selectUserOptions","id","display_season","cha_season","award_type","display_name","team_id","city","nickname","teamlogo","teamcolor","users_id","firstname","lastname","selectPlayerOptions","player_id","nhl_id","find","select","relations","where","AwardTypeEnum","CHAMPION","SCORER","setPlayerStats","DEFENSE","ROOKIE","GOALIE","setGoalieStats","GM","seasonAwards","SEASON","setSeasonStats","array","all","map","item","stats","getPlayerStats","playerId","chaSeason","findOne","playing_year","games_played","goals","assists","points","season_type","getGoalieStats","isgoalie","is_protected","isactive","isdefense","isforward","wins","goals_against_avg","save_pct","getSeasonStats","teamId","goals_for","goals_against","InjectRepository","Repository","ApiUsersModule","ApiDraftTableModule","ApiEntryDraftModule","ApiGoalieStatsModule","ApiLeagueModule","ApiNhlModule","ApiPlayerInfoModule","ApiPlayerRatingsModule","ApiPlayerStatsModule","ApiSalariesModule","ApiScheduleModule","ApiTeamStatsModule","ApiTeamsModule","ApiTransactionsModule","ApiWaiversModule","exports","DraftTableMiddleware","DraftTableController","ApiDraftTableService","draftTableService","param","draftTable","getDraftTableByYearByStandings","draft_year","Param","getDraftByStandings","data","sort","a","b","reverse","draftYear","playingYear","shortname","draftTableWithStandings","setTableStandings","getTeamStats","PrimaryGeneratedColumn","Column","Entity","OneToOne","playerStats","award","JoinColumn","name","ManyToOne","user","team","player","orderBy","Relation","eager","logInsert","logUpdate","logRemove","OneToMany","goalieStats","salary","draft","goalieRating","playerRating","AfterInsert","AfterUpdate","AfterRemove","division","Date","EntryDraftMiddleware","EntryDraftController","ApiEntryDraftService","draftService","entries","getAll","order","draft_round","draft_overall","GoalieStatsMiddleware","GoalieStatsController","ApiGoalieStatsService","ApiGoalieStatsLeadersService","ApiGoalieAllTimeStatsService","goalieStatsLeadersService","goalieStatsService","goalieAllTimeStatsService","getGoalieStatsLeaders","seasonType","minGames","getAllGoalieStats","stat","getGoalieStatsByPlayerId","getAllTimeGoalieStatsBySeasonByType","getAllTimeGoalieStatsSummedBySeasonByType","teamInfoRepo","dataSource","allStats","team_name","minutes_played","loss","ties","shutouts","saves","shots_for","penalty_minutes","MoreThan","allStatsWithTeamInfo","setTeamInfo","convertStats","result","query","teamInfo","getTeamInfo","teamName","raw","Number","toFixed","InjectDataSource","DataSource","shotsFaced","getShotsFacedLeaders","gaa","getGaaLeaders","savePct","getSavePctLeaders","getShutoutLeaders","getWinsLeaders","shotsFacedLeaders","take","gaaLeaders","savePctLeaders","shutoutLeaders","winLeaders","allGoalieStats","en_goals","pass_pct","goalieStatsWithTeamInfo","LeagueMiddleware","LeagueController","LeagueService","leagueService","getCurrentLeagueData","NhlMiddleware","HttpModule","NhlController","ApiNhlService","nhlService","nhlLeaders","getNhlLeaders","playerType","statType","getNhlGoalieLeaders","getNhlRookieLeaders","getNhlDefenseLeaders","getNhlSummaryFromSportsnet","getNhlRookieSummary","statsType","start","pageSize","getNhlPlayerStatsByPlayerId","httpService","nhlCOM","nhlAPI","nhlComSummary","sportsNet","get","pipe","response","splits","HttpService","PlayerInfoController","getAllPlayers","getPlayerInfoById","getGoalieInfoById","getPlayerLogoByNhlId","getGoalieLogoByNhlId","getActivePlayers","getPlayerForEditById","updatePlayerById","body","addPlayer","deletePlayer","Put","Body","Post","Delete","PlayerRatingsController","PlayerStatsMiddleware","PlayerStatsController","ApiPlayerStatsService","ApiPlayerLeadersStatsService","ApiPlayerAllTimeStatsService","ApiUserPlayerStatsService","playerLeaderStatsService","playerStatsService","playerAllTimeStatsService","userPlayersStatsService","getPlayerStatsLeaders","getAllStats","getPlayerStatsByPlayerId","getAllTimePlayerStatsBySeasonByType","getAllTimePlayerStatsSummedBySeasonByType","record","getUserPlayerStatsBySeasonType","userId","getUserPlayerStatsAllTimeBySeasonType","position","plus_minus","pp_goals","sh_goals","gw_goals","shots","shooting_pct","minutes_per_game","fo_pct","corner_pct","hits","blocked_shots","pointsPerSixty","hit_per_game","getHitsLeaders","getPointsLeaders","getAssistLeaders","bestPlusMinus","getBestPlusMinusLeaders","blockedShots","getblockedShotLeaders","currStreak","getCurrSteakLeaders","getDefenseLeaders","getGoalLeaders","longStreak","getLongStreakLeaders","minutes","getMinutesLeaders","penalties","getPenaltyLeaders","ppGoals","getPpgoalsLeaders","getRookieLeaders","shGoals","getShGoalsLeaders","getShotsLeaders","hitsLeaders","pointsLeaders","assistLeaders","bestPlusMinusLeaders","blockedShotLeaders","currStreakLeaders","current_points_streak","defenseLeaders","goalLeaders","longStreakLeaders","longest_points_streak","minutesLeaders","penaltyLeaders","ppGoalsLeaders","rookieLeaders","player_status","shGoalsLeaders","shotsLeaders","gt_goals","userTeams","findBy","userTeamsWithPlayerStats","setConvertedPlayersStats","setPlayerAllTimeStats","getPlayerAllTimeStats","teamShortName","SalariesMiddleware","SalariesController","ApiSalariesService","salariesService","salaries","getAllPlayerSalaries","getAllGoaliesSalaries","getUserTeamPlayerSalaries","ratingsSeason","getUserTeamGoaliesSalaries","teamsRepo","playersRepo","playersStatsRepo","playerRatingsRepo","goaliesStatsRepo","goalieRatingsRepo","allPlayersInSeason","allSalariesForPlayersInSeason","setPlayersSalaries","allSalariesAndRatingsForPlayersInSeason","setPlayerRating","allGoaliesInSeason","allSalariesForGoaliesInSeason","allSalariesAndRatingsForGoaliesInSeason","setGoalieRating","getSalary","season_2022","season_2023","season_2024","season_2025","toString","ratings","getPlayerRating","getGoalieRating","passing","speed","skating","c_rate","l_rate","r_rate","ld_rate","rd_rate","shooting","face_off","forecheck","assist_rating","clear_crease","shot_block","pk","physical","rock","intimidation","game_fatigue","shift_fatigue","ScheduleMiddleware","ScheduleController","ApiScheduleService","scheduleService","getCompleteScheduleBySeason","getNextDays","currentDay","schedule","game_day","Between","setTeamNextInfo","lastFive","createQueryBuilder","year","andWhere","Brackets","qb","orWhere","limit","getMany","getLastFiveRecord","lastFiveRecord","forEach","home_team_id","home_team_score","vis_team_score","push","game","vis_team_id","gameDay","visTeamScore","visTeamInfo","visTeamLastFive","getTeamLastFive","visTeamRecord","getTeamSeasonRecord","visTeamVersus","getTeamRecordVersus","homeTeamScore","homeTeamInfo","homeTeamLastFive","homeTeamRecord","homeTeamVersus","teamOneId","teamTwoId","versus","empty","getVersusRecord","TeamStatsMiddleware","TeamStatsController","ApiTeamStatsService","ApiAllTimeTeamStatsService","ApiUserTeamStatsService","teamsStatsService","allTimeTeamsStatsService","userTeamStatsService","getTeamStatsBySeasonByType","getAllTeamStatsBySeasonByType","getTeamStandingsForPlayoffs","getAllTimeTeamStatsBySeasonByType","getAllTimeTeamStatsSummedBySeasonByType","getUserTeamRecordBySeasonBySeasonType","getUserTeamStatsBySeasonType","allTimeStats","pk_goals","pk_attempts","pp_attempts","shut_outs","face_off_won","face_off_lost","corner_won","corner_lost","pass_complete","pass_incomplete","goalsForPerGame","goalsAgainstPerGame","goalDiff","winPct","ppPct","pkPct","foPct","getPct","passPct","cornerPct","pimPerGame","shots_against","high","low","conferencesRepo","sortTeamStatsByStandings","long_win_streak","teamStats","divisions_id","divisionname","conference_id","div_loss","div_tie","div_win","home_loss","home_ties","home_wins","pk_min","road_loss","road_ties","road_wins","trail_after_two_loss","trail_after_two_ties","trail_after_two_wins","setConferenceInfo","teamStatsWithConference","conference","getConferenceInfo","conferenceId","conferencename","userTeamsWithTeamStats","setTeamStats","setConvertedTeamStats","TeamsMiddleware","TeamsController","TeamsService","teamsService","teams","getUserTeams","parseInt","getCurrentTeams","TransactionsMiddleware","TransactionsController","ApiTransactionsService","transactionsService","getTransactionsBySeason","findSeasonDates","transactions","transaction_date","end","setTransactionInfo","transaction","transactionDate","teamOneInfo","team_one_id","teamOnePlayers","setPlayersInfo","team_one_players","teamOnePicks","team_one_picks","teamTwoInfo","team_two_id","teamTwoPlayers","team_two_players","teamTwoPicks","team_two_picks","getPlayerInfo","teamtextcolor","UserMiddleware","UsersController","UsersService","usersService","users","findUserByEmail","email","findUserById","updateUserById","addUser","deleteUserById","deleteUser","UserCreateDto","findOneByOrFail","attrs","Object","assign","save","create","remove","WaiversMiddleware","WaiversController","ApiWaiversService","waiversService","getWaiverPriority","allWaivers","UserDto","PrimeButtonClass","ConferencesEnum","DivisionsEnum","ChaLogoEnum","TeamsEnum","module","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","app","NestFactory","port","PORT","setGlobalPrefix","useStaticAssets","join","__dirname","setBaseViewsDir","setViewEngine","enableCors","listen","Logger","bootstrap"],"sourceRoot":""}